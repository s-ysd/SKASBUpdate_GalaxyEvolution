%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Japanese
%%Title: OH_spectra_Etoka.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Hiroshi Imai
%%CreationDate: 2015/02/05
%%BoundingBox: 0 0 440 163
%%HiResBoundingBox: 0 0 439.3023 162.5987
%%CropBox: 0 0 439.3023 162.5987
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 48 8%%BeginData: 5598 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FF%A8FFA8FFFFFFA8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8A8A8FD07FFA8A8FD37FFA8FFA8527DA8A8FD37FFA8A8FD07FF%A8FD2EFFA8A8FD0BFFA8A8A8FD39FFA8FD08FFA8FD2DFF7DFD09FFA8FD05%FFA8FD1BFFA8FD1BFFA8A8FD07FFA8FD2EFFA8FD48FFA8FD36FF7DFD09FF%A8FD05FFA8FD1BFFA8FD1BFFA8FD08FFA8FD2EFFA8A8FD2AFFA8FD1CFFA8%FD07FFA8A8FD2DFF7DFD09FFA8FD05FFA8FD1BFF7DFD1BFFA8A8FD07FFA8%FD2EFFA8A8FD2AFFA8FD1CFFA8FD07FFA8A8FD2DFFA8FD09FFA8FFFFFD04%A8FD1BFFA8FD24FFA8FD2FFFA8FD0BFF52A87DA8FD1BFFA8FD1CFFA8FD04%FF7D7D7DA8A8FD2DFFA8A8FD08FFA8FFFD05A8FD1BFF7DFD1BFFA8FFFFA8%FFFFA87DA8A8FD2FFFA8FD2AFFA8FD1CFFA87DA8A8FFA8FD31FFA8A8FD08%FFA8FD05FFA8FD1BFF7DFD1BFFA8FFFFA8FD05FFA8FD2FFFA8FD2AFFA8FD%1CFFA87D7DA8FD04FFA8A8FD2DFFA8A8FD08FFA8FD05FFA8FD1BFFA8FD1B%FFA8A8FFA8FD05FFA8FD2FFFA8FD2AFFA8FD1CFFFD04A8FD04FFA8A8FD2D%FFA8A8FD08FFA8FD05FFA8FD1BFFA8FD09FFA8FD11FFA8A8FD07FFA8FD2F%FFA8FD0DFFA8FD1CFFA8FD08FFA8A8FD12FFFD04A8FD04FFA8A8FD2DFFA8%FD09FFA8FFA8A87DA87DFD1BFF7DFD08FFA8A8FD11FFA8A8FF7DFD05FFA8%FD2FFFA8FD0BFFA8A8A8FD1CFFA8FD08FFA8FD13FFA8FFA8A8FD05FFA8FD%09FFA8FD23FF7DFD09FFA8FD05FFA8FD1BFF7DFD08FFA8A8FD11FFA8FFA8%7DFD05FFA8FD0AFFA8A8FD21FFA8A8A8FD2AFFA8FD08FFA8FD13FFA8A8FF%A8FFA8FFFFFFA8FD09FF7DA8FD20FFA87DA8FD09FFA8FD05FFA8FD1BFFA8%FD08FFA8A8FD11FFA8A8A87DFFFFFD04A8FD0AFFA8A8FD21FF7DA8A8FD07%FFA8FD22FFA8FD08FFA8FD13FFA8A8FFFFFFA8A87DA8A8FD09FFA8A8FFFF%A8FD1EFFA8A8FD09FFA8FD05FFA8FD1BFFA8FD08FFA8A8FD1AFFA8FD0BFF%A8FFA8A8FD1EFF7DA8A8FD2AFFA8FD08FFA8A8FD12FFA8FD07FFA8A8FD09%FFA8A87DFF7DFD1EFF7DA8FD09FFA8FFA8FFFFFFA8FD1BFF7DFD08FFA8A8%FD11FFA8FD08FFA8FD0BFFA8A852A8FD1BFFA8A8FF7DFFA8FD0BFF7DA8A8%FD1CFFA8FD08FFA8A8FD12FFA8FD08FFA8FD09FFA8A8A87D7DFD1BFF5252%A8A8FD0AFFA8FFA8A87DA8A8FD1BFF7DFD09FFA8A8FD10FFA8FD08FFA8FD%0BFF7DA8FFFFA8FD1BFF52A8FFFFA8FD2AFFA8A8FD07FFA8FFA8FD11FFA8%FD08FFA8FD09FFA87DA8FFA87DA8FD17FFA8FFA8A852FFA8A8FD08FFA8FD%05FFA8FD17FFA8A8FFFF7DA8A8FD05FFA8A8FFA87DFD0FFFA8A8FD07FFA8%FD0BFF7DFFFFFF52A8FD16FF7D527DA8FF7DFFFFA8FD27FF7DFFA8A8A8FD%07FFA8FFA87DA8FD0FFFA8FD07FFA8A8FD09FFA8FD05FF52A8FFA8A8FD0F%FFA8A852A87D52A8FFA8FFFFA8FD08FFA8FD05FFA8FD17FFA8A87DFD04A8%FF7DA8A8FFA8FD04FFA8A8FD0DFFA8A8FD07FFA8FD10FFA87DFF52A8FD0F%FFA8527D52FD07FFA8FD1DFFA8FD09FFA8A87DA87DFFA8A87DA87DFD05FF%A8FD0FFFA8FD07FFA8A8FD09FFA8FD06FF7D27A85252A8FD0CFFA8527DFD%09FFA8FD08FFA8FD05FFA8FD0DFFA87D7DA8FFFFA8FFFFFFA8FFFFA8A8A8%7DFD05A87DFD05FFA8FD0DFFA8A8FD07FFA8FD0AFFA8FD0AFF7D7D7DA8A8%FFA8FFA8FFA8A8A87D52A8FD0AFFA8FD0DFFA8FD0DFFA8A8A8FFA8A87DA8%A8A87DFFFFFFA8FFFFFFA8FD0AFFA8A8FD0DFFA8FD07FFA8527D527D527D%527D52527DFD0BFFA87D52522752527DFD04527DFD0CFFA827FD05522752%7DFFFFFF7D7D7DA87DFD05A87DA87DA87DA8FD04FFA8FFA8FFA8FFA8FD11%FFA8A87DA87DA87DA8A8A87DA87DA87DA8FD07FFA8FFA8FFA8FFA8FFA8FF%A8FD27FFA8FFA8FFA8FFA8A8FD04FFA8A8A8FFA8A8A8FFA8FFA8FD27FFA8%A8A8FFA8FFA8A8A8FD05FFA87DA8A8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFFFFFA8FFFFFFA8FD05FFA8FFA8FFA8FFFFFFA8FFA8FFFFFFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFFFFFA8FFA8FFA8A8FD05FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD07FFA8FFA8A8A8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD13FFA87DFD0EFFA87DA8FD0CFFFD04%A8FD12FFA8A87DA8A8FD0EFFA87DFD0FFF7D7D7DFD0EFFA8A87DFD13FF7D%A8FD0EFF7DA87DFD0DFF7DA8A8FD13FF7DA8A8FD0FFFA8A8FD0FFFA87DA8%FD0EFF7DA8A8FD14FFA8FD0DFFA8FD0FFFA8FFA8FD15FFA8FD23FFA8FD3E%FFA8FD37FFA8FD07FFA8FD2AFF7DA8A8A87DA8A8A87DA8A8FFA87DA8A87D%FFFD04A8FD2AFFA8A87DFD05A87DA8A8FFFFA87DA87DA8A8FFA8A8A8FD2A%FFA87DA8A87DA8A8A87DA8FFA87D7D7DA8A8FFA8A8A8FD2BFFA8A87DA87D%A87DA8A8A8FFFFA8A87DA87DA8FFA87DFD2EFFA8FD05FFA8FFA8FFFFFFA8%FFFFFFA8FD35FFA8FFA8FFFFFFA8FFA8FD14FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=400 GradRes=200 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>GPL Ghostscript 9.05</pdf:Producer>
         <pdf:CreationDate--Text>Wed Jun  4 14:20:35 2014</pdf:CreationDate--Text>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2014-11-23T11:54:45+09:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-11-23T11:54:45+09:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:MetadataDate>2014-11-23T11:54:45+09:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>96</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAYAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qg9ZUNpF8rAFWt5QQ&#xA;RUEFD1GKtrpGmcRys7ctT4iIkAJ9hQ4q5dH0hVCrY26qooqiJAAB2G2KuXR9IVQq2NuqqKKoiQAA&#xA;dhtirUei6PHGsaWUARAFUemhoAKDqMVbXR9IVQq2NuqqKKoiQAAdhtirl0fSFUKtjbqqiiqIkAAH&#xA;YbYq5dH0hVCrY26qooqiJAAB2G2KtR6Lo8caxpZQBEAVR6aGgAoOoxVtdH0hVCrY26qooqiJAAB2&#xA;G2KuXR9IVQq2NuqqKKoiQAAdhtirl0fSFUKtjbqqiiqIkAAHYbYql97b6Tp9xpNnHpsLpfXBtARG&#xA;n7tUtZpwxqN/95+P04qmC6PpCqFWxt1VRRVESAADsNsVcuj6QqhVsbdVUUVREgAA7DbFUk1PStZv&#xA;fIsGnaJcrYXr21ukdxGzW/BVC19NlWbhsKD4Ttt74qp2+jagt7F+mpo7hJtQeW1iLmdd4rlthMv7&#xA;v906pwTYca1+I4qnzaLo7MjNZQExnkn7tNjQr4eDHFW20fSGFGsbcioNDEh3BqD08cVc2j6QylWs&#xA;bdlYUZTEhBB7HbFXNo+kMpVrG3ZWFGUxIQQex2xVv9E6V/yxQf8AIpP6Yqtj0XR441jSygCIAqj0&#xA;0NABQdRiqlLp2kwyW8aWFvSeVlakSCnwPIT07lcVVl0fSFFFsbcCpNBEg3JqT08cVcNH0gEkWNuC&#xA;xqxESbmlKnbwGKtDRdHEjSCyg5sApPpp0Ukjt/lHFW/0PpHIt9Rt+RABb0kqQK0HT3xV36H0jkG+&#xA;o2/IAgN6SVANKjp7Yq46PpBIJsbclTVSYk2NKVG3gcVQWq6Xpix2zrDFCy3VsU4JGpZhOhArx5bU&#xA;rscVTjFUJq//AByb3av7iXb/AGBxVExgCNQE9MACibfDt02229sVXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FUp1r/jpaB/zHv8A9QN1iqbYq7FUHooA0awAT0wLeKibfD8A22229sVbvuX1nT6EAfWG5VFaj6vL&#xA;038cVReKuxV2KuxV2KuxVAX06LqOm25rzkkkkXwokLA/8TGKo/FXYq7FXYq7FXYqg9UDfV4+JAH1&#xA;i35VFaj1k6bimKozFWOT+b/L+oWd1a2lw7zvFMgBgnQK6xO5VmdFVTxRqButD4YqyCF0eJGSQSqR&#xA;tICDy96rt92Kr8VdirsVdirsVdirsVdirsVdiqVa7VbrRpuoivhVfH1beaH8DLXFU1xVxIUEk0A3&#xA;JPQDFWN6hqeq6f5NtLvSLf6/diG2CLxaWqsFDPwh+Jtv5fn0GKt2eo6reahEL6yMSQ3rC2JjKFV9&#xA;O5UVLsQ/7tUYvHt8fHscVZHirsVdirsVdirsVSrUf+O9pH/Rx/ybGKprirsVdirsVdirsVQOr09G&#xA;AGIv/pNuQ3w0Q+sm+5B9tsVSTy7q9zdavPAb6a9ihLxu4Fq1vzBqCvorHNF9k058lPTkWxVE3Hlf&#xA;RLDTppLWF1e2gl9EtNNJT906j+8dgaCRuNenI06nFU/UkqCQVJFSppUexpUYq3irsVdirsVdirsV&#xA;dirsVdirsVSnzD/0ra9Pr8HX/ZYqm2KuxVCaOSdIsSQVJt4iVNKj4BsaVGKtX/H61pta1+sNxpWl&#xA;fq83Wnb54qjMVdirsVdirsVdiqVaj/x3tI/6OP8Ak2MVTXFXYq7FXYq7FXYqgtW4+hDXlX6zb8eP&#xA;Lr6y9advntiqX6VaWaaxIw1Z768giMDQOturxorft+lFG/Vttwp8CRXFUy1f/jk3u9P3Eu/+wOKo&#xA;mMgxqQ/qAgUfb4tuu22/tiq7FXYq7FXYq7FXYq7FXYq7FXYqlOufHPYR7/BPHOCP8iWOKn/Jev0Y&#xA;qm2KuxVK7TULSx8tW17cy1t4bSJ3lA5EqIwagKN6+wxVR/TNje6hbRRSMj2148bBwFDkRXEXw16j&#xA;1InXxqvh1VTrFXYq7FXYq7FXYqlWo/8AHe0j/o4/5NjFU1xVSupxb2s05HIQo0hXpXiCaYqs06WS&#xA;bT7WaQ1kkijdzsPiZQT02xVEYq7FXYqgdXdFhgVpAjNc2/FagF6TJtv9+2KpP5fhvH128vTatb2E&#xA;yubeStq6yF5AS3KBVkU7dJGavsRuqner/wDHKvadfQl/4gcVRS8uI5ABqfEAagH2NBireKoLUNRN&#xA;pc6dDxDLfXJt2cmnCkEswPvVogv04qjcVdirsVdirsVdirsVdirGNU1B5vM9vaREiK0j/wBKVgBW&#xA;SW7smhKtWuy8wRirJ8VdiqWWtja3/l62tb6FJoZraNZom+JSDGARXY/TirTabZWd5avaQpCZ7pnn&#xA;KruxMEx8dviYt4VJ7knFU0xV2KuxV2KuxV2KpVqP/He0j/o4/wCTYxVNcVQmr/8AHKvadfQl/wCI&#xA;HFW9J/45Vl/xgi/4gMVRWKuxV2KoPVA31ePiQB9Yt+VRWo9ZOm4piqzTtC0zTpZZbRHR5v7zlLLI&#xA;p2A2V2ZRsoGw6DFUiu/KK2yyX/rofq8d5II1h4n999ZfijczwH+lnlt8XFelMVZTCqrEgTlxptzL&#xA;Fqe/P4vvxVfiqT+ZQCNMqK/7kLem1e59jirVprwvdUsY7UH6ldW99IWccWL2lxBCpAI+y3qMQfCm&#xA;KpzirsVdirsVdirsVdirEJSp84X/ABpUfVAxHWvq2x3+jFWX4q4gEEHodtjQ/eMVQei8f0NYca8f&#xA;q8VOVeVOA68t6/PFXX4ButNqnKlw1Dt8P+jzb7/dtiqMxV2KuxV2KuxV2KpVqP8Ax3tH/wCjj/k2&#xA;MVTXFUJq/wDxyb3/AIwS+/7BxV2kf8cmy/4wRdf9QYqi8VdirsVQWrAGCGqc6XNuQdvhPrL8W/3b&#xA;YqjcVQmr/wDHKvadfQl/4gcVRS8uI5EFqfEQKAn2FTireKpH5tmjt7K1u5f7mzuVupjuT6dvG80h&#xA;AHUhENBirHLPyrbeV1g8xz6hJp9JLU3thLPWwgWdPQuY46lUQS3E/ryONmdFNO+Ks9hljmiSaJg8&#xA;Uih0YdCrCoOKrsVdirsVdirsVYd+Zv8AiU6TayeWmL6tp8/6TFjvxu4bQHnbtx+P4mlQgLuxHHoc&#xA;VROmmw1C0fzFARIdTubcRSKar6EVyscfE/5YXk1PlvQYqyjFXYqkF5osms+U7bTjNHH6sEImd4jI&#xA;rLwHJQodGXl4hqjsa74qoad5dGk3sLPP6pur15AIo2iAJjuZayUd+R/e8eR/ZVRTbFWTYq7FXYq7&#xA;FXYqpXV3b2sayztwRpI4gaE/HNIsSDYHq7gYqlOtXUVtrGmSyHaOO7lKgjkVSIFqA4qm1nP9YtIL&#xA;grwM0ayca1pyUGldq9cVUdW3sJI96TlICR1AncRFvo51xVA6TeS2tzJpN8USX1XOmRpyYm03MfNq&#xA;U5Dgw+VOp3Kqc4q7FXYqgdXVDDAW5VFzb8eJalTMn2gu1P8AWxVHYqhNX/45N7/xgl6f6hxVEx8f&#xA;TXjXjQU5V5Up35b1+eKrsVS3XLK0v47exvIxLaXbywXERJAeOS1mV1NKHdScVROpadZanp9xp99C&#xA;s9ndRtFPC4BVlYUIIOKsAi84ap5YB8lywSap5lSkXloRQTtHPZcFSG5vJgCiCGSqXBDV2DU+LFWV&#xA;+VPPHlrzTbyS6PeLLNb8ReWbj07m3d1DcJom+JWFeJ7cgRWoOKp7irsVWT3EECB55EiQukYZ2Cgv&#xA;IwRFqe7OwVR3JpirzLUtZ87+azMfL9uj6Anr6dqEJZ7aS5iuy6pc200gSvpWxhmUqRUuyg1Gyqf+&#xA;UPy2s/LOsS31vqFxPbLA9rpunycfRtYJZEkdU2LMWeNSTXc1JqTXFUyt9FsPLflW10uw9Qafphg9&#xA;PnWV1hjnV26bkKlfoxVP8VdiqD0Xj+hrDjXj9XipyrypwHXlvX54q6/IF1ptX41uGoNvi/0ebbf7&#xA;9sVRmKuxV2KpTeeZ9KtNSNhLKPVRYjLxIYo08yQxKyglhyaUGpFAN8VTQSxFiodSwbgVqKhuPKnz&#xA;47/LFUr8zQy3OnrZxIsj3DkIrED44o3nioTUD95EuKsQmTVob2aO8s2u72yjENpJGzSzGLUWuRcS&#xA;b/s84VNOP2UHyxVMbrWNchgsW0plmtoraO3ngCB3F3IGReQAqPRKfGtQe2Ko+DX5tQvYLG6tjYi5&#xA;ljmslcnnLFFynLDbjX4EDKK8eXXFUdrvl+yvwb0wGbUrVVksj6jKBLAxli+Hksf954/TiqaQTRTw&#xA;xzRNyilUPG3irCoO/tiq/FXYqgtWIEENX4VubcAbfEfWX4d/v2xVG4qlOu6pYw211YvKEupbaVkU&#xA;qxWnpyMOTAcRUROQCRXicVSZNE/NNVUN5r0t2VAhJ0WUAkGvMgagPi7bbe2KuXSPzPcRsvmvSylK&#xA;8l0aX4qg0Nf0gRTeu2KonQdF82Jq41PXdbtNShW3eK1t7Oye0VDM0bMxZrm55ikI47V3O9NsVZKj&#xA;pIiyIQyOAysOhB3BGKuVlZQykMrCqsNwQe4xVj3mTyTovmH0br1Z9N1OKhtta0yQW94qE8jGJgG5&#xA;xP8AtRuGU9aVAOKpJ/gLzsqp9R/MTUlhciVzPa6fcM0h3JRzCnGMnpHuANhiqqfJnniS0T6v+Yeo&#xA;VYKRK1jpThlMdGpS2U7t8QPLYbbn4sVWxfldHelR5i8x6n5k0wrU6VePAtlKWWpaZIIozLRzzQM1&#xA;F+Gg+EHFWa2cFrb2kFvaIsdrDGsdvHHQIsaqAgWm1AvTFVRWVlDKQysKqw3BB7jFUNf2sepaVc2q&#xA;zGOO9geJZ4wrFRKhXmoYMppyqKgjFWHReXvzcMZP+NdOcMB6cg0atRz5ctrsCvH4fCnvvirf6A/N&#xA;6Vg6+dNMWIglTHorEGvHj9q9Oxoe/f7lWU+Wxcjy7pQupUnuhZwCeaJeEbyekvJkUluKsdwKnFUl&#xA;lsfNVvdgpeW3O41B3tRcGW4URlLlqcawmM+kY14qxUcSf2jiqPB84o6pLNpreoQEkEc6GvEsV9Mu&#xA;9eh35/Riq5Y/OBDGa902Ch4oRbTyhqmgJrcQ8a/y7/PFWpNH1abfUNZcQIvOlrH9VKyDo3Pm9UA3&#xA;4NUE9dtsVRKaBocGnfUhaRR2ih2agCnlJG0ckhcUYOyOwZ68jU74qgh5I0USrMplWZBzVw4p9Z5B&#xA;/rbJTg85YAlmUjbpiqK0nQNMsnW6tpJ5i61V5riWZTzA5SUdivJ+O7Ur9GKpkkcBkadFUyuBG8oA&#xA;5ERlqKWG/wALM23apxVZb29nEZntoo4zPIZJ2jVRzlACFnI+01EC1O+1MVVP3bt2Zoz7Eq1PwNGx&#xA;VsOhcxgjmoDMvcBqgH6eJxVJjouoW8hj0rVWtoAeYsp4kuY0DEmiGscoUksaFzTYLxVeJVd9X82h&#xA;t9T0/wBQk8Y/qctPTDUJ/wB6uRahHt298VaU+cmZRI2m2o+yKCe4LmtSQCbfj8NTx+Lp13+FVD3H&#xA;+K4lthqEuny231i39eeFJoXJadAqJGzzD7RHxF9/5RirI8VQc+kafPfxX8sRa6hFEbk4WnF1FUB4&#xA;NRZnAqO5xVd+idK/5YoP+RSf0xVoaRpQ2FlBT/jEn9MVQmq6VCum3H6OsYGvAh9BfSi6+3Oi1p05&#xA;bV64q7R9JiOl2v6QsYFvfTX1wYoq8qftemCnLx4/DXptiqLGkaUNhZQU/wCMSf0xVw0jShsLKCn/&#xA;ABiT+mKpR5p024j0aX9BabFLqJ+GFUitqrUH4v35RKKabd+m1eQVb0DS7oyXw1XT4EjE5+p1jt/s&#xA;VP2PSr+7px4mSj1rUdMVTYaRpQ2FlBT/AIxJ/TFXDSNKGwsoKf8AGJP6YqgdZ04Q20J03S4LiX6x&#xA;AJUWOEEQeovrEeoUX+7r3+WKqHlzTLhrWY6zp0EVx6i+kgjgpxMMZfj6fL4RN6gXl8XGlcVTUaRp&#xA;Q2FlBT/jEn9MVcNI0obCygp/xiT+mKoqOOOONY41CRoAqIooABsAAOgGKqV5ax3MPB0jcg8k9ZBI&#xA;obpXjUdie+KsM1zy55hkvrhrCCH6v6BWL01hTlKyqEKh68OEg5GoNV5fE1VVVWXfojSv+WKD/kUn&#xA;9MVcdI0o7Gygp/xiT+mKuOkaUdjZQU/4xJ/TFVDUNGtnsLlLK1to71onFtI0SFVlKngxBU7BqdsV&#xA;UND0WCPTI1vrKIThpSFkWJ3WIysYUdlBBZYuIJqd+564qjv0RpX/ACxQf8ik/pirv0RpX/LFB/yK&#xA;T+mKu/RGlf8ALFB/yKT+mKsT0Xy7ryatFJqNvGbQSsWWkBURiF1YNQcn5ymNlNBSjfCgIXFWWfoj&#xA;Suv1KCv/ABiT+mKu/RGldfqUFf8AjEn9MVd+iNK/5YoP+RSf0xVjet6N5gN7dHS7aCK39KL6nLD6&#xA;KSrKFmBPxptSVombehRaAEkgqsvxV2KuxV2KuxV2KsVnHn2JTDC0c6Ol7/pDCL1lZF42dN4owZCA&#xA;7VRhuR8O2KukuvzDYXCi1tYtrkQOihySIozb7tcAU9UyDkV+IAVRO6qYaZP5jOpNb3qx/Vl9aQy+&#xA;mQxU3EggVXVuHxQ8PFl4nl9tTiqXRzed0vZlghElo8rKr3IRuH+my1ZV9SFin1UoR8R3Cin2sVRV&#xA;lP5vl06Vb2CGPUok9WMxrwid/RUpGR60pp65YMef2VH82Kony+2tu922qJ6bsYiUBqiy+mPUWE71&#xA;ipw678+ftiqcYq7FXYq7FXYq7FXYq7FXYq7FWPzr5xh1D/RmiuLGS8RW9YLzSzKF5GQJ6Xxh24Ly&#xA;LbKCQak4qhrGf8wQIEuobXiPq4nkKB5D+7f1z8M8aElwm4UBakBXHxYqq6XcecVubaDUEiKy8Wnk&#xA;9OvFVtoC/Fo34A+v6q0Y1PIFaqpxVSv5fOcWrXj6ZD69tWUIk/D06/V7cwFAWjYj1hKG+Md+vw4q&#xA;jNPl80yzTW+pxxRxM37m4gT06RrLKGr++n3aIRU6ULMe2KtaFJ5mkvmbWIliPoUkWKvoFhI3pGMF&#xA;no5XkZRyNPg3PXFU+xV2KuxV2Kv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:0280117407206811822AC79E25A595E7</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0280117407206811822AC79E25A595E7</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:5b60327a-a6b3-11ef-0000-4a27dae82fc3</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:5b60327a-a6b3-11ef-0000-4a27dae82fc3</stRef:instanceID>
            <stRef:documentID>uuid:5b60327a-a6b3-11ef-0000-4a27dae82fc3</stRef:documentID>
            <stRef:originalDocumentID>uuid:5b60327a-a6b3-11ef-0000-4a27dae82fc3</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0280117407206811822AC79E25A595E7</stEvt:instanceID>
                  <stEvt:when>2014-11-23T11:54:45+09:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">lumino_all_histo_max_and_lmc.ps</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>st2b102</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">gnuplot plot</rdf:li>
               <rdf:li xml:lang="x-repair">gnuplot plot</rdf:li>
            </rdf:Alt>
         </dc:description>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>209.902778</stDim:w>
            <stDim:h>297.038889</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>初期設定のスウォッチグループ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -162.599 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 162.599 li
439.302 162.599 li
439.302 0 li
cp
clp
.5 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
221.272 137.596 mo
27.3721 137.596 li
27.3721 136.385 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.929717 .879728 .890196 .799985 cmyk
@
41.187 137.596 mo
41.187 136.385 li
@
55.0435 137.596 mo
55.0435 136.385 li
@
68.8984 137.596 mo
68.8984 135.172 li
@
82.7544 137.596 mo
82.7544 136.385 li
@
96.6104 137.596 mo
96.6104 136.385 li
@
110.466 137.596 mo
110.466 136.385 li
@
124.322 137.596 mo
124.322 135.172 li
@
138.138 137.596 mo
138.138 136.385 li
@
151.993 137.596 mo
151.993 136.385 li
@
165.849 137.596 mo
165.849 136.385 li
@
179.705 137.596 mo
179.705 135.172 li
@
193.561 137.596 mo
193.561 136.385 li
@
207.416 137.596 mo
207.416 136.385 li
@
221.272 137.596 mo
221.272 136.385 li
@
221.272 .25 mo
27.3721 .25 li
27.3721 1.42139 li
@
41.187 .25 mo
41.187 1.42139 li
@
55.0435 .25 mo
55.0435 1.42139 li
@
68.8984 .25 mo
68.8984 2.6333 li
@
82.7544 .25 mo
82.7544 1.42139 li
@
96.6104 .25 mo
96.6104 1.42139 li
@
110.466 .25 mo
110.466 1.42139 li
@
124.322 .25 mo
124.322 2.6333 li
@
138.138 .25 mo
138.138 1.42139 li
@
151.993 .25 mo
151.993 1.42139 li
@
165.849 .25 mo
165.849 1.42139 li
@
179.705 .25 mo
179.705 2.6333 li
@
193.561 .25 mo
193.561 1.42139 li
@
207.416 .25 mo
207.416 1.42139 li
@
221.272 .25 mo
221.272 1.42139 li
@
221.272 .25 mo
221.272 137.596 li
@
221.272 129.275 mo
218.849 129.275 li
@
221.272 120.469 mo
220.061 120.469 li
@
221.272 111.622 mo
220.061 111.622 li
@
221.272 102.775 mo
220.061 102.775 li
@
221.272 93.9692 mo
220.061 93.9692 li
@
221.272 85.1221 mo
218.849 85.1221 li
@
221.272 76.3154 mo
220.061 76.3154 li
@
221.272 67.4692 mo
220.061 67.4692 li
@
221.272 58.6631 mo
220.061 58.6631 li
@
221.272 49.8164 mo
220.061 49.8164 li
@
221.272 40.9692 mo
218.849 40.9692 li
@
221.272 32.1631 mo
220.061 32.1631 li
@
221.272 23.3164 mo
220.061 23.3164 li
@
221.272 14.5103 mo
220.061 14.5103 li
@
221.272 5.66309 mo
220.061 5.66309 li
@
27.3721 .25 mo
27.3721 137.596 li
@
27.3721 129.275 mo
29.7954 129.275 li
@
27.3721 120.469 mo
28.5835 120.469 li
@
27.3721 111.622 mo
28.5835 111.622 li
@
27.3721 102.775 mo
28.5835 102.775 li
@
27.3721 93.9692 mo
28.5835 93.9692 li
@
27.3721 85.1221 mo
29.7954 85.1221 li
@
27.3721 76.3154 mo
28.5835 76.3154 li
@
27.3721 67.4692 mo
28.5835 67.4692 li
@
27.3721 58.6631 mo
28.5835 58.6631 li
@
27.3721 49.8164 mo
28.5835 49.8164 li
@
27.3721 40.9692 mo
29.7954 40.9692 li
@
27.3721 32.1631 mo
28.5835 32.1631 li
@
27.3721 23.3164 mo
28.5835 23.3164 li
@
27.3721 14.5103 mo
28.5835 14.5103 li
@
27.3721 5.66309 mo
28.5835 5.66309 li
@
21.313 134.453 mo
20.5044 134.695 li
19.939 135.583 li
19.6167 136.957 li
19.6167 137.765 li
19.939 139.138 li
20.5044 140.027 li
21.313 140.269 li
21.8774 140.269 li
22.6851 140.027 li
23.2515 139.138 li
23.4956 137.765 li
23.4956 136.957 li
23.2515 135.583 li
22.6851 134.695 li
21.8774 134.453 li
21.313 134.453 li
20.7476 134.695 li
20.5044 135.017 li
20.1821 135.583 li
19.939 136.957 li
19.939 137.765 li
20.1821 139.138 li
20.5044 139.703 li
20.7476 140.027 li
21.313 140.269 li
@
21.8774 140.269 mo
22.4429 140.027 li
22.6851 139.703 li
22.9292 139.138 li
23.2515 137.765 li
23.2515 136.957 li
22.9292 135.583 li
22.6851 135.017 li
22.4429 134.695 li
21.8774 134.453 li
@
14.9292 83.7095 mo
15.4946 83.3872 li
16.3032 82.5796 li
16.3032 88.395 li
@
16.0601 82.9009 mo
16.0601 88.395 li
@
14.9292 88.395 mo
17.4331 88.395 li
@
21.312 82.5796 mo
20.4233 82.9009 li
19.938 83.7095 li
19.6157 85.0835 li
19.6157 85.8911 li
19.938 87.2651 li
20.4233 88.1528 li
21.312 88.395 li
21.8765 88.395 li
22.6841 88.1528 li
23.2505 87.2651 li
23.4946 85.8911 li
23.4946 85.0835 li
23.2505 83.7095 li
22.6841 82.9009 li
21.8765 82.5796 li
21.312 82.5796 li
20.7466 82.9009 li
20.4233 83.145 li
20.1812 83.7095 li
19.938 85.0835 li
19.938 85.8911 li
20.1812 87.2651 li
20.4233 87.8315 li
20.7466 88.1528 li
21.312 88.395 li
@
21.8765 88.395 mo
22.4419 88.1528 li
22.6841 87.8315 li
22.9282 87.2651 li
23.2505 85.8911 li
23.2505 85.0835 li
22.9282 83.7095 li
22.6841 83.145 li
22.4419 82.9009 li
21.8765 82.5796 li
@
14.3652 39.2046 mo
14.6875 39.4468 li
14.3652 39.771 li
14.123 39.4468 li
14.123 39.2046 li
14.3652 38.6411 li
14.6875 38.397 li
15.4961 38.0747 li
16.5469 38.0747 li
17.4346 38.397 li
17.6777 38.6411 li
18 39.2046 li
18 39.771 li
17.6777 40.3374 li
16.8701 40.9028 li
15.4961 41.3872 li
14.9307 41.7114 li
14.3652 42.2769 li
14.123 43.0835 li
14.123 43.8911 li
@
16.5469 38.0747 mo
17.1123 38.397 li
17.4346 38.6411 li
17.6777 39.2046 li
17.6777 39.771 li
17.4346 40.3374 li
16.5469 40.9028 li
15.4961 41.3872 li
@
14.123 43.3247 mo
14.3652 43.0835 li
14.9307 43.0835 li
16.3047 43.6489 li
17.1123 43.6489 li
17.6777 43.3247 li
18 43.0835 li
@
14.9307 43.0835 mo
16.3047 43.8911 li
17.4346 43.8911 li
17.6777 43.6489 li
18 43.0835 li
18 42.519 li
@
21.3135 38.0747 mo
20.4248 38.397 li
19.9395 39.2046 li
19.6172 40.5796 li
19.6172 41.3872 li
19.9395 42.8413 li
20.4248 43.6489 li
21.3135 43.8911 li
21.8779 43.8911 li
22.6855 43.6489 li
23.252 42.8413 li
23.4961 41.3872 li
23.4961 40.5796 li
23.252 39.2046 li
22.6855 38.397 li
21.8779 38.0747 li
21.3135 38.0747 li
20.748 38.397 li
20.4248 38.6411 li
20.1826 39.2046 li
19.9395 40.5796 li
19.9395 41.3872 li
20.1826 42.8413 li
20.4248 43.3247 li
20.748 43.6489 li
21.3135 43.8911 li
@
21.8779 43.8911 mo
22.4434 43.6489 li
22.6855 43.3247 li
22.9297 42.8413 li
23.252 41.3872 li
23.252 40.5796 li
22.9297 39.2046 li
22.6855 38.6411 li
22.4434 38.397 li
21.8779 38.0747 li
@
68.3823 141.686 mo
67.4946 142.01 li
66.9282 142.817 li
66.686 144.189 li
66.686 145.08 li
66.9282 146.454 li
67.4946 147.262 li
68.3823 147.504 li
68.8677 147.504 li
69.7563 147.262 li
70.3218 146.454 li
70.564 145.08 li
70.564 144.189 li
70.3218 142.817 li
69.7563 142.01 li
68.8677 141.686 li
68.3823 141.686 li
67.8179 142.01 li
67.4946 142.252 li
67.2524 142.817 li
66.9282 144.189 li
66.9282 145.08 li
67.2524 146.454 li
67.4946 146.938 li
67.8179 147.262 li
68.3823 147.504 li
@
68.8677 147.504 mo
69.4341 147.262 li
69.7563 146.938 li
69.9985 146.454 li
70.3218 145.08 li
70.3218 144.189 li
69.9985 142.817 li
69.7563 142.252 li
69.4341 142.01 li
68.8677 141.686 li
@
119.908 142.817 mo
120.152 143.14 li
119.908 143.384 li
119.586 143.14 li
119.586 142.817 li
119.908 142.252 li
120.152 142.01 li
120.958 141.686 li
122.09 141.686 li
122.898 142.01 li
123.22 142.252 li
123.464 142.817 li
123.464 143.384 li
123.22 143.947 li
122.412 144.514 li
120.958 145.08 li
120.474 145.322 li
119.908 145.888 li
119.586 146.695 li
119.586 147.504 li
@
122.09 141.686 mo
122.654 142.01 li
122.898 142.252 li
123.22 142.817 li
123.22 143.384 li
122.898 143.947 li
122.09 144.514 li
120.958 145.08 li
@
119.586 146.938 mo
119.908 146.695 li
120.474 146.695 li
121.848 147.262 li
122.654 147.262 li
123.22 146.938 li
123.464 146.695 li
@
120.474 146.695 mo
121.848 147.504 li
122.898 147.504 li
123.22 147.262 li
123.464 146.695 li
123.464 146.13 li
@
126.776 141.686 mo
125.968 142.01 li
125.402 142.817 li
125.16 144.189 li
125.16 145.08 li
125.402 146.454 li
125.968 147.262 li
126.776 147.504 li
127.34 147.504 li
128.23 147.262 li
128.716 146.454 li
129.038 145.08 li
129.038 144.189 li
128.716 142.817 li
128.23 142.01 li
127.34 141.686 li
126.776 141.686 li
126.29 142.01 li
125.968 142.252 li
125.726 142.817 li
125.402 144.189 li
125.402 145.08 li
125.726 146.454 li
125.968 146.938 li
126.29 147.262 li
126.776 147.504 li
@
127.34 147.504 mo
127.906 147.262 li
128.23 146.938 li
128.472 146.454 li
128.716 145.08 li
128.716 144.189 li
128.472 142.817 li
128.23 142.252 li
127.906 142.01 li
127.34 141.686 li
@
176.323 142.251 mo
176.323 147.503 li
@
176.567 141.685 mo
176.567 147.503 li
@
176.567 141.685 mo
173.495 145.887 li
177.94 145.887 li
@
175.436 147.503 mo
177.375 147.503 li
@
181.009 141.685 mo
180.202 142.009 li
179.635 142.816 li
179.314 144.188 li
179.314 145.079 li
179.635 146.453 li
180.202 147.261 li
181.009 147.503 li
181.576 147.503 li
182.383 147.261 li
182.95 146.453 li
183.192 145.079 li
183.192 144.188 li
182.95 142.816 li
182.383 142.009 li
181.576 141.685 li
181.009 141.685 li
180.444 142.009 li
180.202 142.251 li
179.879 142.816 li
179.635 144.188 li
179.635 145.079 li
179.879 146.453 li
180.202 146.937 li
180.444 147.261 li
181.009 147.503 li
@
181.576 147.503 mo
182.142 147.261 li
182.383 146.937 li
182.625 146.453 li
182.95 145.079 li
182.95 144.188 li
182.625 142.816 li
182.383 142.251 li
182.142 142.009 li
181.576 141.685 li
@
27.4521 129.76 mo
27.4521 129.76 li
@
27.5332 129.638 mo
27.5332 129.638 li
@
27.6143 128.83 mo
27.6143 128.83 li
@
27.7354 129.275 mo
27.7354 129.275 li
@
27.8164 128.265 mo
27.8164 128.265 li
@
27.937 129.315 mo
27.937 129.315 li
@
28.0181 129.356 mo
28.0181 129.356 li
@
28.1392 128.911 mo
28.1392 128.911 li
@
28.2202 129.073 mo
28.2202 129.073 li
@
28.3003 128.507 mo
28.3003 128.507 li
@
28.4224 129.679 mo
28.4224 129.679 li
@
28.5034 128.911 mo
28.5034 128.911 li
@
28.624 130.285 mo
28.624 130.285 li
@
28.7051 129.921 mo
28.7051 129.921 li
@
28.8262 129.517 mo
28.8262 129.517 li
@
28.9072 128.588 mo
28.9072 128.588 li
@
28.9873 129.679 mo
28.9873 129.679 li
@
29.1094 130.002 mo
29.1094 130.002 li
@
29.1904 128.79 mo
29.1904 128.79 li
@
29.311 130.083 mo
29.311 130.083 li
@
29.3911 129.558 mo
29.3911 129.558 li
@
29.5132 129.598 mo
29.5132 129.598 li
@
29.5933 128.79 mo
29.5933 128.79 li
@
29.6743 129.315 mo
29.6743 129.315 li
@
29.7954 128.628 mo
29.7954 128.628 li
@
29.8765 128.669 mo
29.8765 128.669 li
@
29.9971 129.113 mo
29.9971 129.113 li
@
30.0781 129.194 mo
30.0781 129.194 li
@
30.1992 129.073 mo
30.1992 129.073 li
@
30.2803 128.911 mo
30.2803 128.911 li
@
30.3613 129.558 mo
30.3613 129.558 li
@
30.4824 129.8 mo
30.4824 129.8 li
@
30.5635 129.033 mo
30.5635 129.033 li
@
30.6841 129.356 mo
30.6841 129.356 li
@
30.7651 130.002 mo
30.7651 130.002 li
@
30.8862 129.477 mo
30.8862 129.477 li
@
30.9673 129.073 mo
30.9673 129.073 li
@
31.0884 129.235 mo
31.0884 129.235 li
@
31.1694 129.194 mo
31.1694 129.194 li
@
31.2505 130.042 mo
31.2505 130.042 li
@
31.3711 129.477 mo
31.3711 129.477 li
@
31.4521 129.881 mo
31.4521 129.881 li
@
31.5732 128.911 mo
31.5732 128.911 li
@
31.6543 129.033 mo
31.6543 129.033 li
@
31.7754 129.598 mo
31.7754 129.598 li
@
31.8564 129.194 mo
31.8564 129.194 li
@
31.936 129.275 mo
31.936 129.275 li
@
32.0571 129.275 mo
32.0571 129.275 li
@
32.1382 129.598 mo
32.1382 129.598 li
@
32.2593 129.558 mo
32.2593 129.558 li
@
32.3403 129.235 mo
32.3403 129.235 li
@
32.4614 129.033 mo
32.4614 129.033 li
@
32.5425 129.235 mo
32.5425 129.235 li
@
32.623 130.002 mo
32.623 130.002 li
@
32.7441 129.477 mo
32.7441 129.477 li
@
32.8252 130.083 mo
32.8252 130.083 li
@
32.9463 129.356 mo
32.9463 129.356 li
@
33.0273 129.154 mo
33.0273 129.154 li
@
33.1484 129.477 mo
33.1484 129.477 li
@
33.229 129.033 mo
33.229 129.033 li
@
33.3101 128.265 mo
33.3101 128.265 li
@
33.4312 129.033 mo
33.4312 129.033 li
@
33.5122 129.679 mo
33.5122 129.679 li
@
33.6333 128.79 mo
33.6333 128.79 li
@
33.7144 128.628 mo
33.7144 128.628 li
@
33.8354 129.598 mo
33.8354 129.598 li
@
33.916 128.992 mo
33.916 128.992 li
@
33.9971 129.356 mo
33.9971 129.356 li
@
34.1182 129.073 mo
34.1182 129.073 li
@
34.1982 129.315 mo
34.1982 129.315 li
@
34.3203 128.669 mo
34.3203 128.669 li
@
34.4004 129.76 mo
34.4004 129.76 li
@
34.5225 128.507 mo
34.5225 128.507 li
@
34.6021 128.386 mo
34.6021 128.386 li
@
34.6831 129.275 mo
34.6831 129.275 li
@
34.8042 130.083 mo
34.8042 130.083 li
@
34.8853 128.346 mo
34.8853 128.346 li
@
35.0063 129.033 mo
35.0063 129.033 li
@
35.0874 130.244 mo
35.0874 130.244 li
@
35.2085 128.992 mo
35.2085 128.992 li
@
35.2891 129.275 mo
35.2891 129.275 li
@
35.4102 129.194 mo
35.4102 129.194 li
@
35.4912 128.83 mo
35.4912 128.83 li
@
35.5723 128.952 mo
35.5723 128.952 li
@
35.6934 129.275 mo
35.6934 129.275 li
@
35.7744 128.79 mo
35.7744 128.79 li
@
35.895 129.558 mo
35.895 129.558 li
@
35.9761 129.154 mo
35.9761 129.154 li
@
36.0972 129.235 mo
36.0972 129.235 li
@
36.1782 129.719 mo
36.1782 129.719 li
@
36.2593 129.315 mo
36.2593 129.315 li
@
36.3804 129.517 mo
36.3804 129.517 li
@
36.4614 129.598 mo
36.4614 129.598 li
@
36.582 129.356 mo
36.582 129.356 li
@
36.6631 129.235 mo
36.6631 129.235 li
@
36.7842 129.517 mo
36.7842 129.517 li
@
36.8643 129.154 mo
36.8643 129.154 li
@
36.9453 129.638 mo
36.9453 129.638 li
@
37.0664 129.315 mo
37.0664 129.315 li
@
37.1475 129.033 mo
37.1475 129.033 li
@
37.2681 128.911 mo
37.2681 128.911 li
@
37.3491 128.952 mo
37.3491 128.952 li
@
37.4702 129.881 mo
37.4702 129.881 li
@
37.5513 128.507 mo
37.5513 128.507 li
@
37.6323 129.315 mo
37.6323 129.315 li
@
37.7534 129.275 mo
37.7534 129.275 li
@
37.8345 130.123 mo
37.8345 130.123 li
@
37.9551 129.437 mo
37.9551 129.437 li
@
38.0361 129.8 mo
38.0361 129.8 li
@
38.1572 128.709 mo
38.1572 128.709 li
@
38.2383 129.194 mo
38.2383 129.194 li
@
38.3193 129.396 mo
38.3193 129.396 li
@
38.4404 129.437 mo
38.4404 129.437 li
@
38.521 128.467 mo
38.521 128.467 li
@
38.6421 130.406 mo
38.6421 130.406 li
@
38.7231 129.8 mo
38.7231 129.8 li
@
38.8442 128.79 mo
38.8442 128.79 li
@
38.9253 129.517 mo
38.9253 129.517 li
@
39.0464 129.315 mo
39.0464 129.315 li
@
39.1274 129.638 mo
39.1274 129.638 li
@
39.207 129.437 mo
39.207 129.437 li
@
39.3291 129.517 mo
39.3291 129.517 li
@
39.4092 129.315 mo
39.4092 129.315 li
@
39.5313 129.033 mo
39.5313 129.033 li
@
39.6113 129.113 mo
39.6113 129.113 li
@
39.7334 129.8 mo
39.7334 129.8 li
@
39.8135 128.346 mo
39.8135 128.346 li
@
39.894 129.396 mo
39.894 129.396 li
@
40.0151 129.638 mo
40.0151 129.638 li
@
40.0962 129.962 mo
40.0962 129.962 li
@
40.2183 130.083 mo
40.2183 130.083 li
@
40.2983 128.709 mo
40.2983 128.709 li
@
40.4204 129.235 mo
40.4204 129.235 li
@
40.5005 129.396 mo
40.5005 129.396 li
@
40.5811 129.598 mo
40.5811 129.598 li
@
40.7021 129.033 mo
40.7021 129.033 li
@
40.7832 129.315 mo
40.7832 129.315 li
@
40.9043 129.033 mo
40.9043 129.033 li
@
40.9854 128.83 mo
40.9854 128.83 li
@
41.1064 129.437 mo
41.1064 129.437 li
@
41.187 128.628 mo
41.187 128.628 li
@
41.2681 129.396 mo
41.2681 129.396 li
@
41.3892 129.315 mo
41.3892 129.315 li
@
41.4702 129.073 mo
41.4702 129.073 li
@
41.5913 129.679 mo
41.5913 129.679 li
@
41.6724 128.83 mo
41.6724 128.83 li
@
41.7935 129.194 mo
41.7935 129.194 li
@
41.873 129.113 mo
41.873 129.113 li
@
41.9541 129.558 mo
41.9541 129.558 li
@
42.0762 129.437 mo
42.0762 129.437 li
@
42.1563 129.76 mo
42.1563 129.76 li
@
42.2783 128.79 mo
42.2783 128.79 li
@
42.3584 130.042 mo
42.3584 130.042 li
@
42.4805 129.315 mo
42.4805 129.315 li
@
42.561 129.396 mo
42.561 129.396 li
@
42.6411 128.628 mo
42.6411 128.628 li
@
42.7632 129.921 mo
42.7632 129.921 li
@
42.8433 128.871 mo
42.8433 128.871 li
@
42.9644 129.356 mo
42.9644 129.356 li
@
43.0454 129.477 mo
43.0454 129.477 li
@
43.166 129.113 mo
43.166 129.113 li
@
43.2471 128.911 mo
43.2471 128.911 li
@
43.3682 128.952 mo
43.3682 128.952 li
@
43.4492 129.356 mo
43.4492 129.356 li
@
43.5303 129.598 mo
43.5303 129.598 li
@
43.6514 128.75 mo
43.6514 128.75 li
@
43.7324 129.154 mo
43.7324 129.154 li
@
43.853 129.154 mo
43.853 129.154 li
@
43.9341 129.194 mo
43.9341 129.194 li
@
44.0552 128.75 mo
44.0552 128.75 li
@
44.1362 129.881 mo
44.1362 129.881 li
@
44.2163 129.275 mo
44.2163 129.275 li
@
44.3384 128.669 mo
44.3384 128.669 li
@
44.4194 128.992 mo
44.4194 128.992 li
@
44.54 128.386 mo
44.54 128.386 li
@
44.6211 129.679 mo
44.6211 129.679 li
@
44.7422 129.396 mo
44.7422 129.396 li
@
44.8232 129.517 mo
44.8232 129.517 li
@
44.9043 129.84 mo
44.9043 129.84 li
@
45.0254 129.194 mo
45.0254 129.194 li
@
45.1064 129.598 mo
45.1064 129.598 li
@
45.2271 128.386 mo
45.2271 128.386 li
@
45.3071 129.437 mo
45.3071 129.437 li
@
45.4292 129.598 mo
45.4292 129.598 li
@
45.5093 129.598 mo
45.5093 129.598 li
@
45.5903 129.194 mo
45.5903 129.194 li
@
45.7114 129.517 mo
45.7114 129.517 li
@
45.7925 129.194 mo
45.7925 129.194 li
@
45.9131 129.558 mo
45.9131 129.558 li
@
45.9941 129.679 mo
45.9941 129.679 li
@
46.1152 129.113 mo
46.1152 129.113 li
@
46.1963 129.76 mo
46.1963 129.76 li
@
46.2773 129.638 mo
46.2773 129.638 li
@
46.3984 129.073 mo
46.3984 129.073 li
@
46.479 129.719 mo
46.479 129.719 li
@
46.6001 129.719 mo
46.6001 129.719 li
@
46.6812 129.477 mo
46.6812 129.477 li
@
46.8022 129.356 mo
46.8022 129.356 li
@
46.8833 129.275 mo
46.8833 129.275 li
@
46.9644 128.75 mo
46.9644 128.75 li
@
47.0854 130.244 mo
47.0854 130.244 li
@
47.166 129.315 mo
47.166 129.315 li
@
47.2871 129.356 mo
47.2871 129.356 li
@
47.3682 128.628 mo
47.3682 128.628 li
@
47.4893 128.548 mo
47.4893 128.548 li
@
47.5703 129.235 mo
47.5703 129.235 li
@
47.6914 129.719 mo
47.6914 129.719 li
@
47.7725 129.8 mo
47.7725 129.8 li
@
47.8521 129.437 mo
47.8521 129.437 li
@
47.9731 129.275 mo
47.9731 129.275 li
@
48.0542 129.033 mo
48.0542 129.033 li
@
48.1753 129.719 mo
48.1753 129.719 li
@
48.2563 129.154 mo
48.2563 129.154 li
@
48.3774 130.325 mo
48.3774 130.325 li
@
48.4585 129.881 mo
48.4585 129.881 li
@
48.5391 129.356 mo
48.5391 129.356 li
@
48.6602 129.558 mo
48.6602 129.558 li
@
48.7412 129.113 mo
48.7412 129.113 li
@
48.8623 129.194 mo
48.8623 129.194 li
@
48.9434 128.386 mo
48.9434 128.386 li
@
49.0645 130.083 mo
49.0645 130.083 li
@
49.145 129.8 mo
49.145 129.8 li
@
49.2261 129.194 mo
49.2261 129.194 li
@
49.3472 129.881 mo
49.3472 129.881 li
@
49.4282 129.437 mo
49.4282 129.437 li
@
49.5493 129.073 mo
49.5493 129.073 li
@
49.6304 129.194 mo
49.6304 129.194 li
@
49.7515 129.437 mo
49.7515 129.437 li
@
49.832 130.042 mo
49.832 130.042 li
@
49.9131 130.042 mo
49.9131 130.042 li
@
50.0342 129.154 mo
50.0342 129.154 li
@
50.1143 129.113 mo
50.1143 129.113 li
@
50.2363 129.437 mo
50.2363 129.437 li
@
50.3164 128.992 mo
50.3164 128.992 li
@
50.4385 128.063 mo
50.4385 128.063 li
@
50.5181 128.507 mo
50.5181 128.507 li
@
50.5991 129.396 mo
50.5991 129.396 li
@
50.7202 130.123 mo
50.7202 130.123 li
@
50.8013 129.517 mo
50.8013 129.517 li
@
50.9224 129.073 mo
50.9224 129.073 li
@
51.0034 129.76 mo
51.0034 129.76 li
@
51.124 128.992 mo
51.124 128.992 li
@
51.2051 128.224 mo
51.2051 128.224 li
@
51.3262 129.719 mo
51.3262 129.719 li
@
51.4072 128.952 mo
51.4072 128.952 li
@
51.4883 129.315 mo
51.4883 129.315 li
@
51.6094 129.356 mo
51.6094 129.356 li
@
51.6904 128.669 mo
51.6904 128.669 li
@
51.811 129.033 mo
51.811 129.033 li
@
51.8921 129.517 mo
51.8921 129.517 li
@
52.0132 128.83 mo
52.0132 128.83 li
@
52.0942 129.437 mo
52.0942 129.437 li
@
52.1753 128.911 mo
52.1753 128.911 li
@
52.2964 129.558 mo
52.2964 129.558 li
@
52.3774 129.194 mo
52.3774 129.194 li
@
52.498 128.709 mo
52.498 128.709 li
@
52.5791 128.992 mo
52.5791 128.992 li
@
52.7002 128.83 mo
52.7002 128.83 li
@
52.7813 128.709 mo
52.7813 128.709 li
@
52.8613 129.275 mo
52.8613 129.275 li
@
52.9824 128.709 mo
52.9824 128.709 li
@
53.0635 129.396 mo
53.0635 129.396 li
@
53.1841 129.073 mo
53.1841 129.073 li
@
53.2651 128.911 mo
53.2651 128.911 li
@
53.3862 129.477 mo
53.3862 129.477 li
@
53.4673 129.437 mo
53.4673 129.437 li
@
53.5483 129.154 mo
53.5483 129.154 li
@
53.6694 129.194 mo
53.6694 129.194 li
@
53.7505 128.588 mo
53.7505 128.588 li
@
53.8711 129.638 mo
53.8711 129.638 li
@
53.9521 129.396 mo
53.9521 129.396 li
@
54.0732 129.396 mo
54.0732 129.396 li
@
54.1543 128.588 mo
54.1543 128.588 li
@
54.2354 129.719 mo
54.2354 129.719 li
@
54.3564 129.437 mo
54.3564 129.437 li
@
54.437 128.911 mo
54.437 128.911 li
@
54.5581 129.073 mo
54.5581 129.073 li
@
54.6392 129.517 mo
54.6392 129.517 li
@
54.7603 128.709 mo
54.7603 128.709 li
@
54.8413 128.79 mo
54.8413 128.79 li
@
54.9224 128.871 mo
54.9224 128.871 li
@
55.0435 129.154 mo
55.0435 129.154 li
@
55.123 129.517 mo
55.123 129.517 li
@
55.2451 129.275 mo
55.2451 129.275 li
@
55.3252 129.356 mo
55.3252 129.356 li
@
55.4473 129.558 mo
55.4473 129.558 li
@
55.5273 129.235 mo
55.5273 129.235 li
@
55.6494 128.952 mo
55.6494 128.952 li
@
55.729 128.507 mo
55.729 128.507 li
@
55.8101 130.446 mo
55.8101 130.446 li
@
55.9321 129.477 mo
55.9321 129.477 li
@
56.0122 129.76 mo
56.0122 129.76 li
@
56.1343 129.113 mo
56.1343 129.113 li
@
56.2144 129.235 mo
56.2144 129.235 li
@
56.3364 130.002 mo
56.3364 130.002 li
@
56.416 129.154 mo
56.416 129.154 li
@
56.4971 129.315 mo
56.4971 129.315 li
@
56.6182 129.154 mo
56.6182 129.154 li
@
56.6992 130.285 mo
56.6992 130.285 li
@
56.8203 129.638 mo
56.8203 129.638 li
@
56.9014 128.871 mo
56.9014 128.871 li
@
57.0225 128.871 mo
57.0225 128.871 li
@
57.103 130.123 mo
57.103 130.123 li
@
57.1841 129.235 mo
57.1841 129.235 li
@
57.3052 129.396 mo
57.3052 129.396 li
@
57.3862 129.76 mo
57.3862 129.76 li
@
57.5073 129.477 mo
57.5073 129.477 li
@
57.5884 128.952 mo
57.5884 128.952 li
@
57.7095 129.154 mo
57.7095 129.154 li
@
57.79 129.396 mo
57.79 129.396 li
@
57.8701 129.477 mo
57.8701 129.477 li
@
57.9922 129.437 mo
57.9922 129.437 li
@
58.0723 129.962 mo
58.0723 129.962 li
@
58.1943 128.628 mo
58.1943 128.628 li
@
58.2754 129.962 mo
58.2754 129.962 li
@
58.396 128.386 mo
58.396 128.386 li
@
58.4771 129.194 mo
58.4771 129.194 li
@
58.5571 130.204 mo
58.5571 130.204 li
@
58.6792 128.911 mo
58.6792 128.911 li
@
58.7593 128.305 mo
58.7593 128.305 li
@
58.8813 129.194 mo
58.8813 129.194 li
@
58.9614 129.881 mo
58.9614 129.881 li
@
59.082 129.679 mo
59.082 129.679 li
@
59.1631 128.386 mo
59.1631 128.386 li
@
59.2441 129.356 mo
59.2441 129.356 li
@
59.3652 129.194 mo
59.3652 129.194 li
@
59.4463 128.79 mo
59.4463 128.79 li
@
59.5674 128.75 mo
59.5674 128.75 li
@
59.6484 129.315 mo
59.6484 129.315 li
@
59.769 128.063 mo
59.769 128.063 li
@
59.8501 129.962 mo
59.8501 129.962 li
@
59.9712 129.477 mo
59.9712 129.477 li
@
60.0522 129.719 mo
60.0522 129.719 li
@
60.1333 128.83 mo
60.1333 128.83 li
@
60.2544 130.285 mo
60.2544 130.285 li
@
60.3354 130.446 mo
60.3354 130.446 li
@
60.4561 128.426 mo
60.4561 128.426 li
@
60.5371 129.356 mo
60.5371 129.356 li
@
60.6582 129.315 mo
60.6582 129.315 li
@
60.7393 129.477 mo
60.7393 129.477 li
@
60.8203 129.477 mo
60.8203 129.477 li
@
60.9414 128.952 mo
60.9414 128.952 li
@
61.0225 129.8 mo
61.0225 129.8 li
@
61.1431 128.628 mo
61.1431 128.628 li
@
61.2231 128.83 mo
61.2231 128.83 li
@
61.3452 129.719 mo
61.3452 129.719 li
@
61.4253 129.073 mo
61.4253 129.073 li
@
61.5063 129.638 mo
61.5063 129.638 li
@
61.6274 129.235 mo
61.6274 129.235 li
@
61.7085 130.083 mo
61.7085 130.083 li
@
61.8291 128.548 mo
61.8291 128.548 li
@
61.9102 128.871 mo
61.9102 128.871 li
@
62.0313 129.194 mo
62.0313 129.194 li
@
62.1123 130.244 mo
62.1123 130.244 li
@
62.1934 130.123 mo
62.1934 130.123 li
@
62.3145 128.992 mo
62.3145 128.992 li
@
62.395 129.194 mo
62.395 129.194 li
@
62.5161 128.669 mo
62.5161 128.669 li
@
62.5972 127.457 mo
62.5972 127.457 li
@
62.7183 127.336 mo
62.7183 127.336 li
@
62.7993 126.003 mo
62.7993 126.003 li
@
62.8804 126.164 mo
62.8804 126.164 li
@
63.0015 126.326 mo
63.0015 126.326 li
@
63.082 125.599 mo
63.082 125.599 li
@
63.2031 126.851 mo
63.2031 126.851 li
@
63.2842 125.437 mo
63.2842 125.437 li
@
63.4053 125.033 mo
63.4053 125.033 li
@
63.4863 123.781 mo
63.4863 123.781 li
@
63.6074 123.215 mo
63.6074 123.215 li
@
63.6885 120.307 mo
63.6885 120.307 li
@
63.7681 117.398 mo
63.7681 117.398 li
@
63.8901 112.591 mo
63.8901 112.591 li
@
63.9702 109.238 mo
63.9702 109.238 li
@
64.0913 103.906 mo
64.0913 103.906 li
@
64.1724 98.856 mo
64.1724 98.856 li
@
64.2935 93.2822 mo
64.2935 93.2822 li
@
64.374 87.4243 mo
64.374 87.4243 li
@
64.4551 82.4961 mo
64.4551 82.4961 li
@
64.5762 78.2554 mo
64.5762 78.2554 li
@
64.6572 75.5483 mo
64.6572 75.5483 li
@
64.7783 75.3062 mo
64.7783 75.3062 li
@
64.8594 78.0532 mo
64.8594 78.0532 li
@
64.9805 78.2949 mo
64.9805 78.2949 li
@
65.061 79.2651 mo
65.061 79.2651 li
@
65.1421 81.1631 mo
65.1421 81.1631 li
@
65.2632 81.9312 mo
65.2632 81.9312 li
@
65.3442 83.2642 mo
65.3442 83.2642 li
@
65.4653 83.4253 mo
65.4653 83.4253 li
@
65.5464 83.9512 mo
65.5464 83.9512 li
@
65.6675 86.334 mo
65.6675 86.334 li
@
65.748 88.4751 mo
65.748 88.4751 li
@
65.8291 90.1714 mo
65.8291 90.1714 li
@
65.9502 90.6162 mo
65.9502 90.6162 li
@
66.0313 92.7163 mo
66.0313 92.7163 li
@
66.1523 93.9692 mo
66.1523 93.9692 li
@
66.2324 96.4331 mo
66.2324 96.4331 li
@
66.354 97.1602 mo
66.354 97.1602 li
@
66.4341 99.4224 mo
66.4341 99.4224 li
@
66.5151 101.846 mo
66.5151 101.846 li
@
66.6362 102.129 mo
66.6362 102.129 li
@
66.7173 102.977 mo
66.7173 102.977 li
@
66.8384 103.785 mo
66.8384 103.785 li
@
66.9194 105.037 mo
66.9194 105.037 li
@
67.04 107.138 mo
67.04 107.138 li
@
67.1211 107.744 mo
67.1211 107.744 li
@
67.2021 109.4 mo
67.2021 109.4 li
@
67.3232 109.885 mo
67.3232 109.885 li
@
67.4043 110.288 mo
67.4043 110.288 li
@
67.5254 110.046 mo
67.5254 110.046 li
@
67.6064 111.016 mo
67.6064 111.016 li
@
67.7271 112.349 mo
67.7271 112.349 li
@
67.8081 112.308 mo
67.8081 112.308 li
@
67.9292 111.783 mo
67.9292 111.783 li
@
68.0103 112.268 mo
68.0103 112.268 li
@
68.0913 111.501 mo
68.0913 111.501 li
@
68.2124 112.026 mo
68.2124 112.026 li
@
68.2935 110.127 mo
68.2935 110.127 li
@
68.4141 110.612 mo
68.4141 110.612 li
@
68.4951 108.794 mo
68.4951 108.794 li
@
68.6162 106.492 mo
68.6162 106.492 li
@
68.6973 105.522 mo
68.6973 105.522 li
@
68.7773 104.391 mo
68.7773 104.391 li
@
68.8984 103.744 mo
68.8984 103.744 li
@
68.979 104.472 mo
68.979 104.472 li
@
69.1001 104.149 mo
69.1001 104.149 li
@
69.1812 104.068 mo
69.1812 104.068 li
@
69.3032 104.633 mo
69.3032 104.633 li
@
69.3833 105.078 mo
69.3833 105.078 li
@
69.4644 104.431 mo
69.4644 104.431 li
@
69.5854 101.886 mo
69.5854 101.886 li
@
69.666 100.351 mo
69.666 100.351 li
@
69.7871 99.3013 mo
69.7871 99.3013 li
@
69.8682 97.7661 mo
69.8682 97.7661 li
@
69.9902 96.7563 mo
69.9902 96.7563 li
@
70.0703 96.7153 mo
70.0703 96.7153 li
@
70.1514 94.7773 mo
70.1514 94.7773 li
@
70.2725 93.605 mo
70.2725 93.605 li
@
70.353 93.8882 mo
70.353 93.8882 li
@
70.4741 93.2422 mo
70.4741 93.2422 li
@
70.5552 92.4341 mo
70.5552 92.4341 li
@
70.6763 91.9492 mo
70.6763 91.9492 li
@
70.7573 92.8779 mo
70.7573 92.8779 li
@
70.8384 92.1914 mo
70.8384 92.1914 li
@
70.9595 94.0903 mo
70.9595 94.0903 li
@
71.04 94.5342 mo
71.04 94.5342 li
@
71.1611 97.0391 mo
71.1611 97.0391 li
@
71.2412 96.6353 mo
71.2412 96.6353 li
@
71.3633 97.8872 mo
71.3633 97.8872 li
@
71.4434 98.3311 mo
71.4434 98.3311 li
@
71.5654 97.9683 mo
71.5654 97.9683 li
@
71.646 97.6851 mo
71.646 97.6851 li
@
71.7261 96.4331 mo
71.7261 96.4331 li
@
71.8481 96.958 mo
71.8481 96.958 li
@
71.9282 97.1201 mo
71.9282 97.1201 li
@
72.0503 97.3223 mo
72.0503 97.3223 li
@
72.1304 98.3721 mo
72.1304 98.3721 li
@
72.2524 98.856 mo
72.2524 98.856 li
@
72.332 99.5029 mo
72.332 99.5029 li
@
72.4131 99.0181 mo
72.4131 99.0181 li
@
72.5342 101.24 mo
72.5342 101.24 li
@
72.6152 102.25 mo
72.6152 102.25 li
@
72.7363 101.765 mo
72.7363 101.765 li
@
72.8174 102.129 mo
72.8174 102.129 li
@
72.9385 100.553 mo
72.9385 100.553 li
@
73.019 99.7451 mo
73.019 99.7451 li
@
73.1001 99.3823 mo
73.1001 99.3823 li
@
73.2212 98.4121 mo
73.2212 98.4121 li
@
73.3022 98.5742 mo
73.3022 98.5742 li
@
73.4233 98.4121 mo
73.4233 98.4121 li
@
73.5044 99.1392 mo
73.5044 99.1392 li
@
73.6255 99.7051 mo
73.6255 99.7051 li
@
73.7061 99.1802 mo
73.7061 99.1802 li
@
73.7861 99.4224 mo
73.7861 99.4224 li
@
73.9082 98.21 mo
73.9082 98.21 li
@
73.9893 98.21 mo
73.9893 98.21 li
@
74.1104 98.1304 mo
74.1104 98.1304 li
@
74.1914 98.8164 mo
74.1914 98.8164 li
@
74.312 99.2612 mo
74.312 99.2612 li
@
74.3931 99.8672 mo
74.3931 99.8672 li
@
74.4731 99.2202 mo
74.4731 99.2202 li
@
74.5952 100.634 mo
74.5952 100.634 li
@
74.6753 101.159 mo
74.6753 101.159 li
@
74.7974 100.069 mo
74.7974 100.069 li
@
74.8774 99.8262 mo
74.8774 99.8262 li
@
74.998 98.1699 mo
74.998 98.1699 li
@
75.0791 99.624 mo
75.0791 99.624 li
@
75.1602 98.3311 mo
75.1602 98.3311 li
@
75.2813 98.5742 mo
75.2813 98.5742 li
@
75.3623 100.109 mo
75.3623 100.109 li
@
75.4834 99.0181 mo
75.4834 99.0181 li
@
75.5645 98.6553 mo
75.5645 98.6553 li
@
75.6851 95.2212 mo
75.6851 95.2212 li
@
75.7661 93.605 mo
75.7661 93.605 li
@
75.8872 92.1914 mo
75.8872 92.1914 li
@
75.9683 90.5762 mo
75.9683 90.5762 li
@
76.0493 90.0503 mo
76.0493 90.0503 li
@
76.1704 90.2119 mo
76.1704 90.2119 li
@
76.2515 88.96 mo
76.2515 88.96 li
@
76.3721 89.2422 mo
76.3721 89.2422 li
@
76.4531 87.4243 mo
76.4531 87.4243 li
@
76.5742 86.8994 mo
76.5742 86.8994 li
@
76.6553 88.7983 mo
76.6553 88.7983 li
@
76.7363 90.0913 mo
76.7363 90.0913 li
@
76.8574 90.8184 mo
76.8574 90.8184 li
@
76.9385 91.7871 mo
76.9385 91.7871 li
@
77.0591 94.4941 mo
77.0591 94.4941 li
@
77.1401 96.5142 mo
77.1401 96.5142 li
@
77.2612 98.5332 mo
77.2612 98.5332 li
@
77.3413 100.069 mo
77.3413 100.069 li
@
77.4224 100.472 mo
77.4224 100.472 li
@
77.5435 100.472 mo
77.5435 100.472 li
@
77.624 100.957 mo
77.624 100.957 li
@
77.7451 99.3013 mo
77.7451 99.3013 li
@
77.8262 100.109 mo
77.8262 100.109 li
@
77.9473 98.856 mo
77.9473 98.856 li
@
78.0283 99.3413 mo
78.0283 99.3413 li
@
78.1094 101.563 mo
78.1094 101.563 li
@
78.2305 101.644 mo
78.2305 101.644 li
@
78.311 100.674 mo
78.311 100.674 li
@
78.4321 100.634 mo
78.4321 100.634 li
@
78.5132 101.199 mo
78.5132 101.199 li
@
78.6343 101.967 mo
78.6343 101.967 li
@
78.7153 102.492 mo
78.7153 102.492 li
@
78.7964 102.048 mo
78.7964 102.048 li
@
78.9175 101.886 mo
78.9175 101.886 li
@
78.998 102.775 mo
78.998 102.775 li
@
79.1191 103.179 mo
79.1191 103.179 li
@
79.2002 103.34 mo
79.2002 103.34 li
@
79.3213 106.37 mo
79.3213 106.37 li
@
79.4023 107.097 mo
79.4023 107.097 li
@
79.4824 107.057 mo
79.4824 107.057 li
@
79.604 108.026 mo
79.604 108.026 li
@
79.6841 108.956 mo
79.6841 108.956 li
@
79.8062 108.754 mo
79.8062 108.754 li
@
79.8862 108.996 mo
79.8862 108.996 li
@
80.0073 109.36 mo
80.0073 109.36 li
@
80.0884 109.077 mo
80.0884 109.077 li
@
80.2095 109.925 mo
80.2095 109.925 li
@
80.29 109.804 mo
80.29 109.804 li
@
80.3711 109.238 mo
80.3711 109.238 li
@
80.4922 109.36 mo
80.4922 109.36 li
@
80.5732 111.097 mo
80.5732 111.097 li
@
80.6943 111.097 mo
80.6943 111.097 li
@
80.7754 110.167 mo
80.7754 110.167 li
@
80.896 109.4 mo
80.896 109.4 li
@
80.9771 111.056 mo
80.9771 111.056 li
@
81.0581 110.369 mo
81.0581 110.369 li
@
81.1792 109.198 mo
81.1792 109.198 li
@
81.2603 111.016 mo
81.2603 111.016 li
@
81.3813 109.885 mo
81.3813 109.885 li
@
81.4624 113.359 mo
81.4624 113.359 li
@
81.5835 111.541 mo
81.5835 111.541 li
@
81.6641 112.066 mo
81.6641 112.066 li
@
81.7451 110.329 mo
81.7451 110.329 li
@
81.8662 109.117 mo
81.8662 109.117 li
@
81.9473 109.319 mo
81.9473 109.319 li
@
82.0684 109.198 mo
82.0684 109.198 li
@
82.1484 108.713 mo
82.1484 108.713 li
@
82.27 108.956 mo
82.27 108.956 li
@
82.3501 108.996 mo
82.3501 108.996 li
@
82.4312 108.39 mo
82.4312 108.39 li
@
82.5522 109.602 mo
82.5522 109.602 li
@
82.6333 107.582 mo
82.6333 107.582 li
@
82.7544 110.652 mo
82.7544 110.652 li
@
82.8354 111.622 mo
82.8354 111.622 li
@
82.9561 111.864 mo
82.9561 111.864 li
@
83.0371 111.703 mo
83.0371 111.703 li
@
83.1182 113.561 mo
83.1182 113.561 li
@
83.2393 113.722 mo
83.2393 113.722 li
@
83.3203 111.339 mo
83.3203 111.339 li
@
83.4414 112.551 mo
83.4414 112.551 li
@
83.5225 112.187 mo
83.5225 112.187 li
@
83.6431 112.753 mo
83.6431 112.753 li
@
83.7241 114.167 mo
83.7241 114.167 li
@
83.8452 114.409 mo
83.8452 114.409 li
@
83.9263 114.772 mo
83.9263 114.772 li
@
84.0073 115.864 mo
84.0073 115.864 li
@
84.1284 115.783 mo
84.1284 115.783 li
@
84.2095 115.54 mo
84.2095 115.54 li
@
84.3301 116.025 mo
84.3301 116.025 li
@
84.4111 114.571 mo
84.4111 114.571 li
@
84.5322 115.5 mo
84.5322 115.5 li
@
84.6133 114.934 mo
84.6133 114.934 li
@
84.6934 115.015 mo
84.6934 115.015 li
@
84.8145 114.571 mo
84.8145 114.571 li
@
84.895 115.217 mo
84.895 115.217 li
@
85.0161 116.146 mo
85.0161 116.146 li
@
85.0972 117.277 mo
85.0972 117.277 li
@
85.2192 116.429 mo
85.2192 116.429 li
@
85.2993 115.742 mo
85.2993 115.742 li
@
85.3804 116.267 mo
85.3804 116.267 li
@
85.5015 116.792 mo
85.5015 116.792 li
@
85.582 115.864 mo
85.582 115.864 li
@
85.7041 116.51 mo
85.7041 116.51 li
@
85.7842 117.035 mo
85.7842 117.035 li
@
85.9063 116.106 mo
85.9063 116.106 li
@
85.9863 115.5 mo
85.9863 115.5 li
@
86.0674 116.994 mo
86.0674 116.994 li
@
86.1885 117.479 mo
86.1885 117.479 li
@
86.269 117.56 mo
86.269 117.56 li
@
86.3901 117.479 mo
86.3901 117.479 li
@
86.4712 118.408 mo
86.4712 118.408 li
@
86.5923 117.6 mo
86.5923 117.6 li
@
86.6733 118.005 mo
86.6733 118.005 li
@
86.7544 118.893 mo
86.7544 118.893 li
@
86.8755 118.893 mo
86.8755 118.893 li
@
86.9561 118.57 mo
86.9561 118.57 li
@
87.0771 117.156 mo
87.0771 117.156 li
@
87.1572 115.823 mo
87.1572 115.823 li
@
87.2793 117.762 mo
87.2793 117.762 li
@
87.3594 117.196 mo
87.3594 117.196 li
@
87.4404 120.63 mo
87.4404 120.63 li
@
87.562 120.186 mo
87.562 120.186 li
@
87.6421 120.994 mo
87.6421 120.994 li
@
87.7642 121.438 mo
87.7642 121.438 li
@
87.8442 121.64 mo
87.8442 121.64 li
@
87.9663 122.004 mo
87.9663 122.004 li
@
88.0474 121.963 mo
88.0474 121.963 li
@
88.1685 121.276 mo
88.1685 121.276 li
@
88.248 120.145 mo
88.248 120.145 li
@
88.3291 121.074 mo
88.3291 121.074 li
@
88.4502 120.186 mo
88.4502 120.186 li
@
88.5313 119.418 mo
88.5313 119.418 li
@
88.6523 120.59 mo
88.6523 120.59 li
@
88.7334 120.671 mo
88.7334 120.671 li
@
88.854 120.913 mo
88.854 120.913 li
@
88.9351 121.882 mo
88.9351 121.882 li
@
89.0161 122.488 mo
89.0161 122.488 li
@
89.1372 121.519 mo
89.1372 121.519 li
@
89.2183 121.963 mo
89.2183 121.963 li
@
89.3394 122.327 mo
89.3394 122.327 li
@
89.4204 122.004 mo
89.4204 122.004 li
@
89.541 122.933 mo
89.541 122.933 li
@
89.6221 122.892 mo
89.6221 122.892 li
@
89.7031 122.892 mo
89.7031 122.892 li
@
89.8242 121.196 mo
89.8242 121.196 li
@
89.9053 120.751 mo
89.9053 120.751 li
@
90.0264 121.761 mo
90.0264 121.761 li
@
90.1074 121.559 mo
90.1074 121.559 li
@
90.228 122.004 mo
90.228 122.004 li
@
90.3091 122.61 mo
90.3091 122.61 li
@
90.3901 120.913 mo
90.3901 120.913 li
@
90.5112 120.509 mo
90.5112 120.509 li
@
90.5913 120.428 mo
90.5913 120.428 li
@
90.7134 121.721 mo
90.7134 121.721 li
@
90.7935 121.276 mo
90.7935 121.276 li
@
90.9141 123.337 mo
90.9141 123.337 li
@
90.9951 121.357 mo
90.9951 121.357 li
@
91.0762 121.478 mo
91.0762 121.478 li
@
91.1973 121.599 mo
91.1973 121.599 li
@
91.2783 122.286 mo
91.2783 122.286 li
@
91.3994 122.004 mo
91.3994 122.004 li
@
91.4805 120.509 mo
91.4805 120.509 li
@
91.6011 119.741 mo
91.6011 119.741 li
@
91.6821 119.378 mo
91.6821 119.378 li
@
91.7632 119.863 mo
91.7632 119.863 li
@
91.8843 120.307 mo
91.8843 120.307 li
@
91.9653 119.701 mo
91.9653 119.701 li
@
92.0864 120.751 mo
92.0864 120.751 li
@
92.1675 120.711 mo
92.1675 120.711 li
@
92.2881 120.953 mo
92.2881 120.953 li
@
92.3691 120.307 mo
92.3691 120.307 li
@
92.4902 119.903 mo
92.4902 119.903 li
@
92.5713 119.701 mo
92.5713 119.701 li
@
92.6523 121.034 mo
92.6523 121.034 li
@
92.7734 121.155 mo
92.7734 121.155 li
@
92.854 120.388 mo
92.854 120.388 li
@
92.9751 120.105 mo
92.9751 120.105 li
@
93.0562 120.59 mo
93.0562 120.59 li
@
93.1772 120.307 mo
93.1772 120.307 li
@
93.2573 120.388 mo
93.2573 120.388 li
@
93.3384 119.822 mo
93.3384 119.822 li
@
93.4595 119.458 mo
93.4595 119.458 li
@
93.54 119.499 mo
93.54 119.499 li
@
93.6611 120.145 mo
93.6611 120.145 li
@
93.7422 119.741 mo
93.7422 119.741 li
@
93.8633 120.63 mo
93.8633 120.63 li
@
93.9443 121.074 mo
93.9443 121.074 li
@
94.0254 119.418 mo
94.0254 119.418 li
@
94.146 119.539 mo
94.146 119.539 li
@
94.2271 119.216 mo
94.2271 119.216 li
@
94.3481 117.964 mo
94.3481 117.964 li
@
94.4292 117.479 mo
94.4292 117.479 li
@
94.5503 116.267 mo
94.5503 116.267 li
@
94.6313 116.914 mo
94.6313 116.914 li
@
94.7124 117.479 mo
94.7124 117.479 li
@
94.8335 116.308 mo
94.8335 116.308 li
@
94.9141 117.237 mo
94.9141 117.237 li
@
95.0352 117.358 mo
95.0352 117.358 li
@
95.1162 117.358 mo
95.1162 117.358 li
@
95.2373 115.662 mo
95.2373 115.662 li
@
95.3184 115.459 mo
95.3184 115.459 li
@
95.3984 116.752 mo
95.3984 116.752 li
@
95.52 117.398 mo
95.52 117.398 li
@
95.6001 117.479 mo
95.6001 117.479 li
@
95.7222 117.722 mo
95.7222 117.722 li
@
95.8022 117.924 mo
95.8022 117.924 li
@
95.9233 119.378 mo
95.9233 119.378 li
@
96.0044 119.62 mo
96.0044 119.62 li
@
96.1255 118.53 mo
96.1255 118.53 li
@
96.2061 119.095 mo
96.2061 119.095 li
@
96.2871 120.145 mo
96.2871 120.145 li
@
96.4082 119.458 mo
96.4082 119.458 li
@
96.4893 121.236 mo
96.4893 121.236 li
@
96.6104 121.155 mo
96.6104 121.155 li
@
96.6914 122.084 mo
96.6914 122.084 li
@
96.812 120.388 mo
96.812 120.388 li
@
96.8931 120.59 mo
96.8931 120.59 li
@
96.9741 119.984 mo
96.9741 119.984 li
@
97.0952 119.337 mo
97.0952 119.337 li
@
97.1763 119.903 mo
97.1763 119.903 li
@
97.2974 120.347 mo
97.2974 120.347 li
@
97.3784 121.923 mo
97.3784 121.923 li
@
97.499 120.872 mo
97.499 120.872 li
@
97.5801 121.196 mo
97.5801 121.196 li
@
97.6611 121.196 mo
97.6611 121.196 li
@
97.7822 122.165 mo
97.7822 122.165 li
@
97.8633 122.206 mo
97.8633 122.206 li
@
97.9844 123.054 mo
97.9844 123.054 li
@
98.0645 123.74 mo
98.0645 123.74 li
@
98.186 122.933 mo
98.186 122.933 li
@
98.2661 122.448 mo
98.2661 122.448 li
@
98.3472 123.498 mo
98.3472 123.498 li
@
98.4683 122.812 mo
98.4683 122.812 li
@
98.5493 123.417 mo
98.5493 123.417 li
@
98.6704 122.731 mo
98.6704 122.731 li
@
98.7515 123.175 mo
98.7515 123.175 li
@
98.8721 122.004 mo
98.8721 122.004 li
@
98.9531 122.246 mo
98.9531 122.246 li
@
99.0342 122.044 mo
99.0342 122.044 li
@
99.1553 121.397 mo
99.1553 121.397 li
@
99.2363 121.68 mo
99.2363 121.68 li
@
99.3574 120.953 mo
99.3574 120.953 li
@
99.4385 121.478 mo
99.4385 121.478 li
@
99.5591 121.438 mo
99.5591 121.438 li
@
99.6401 122.408 mo
99.6401 122.408 li
@
99.7212 121.842 mo
99.7212 121.842 li
@
99.8423 121.801 mo
99.8423 121.801 li
@
99.9233 120.832 mo
99.9233 120.832 li
@
100.044 121.64 mo
100.044 121.64 li
@
100.125 121.478 mo
100.125 121.478 li
@
100.246 122.367 mo
100.246 122.367 li
@
100.327 122.206 mo
100.327 122.206 li
@
100.448 121.963 mo
100.448 121.963 li
@
100.529 122.65 mo
100.529 122.65 li
@
100.609 122.771 mo
100.609 122.771 li
@
100.731 122.973 mo
100.731 122.973 li
@
100.811 122.125 mo
100.811 122.125 li
@
100.933 121.357 mo
100.933 121.357 li
@
101.013 122.206 mo
101.013 122.206 li
@
101.135 122.448 mo
101.135 122.448 li
@
101.215 123.902 mo
101.215 123.902 li
@
101.296 123.458 mo
101.296 123.458 li
@
101.418 124.064 mo
101.418 124.064 li
@
101.498 123.579 mo
101.498 123.579 li
@
101.62 123.377 mo
101.62 123.377 li
@
101.7 124.468 mo
101.7 124.468 li
@
101.822 123.7 mo
101.822 123.7 li
@
101.902 123.619 mo
101.902 123.619 li
@
101.983 123.983 mo
101.983 123.983 li
@
102.104 123.417 mo
102.104 123.417 li
@
102.185 123.296 mo
102.185 123.296 li
@
102.306 123.902 mo
102.306 123.902 li
@
102.387 123.054 mo
102.387 123.054 li
@
102.508 122.044 mo
102.508 122.044 li
@
102.589 122.044 mo
102.589 122.044 li
@
102.67 122.408 mo
102.67 122.408 li
@
102.791 121.963 mo
102.791 121.963 li
@
102.872 123.498 mo
102.872 123.498 li
@
102.993 122.731 mo
102.993 122.731 li
@
103.073 123.821 mo
103.073 123.821 li
@
103.195 124.387 mo
103.195 124.387 li
@
103.276 123.821 mo
103.276 123.821 li
@
103.356 125.074 mo
103.356 125.074 li
@
103.478 124.912 mo
103.478 124.912 li
@
103.558 124.468 mo
103.558 124.468 li
@
103.68 124.67 mo
103.68 124.67 li
@
103.761 125.639 mo
103.761 125.639 li
@
103.882 124.629 mo
103.882 124.629 li
@
103.963 123.862 mo
103.963 123.862 li
@
104.043 124.144 mo
104.043 124.144 li
@
104.164 123.74 mo
104.164 123.74 li
@
104.245 123.942 mo
104.245 123.942 li
@
104.366 123.821 mo
104.366 123.821 li
@
104.447 124.67 mo
104.447 124.67 li
@
104.568 124.266 mo
104.568 124.266 li
@
104.649 124.831 mo
104.649 124.831 li
@
104.77 125.316 mo
104.77 125.316 li
@
104.851 125.074 mo
104.851 125.074 li
@
104.932 126.77 mo
104.932 126.77 li
@
105.053 125.195 mo
105.053 125.195 li
@
105.134 125.68 mo
105.134 125.68 li
@
105.255 125.639 mo
105.255 125.639 li
@
105.336 125.518 mo
105.336 125.518 li
@
105.457 125.599 mo
105.457 125.599 li
@
105.538 126.407 mo
105.538 126.407 li
@
105.619 124.993 mo
105.619 124.993 li
@
105.74 125.558 mo
105.74 125.558 li
@
105.821 126.528 mo
105.821 126.528 li
@
105.942 125.558 mo
105.942 125.558 li
@
106.023 126.124 mo
106.023 126.124 li
@
106.144 127.255 mo
106.144 127.255 li
@
106.225 126.366 mo
106.225 126.366 li
@
106.306 126.407 mo
106.306 126.407 li
@
106.427 126.447 mo
106.427 126.447 li
@
106.507 127.861 mo
106.507 127.861 li
@
106.629 126.366 mo
106.629 126.366 li
@
106.709 126.124 mo
106.709 126.124 li
@
106.831 125.356 mo
106.831 125.356 li
@
106.911 126.447 mo
106.911 126.447 li
@
106.992 127.417 mo
106.992 127.417 li
@
107.113 125.68 mo
107.113 125.68 li
@
107.194 125.962 mo
107.194 125.962 li
@
107.315 126.568 mo
107.315 126.568 li
@
107.396 126.205 mo
107.396 126.205 li
@
107.517 127.699 mo
107.517 127.699 li
@
107.598 127.053 mo
107.598 127.053 li
@
107.679 127.417 mo
107.679 127.417 li
@
107.8 126.528 mo
107.8 126.528 li
@
107.881 126.972 mo
107.881 126.972 li
@
108.002 127.538 mo
108.002 127.538 li
@
108.083 127.982 mo
108.083 127.982 li
@
108.204 126.851 mo
108.204 126.851 li
@
108.285 127.821 mo
108.285 127.821 li
@
108.406 127.538 mo
108.406 127.538 li
@
108.487 127.497 mo
108.487 127.497 li
@
108.568 127.134 mo
108.568 127.134 li
@
108.689 127.497 mo
108.689 127.497 li
@
108.77 126.932 mo
108.77 126.932 li
@
108.891 127.74 mo
108.891 127.74 li
@
108.972 127.174 mo
108.972 127.174 li
@
109.093 127.296 mo
109.093 127.296 li
@
109.173 127.538 mo
109.173 127.538 li
@
109.254 127.578 mo
109.254 127.578 li
@
109.375 126.326 mo
109.375 126.326 li
@
109.456 128.386 mo
109.456 128.386 li
@
109.577 127.296 mo
109.577 127.296 li
@
109.658 126.366 mo
109.658 126.366 li
@
109.779 127.901 mo
109.779 127.901 li
@
109.86 126.851 mo
109.86 126.851 li
@
109.941 128.952 mo
109.941 128.952 li
@
110.062 127.699 mo
110.062 127.699 li
@
110.143 127.699 mo
110.143 127.699 li
@
110.264 127.861 mo
110.264 127.861 li
@
110.345 127.619 mo
110.345 127.619 li
@
110.466 127.942 mo
110.466 127.942 li
@
110.547 127.497 mo
110.547 127.497 li
@
110.628 128.709 mo
110.628 128.709 li
@
110.749 128.184 mo
110.749 128.184 li
@
110.83 127.699 mo
110.83 127.699 li
@
110.951 128.83 mo
110.951 128.83 li
@
111.032 128.265 mo
111.032 128.265 li
@
111.153 127.74 mo
111.153 127.74 li
@
111.234 127.699 mo
111.234 127.699 li
@
111.314 127.053 mo
111.314 127.053 li
@
111.436 127.174 mo
111.436 127.174 li
@
111.516 127.942 mo
111.516 127.942 li
@
111.638 127.215 mo
111.638 127.215 li
@
111.718 127.901 mo
111.718 127.901 li
@
111.84 127.619 mo
111.84 127.619 li
@
111.92 126.892 mo
111.92 126.892 li
@
112.001 126.851 mo
112.001 126.851 li
@
112.122 127.296 mo
112.122 127.296 li
@
112.203 126.124 mo
112.203 126.124 li
@
112.324 127.255 mo
112.324 127.255 li
@
112.405 127.538 mo
112.405 127.538 li
@
112.526 127.538 mo
112.526 127.538 li
@
112.607 128.346 mo
112.607 128.346 li
@
112.728 128.063 mo
112.728 128.063 li
@
112.809 126.407 mo
112.809 126.407 li
@
112.89 127.215 mo
112.89 127.215 li
@
113.011 127.053 mo
113.011 127.053 li
@
113.092 127.134 mo
113.092 127.134 li
@
113.213 127.255 mo
113.213 127.255 li
@
113.294 127.538 mo
113.294 127.538 li
@
113.415 126.811 mo
113.415 126.811 li
@
113.496 128.871 mo
113.496 128.871 li
@
113.577 128.224 mo
113.577 128.224 li
@
113.698 128.305 mo
113.698 128.305 li
@
113.779 127.861 mo
113.779 127.861 li
@
113.9 128.507 mo
113.9 128.507 li
@
113.981 127.942 mo
113.981 127.942 li
@
114.102 128.628 mo
114.102 128.628 li
@
114.182 127.376 mo
114.182 127.376 li
@
114.263 128.669 mo
114.263 128.669 li
@
114.384 128.588 mo
114.384 128.588 li
@
114.465 127.094 mo
114.465 127.094 li
@
114.586 126.528 mo
114.586 126.528 li
@
114.667 127.497 mo
114.667 127.497 li
@
114.788 127.699 mo
114.788 127.699 li
@
114.869 127.215 mo
114.869 127.215 li
@
114.95 128.224 mo
114.95 128.224 li
@
115.071 128.426 mo
115.071 128.426 li
@
115.152 128.588 mo
115.152 128.588 li
@
115.273 128.79 mo
115.273 128.79 li
@
115.354 128.305 mo
115.354 128.305 li
@
115.475 129.235 mo
115.475 129.235 li
@
115.556 128.426 mo
115.556 128.426 li
@
115.637 128.548 mo
115.637 128.548 li
@
115.758 128.224 mo
115.758 128.224 li
@
115.839 129.113 mo
115.839 129.113 li
@
115.96 127.619 mo
115.96 127.619 li
@
116.041 127.255 mo
116.041 127.255 li
@
116.162 128.265 mo
116.162 128.265 li
@
116.243 128.911 mo
116.243 128.911 li
@
116.364 128.386 mo
116.364 128.386 li
@
116.445 128.628 mo
116.445 128.628 li
@
116.525 128.265 mo
116.525 128.265 li
@
116.647 127.457 mo
116.647 127.457 li
@
116.727 128.426 mo
116.727 128.426 li
@
116.849 128.911 mo
116.849 128.911 li
@
116.929 127.336 mo
116.929 127.336 li
@
117.051 127.174 mo
117.051 127.174 li
@
117.132 127.538 mo
117.132 127.538 li
@
117.212 128.507 mo
117.212 128.507 li
@
117.334 128.103 mo
117.334 128.103 li
@
117.414 127.74 mo
117.414 127.74 li
@
117.536 128.83 mo
117.536 128.83 li
@
117.616 127.982 mo
117.616 127.982 li
@
117.738 127.982 mo
117.738 127.982 li
@
117.818 128.144 mo
117.818 128.144 li
@
117.899 129.315 mo
117.899 129.315 li
@
118.02 128.83 mo
118.02 128.83 li
@
118.101 128.992 mo
118.101 128.992 li
@
118.222 129.356 mo
118.222 129.356 li
@
118.303 127.982 mo
118.303 127.982 li
@
118.424 128.467 mo
118.424 128.467 li
@
118.505 128.305 mo
118.505 128.305 li
@
118.586 129.315 mo
118.586 129.315 li
@
118.707 129.8 mo
118.707 129.8 li
@
118.788 128.952 mo
118.788 128.952 li
@
118.909 128.467 mo
118.909 128.467 li
@
118.99 128.346 mo
118.99 128.346 li
@
119.111 127.699 mo
119.111 127.699 li
@
119.192 127.901 mo
119.192 127.901 li
@
119.272 128.588 mo
119.272 128.588 li
@
119.394 128.426 mo
119.394 128.426 li
@
119.475 129.315 mo
119.475 129.315 li
@
119.596 129.76 mo
119.596 129.76 li
@
119.677 128.103 mo
119.677 128.103 li
@
119.798 126.932 mo
119.798 126.932 li
@
119.879 128.346 mo
119.879 128.346 li
@
119.959 128.426 mo
119.959 128.426 li
@
120.081 128.467 mo
120.081 128.467 li
@
120.161 127.538 mo
120.161 127.538 li
@
120.282 128.305 mo
120.282 128.305 li
@
120.363 128.628 mo
120.363 128.628 li
@
120.484 127.497 mo
120.484 127.497 li
@
120.565 128.103 mo
120.565 128.103 li
@
120.686 127.821 mo
120.686 127.821 li
@
120.767 127.942 mo
120.767 127.942 li
@
120.848 127.457 mo
120.848 127.457 li
@
120.969 128.709 mo
120.969 128.709 li
@
121.05 127.497 mo
121.05 127.497 li
@
121.171 128.305 mo
121.171 128.305 li
@
121.252 127.619 mo
121.252 127.619 li
@
121.373 129.275 mo
121.373 129.275 li
@
121.454 127.78 mo
121.454 127.78 li
@
121.535 127.013 mo
121.535 127.013 li
@
121.656 126.528 mo
121.656 126.528 li
@
121.737 129.154 mo
121.737 129.154 li
@
121.858 128.871 mo
121.858 128.871 li
@
121.939 127.942 mo
121.939 127.942 li
@
122.06 128.507 mo
122.06 128.507 li
@
122.141 127.336 mo
122.141 127.336 li
@
122.222 127.699 mo
122.222 127.699 li
@
122.343 127.699 mo
122.343 127.699 li
@
122.423 127.942 mo
122.423 127.942 li
@
122.545 128.79 mo
122.545 128.79 li
@
122.625 128.063 mo
122.625 128.063 li
@
122.747 128.548 mo
122.747 128.548 li
@
122.827 128.588 mo
122.827 128.588 li
@
122.908 128.305 mo
122.908 128.305 li
@
123.029 127.982 mo
123.029 127.982 li
@
123.11 129.275 mo
123.11 129.275 li
@
123.231 128.83 mo
123.231 128.83 li
@
123.312 127.861 mo
123.312 127.861 li
@
123.433 128.386 mo
123.433 128.386 li
@
123.514 127.901 mo
123.514 127.901 li
@
123.595 128.063 mo
123.595 128.063 li
@
123.716 128.79 mo
123.716 128.79 li
@
123.797 129.356 mo
123.797 129.356 li
@
123.918 129.275 mo
123.918 129.275 li
@
123.999 127.417 mo
123.999 127.417 li
@
124.12 127.538 mo
124.12 127.538 li
@
124.201 128.83 mo
124.201 128.83 li
@
124.282 128.588 mo
124.282 128.588 li
@
124.403 129.194 mo
124.403 129.194 li
@
124.484 128.184 mo
124.484 128.184 li
@
124.605 128.103 mo
124.605 128.103 li
@
124.686 128.548 mo
124.686 128.548 li
@
124.807 126.69 mo
124.807 126.69 li
@
124.888 127.982 mo
124.888 127.982 li
@
125.009 127.094 mo
125.009 127.094 li
@
125.09 127.215 mo
125.09 127.215 li
@
125.17 127.74 mo
125.17 127.74 li
@
125.291 127.336 mo
125.291 127.336 li
@
125.372 128.386 mo
125.372 128.386 li
@
125.493 128.588 mo
125.493 128.588 li
@
125.574 127.699 mo
125.574 127.699 li
@
125.695 128.184 mo
125.695 128.184 li
@
125.776 127.901 mo
125.776 127.901 li
@
125.857 128.103 mo
125.857 128.103 li
@
125.978 127.699 mo
125.978 127.699 li
@
126.059 127.215 mo
126.059 127.215 li
@
126.18 127.78 mo
126.18 127.78 li
@
126.261 127.659 mo
126.261 127.659 li
@
126.382 127.376 mo
126.382 127.376 li
@
126.463 127.296 mo
126.463 127.296 li
@
126.544 128.467 mo
126.544 128.467 li
@
126.665 127.255 mo
126.665 127.255 li
@
126.746 128.022 mo
126.746 128.022 li
@
126.867 128.022 mo
126.867 128.022 li
@
126.948 127.417 mo
126.948 127.417 li
@
127.069 127.134 mo
127.069 127.134 li
@
127.15 128.911 mo
127.15 128.911 li
@
127.231 128.83 mo
127.231 128.83 li
@
127.352 127.336 mo
127.352 127.336 li
@
127.432 127.901 mo
127.432 127.901 li
@
127.554 128.588 mo
127.554 128.588 li
@
127.634 127.376 mo
127.634 127.376 li
@
127.756 129.073 mo
127.756 129.073 li
@
127.836 127.134 mo
127.836 127.134 li
@
127.917 127.821 mo
127.917 127.821 li
@
128.038 127.174 mo
128.038 127.174 li
@
128.119 127.053 mo
128.119 127.053 li
@
128.24 127.094 mo
128.24 127.094 li
@
128.321 127.013 mo
128.321 127.013 li
@
128.442 127.659 mo
128.442 127.659 li
@
128.523 127.982 mo
128.523 127.982 li
@
128.644 129.154 mo
128.644 129.154 li
@
128.725 127.619 mo
128.725 127.619 li
@
128.806 128.184 mo
128.806 128.184 li
@
128.927 128.467 mo
128.927 128.467 li
@
129.008 128.224 mo
129.008 128.224 li
@
129.129 127.457 mo
129.129 127.457 li
@
129.21 127.538 mo
129.21 127.538 li
@
129.331 128.79 mo
129.331 128.79 li
@
129.412 128.265 mo
129.412 128.265 li
@
129.493 127.942 mo
129.493 127.942 li
@
129.614 128.022 mo
129.614 128.022 li
@
129.695 127.417 mo
129.695 127.417 li
@
129.816 127.74 mo
129.816 127.74 li
@
129.897 128.063 mo
129.897 128.063 li
@
130.018 127.659 mo
130.018 127.659 li
@
130.098 128.871 mo
130.098 128.871 li
@
130.179 128.386 mo
130.179 128.386 li
@
130.3 127.982 mo
130.3 127.982 li
@
130.381 128.426 mo
130.381 128.426 li
@
130.502 128.548 mo
130.502 128.548 li
@
130.583 127.538 mo
130.583 127.538 li
@
130.705 127.659 mo
130.705 127.659 li
@
130.785 128.346 mo
130.785 128.346 li
@
130.866 127.78 mo
130.866 127.78 li
@
130.987 127.497 mo
130.987 127.497 li
@
131.068 127.619 mo
131.068 127.619 li
@
131.19 128.265 mo
131.19 128.265 li
@
131.27 127.861 mo
131.27 127.861 li
@
131.391 127.821 mo
131.391 127.821 li
@
131.472 128.063 mo
131.472 128.063 li
@
131.553 128.669 mo
131.553 128.669 li
@
131.674 127.982 mo
131.674 127.982 li
@
131.755 128.952 mo
131.755 128.952 li
@
131.876 127.942 mo
131.876 127.942 li
@
131.957 128.224 mo
131.957 128.224 li
@
132.078 128.426 mo
132.078 128.426 li
@
132.159 128.911 mo
132.159 128.911 li
@
132.24 129.073 mo
132.24 129.073 li
@
132.361 128.103 mo
132.361 128.103 li
@
132.441 128.184 mo
132.441 128.184 li
@
132.563 127.094 mo
132.563 127.094 li
@
132.643 128.709 mo
132.643 128.709 li
@
132.765 128.709 mo
132.765 128.709 li
@
132.845 127.821 mo
132.845 127.821 li
@
132.967 127.982 mo
132.967 127.982 li
@
133.048 128.224 mo
133.048 128.224 li
@
133.128 127.417 mo
133.128 127.417 li
@
133.25 127.619 mo
133.25 127.619 li
@
133.33 128.548 mo
133.33 128.548 li
@
133.452 129.517 mo
133.452 129.517 li
@
133.532 127.74 mo
133.532 127.74 li
@
133.654 128.022 mo
133.654 128.022 li
@
133.734 128.265 mo
133.734 128.265 li
@
133.815 128.305 mo
133.815 128.305 li
@
133.936 127.78 mo
133.936 127.78 li
@
134.017 128.548 mo
134.017 128.548 li
@
134.138 128.265 mo
134.138 128.265 li
@
134.219 129.113 mo
134.219 129.113 li
@
134.34 127.417 mo
134.34 127.417 li
@
134.421 128.588 mo
134.421 128.588 li
@
134.502 129.921 mo
134.502 129.921 li
@
134.623 128.103 mo
134.623 128.103 li
@
134.704 128.75 mo
134.704 128.75 li
@
134.825 128.628 mo
134.825 128.628 li
@
134.906 127.942 mo
134.906 127.942 li
@
135.027 127.861 mo
135.027 127.861 li
@
135.108 127.78 mo
135.108 127.78 li
@
135.188 127.457 mo
135.188 127.457 li
@
135.31 128.063 mo
135.31 128.063 li
@
135.391 128.386 mo
135.391 128.386 li
@
135.512 128.265 mo
135.512 128.265 li
@
135.593 128.265 mo
135.593 128.265 li
@
135.714 128.588 mo
135.714 128.588 li
@
135.795 127.417 mo
135.795 127.417 li
@
135.875 127.699 mo
135.875 127.699 li
@
135.997 128.79 mo
135.997 128.79 li
@
136.077 126.69 mo
136.077 126.69 li
@
136.198 129.194 mo
136.198 129.194 li
@
136.279 128.184 mo
136.279 128.184 li
@
136.4 128.467 mo
136.4 128.467 li
@
136.481 129.315 mo
136.481 129.315 li
@
136.562 127.619 mo
136.562 127.619 li
@
136.683 128.911 mo
136.683 128.911 li
@
136.764 127.457 mo
136.764 127.457 li
@
136.885 128.467 mo
136.885 128.467 li
@
136.966 127.901 mo
136.966 127.901 li
@
137.087 128.144 mo
137.087 128.144 li
@
137.168 127.861 mo
137.168 127.861 li
@
137.289 128.952 mo
137.289 128.952 li
@
137.37 127.861 mo
137.37 127.861 li
@
137.451 128.628 mo
137.451 128.628 li
@
137.572 127.982 mo
137.572 127.982 li
@
137.653 128.709 mo
137.653 128.709 li
@
137.774 127.619 mo
137.774 127.619 li
@
137.855 127.417 mo
137.855 127.417 li
@
137.976 127.497 mo
137.976 127.497 li
@
138.057 126.811 mo
138.057 126.811 li
@
138.138 127.013 mo
138.138 127.013 li
@
138.259 129.154 mo
138.259 129.154 li
@
138.34 128.346 mo
138.34 128.346 li
@
138.461 127.094 mo
138.461 127.094 li
@
138.541 127.376 mo
138.541 127.376 li
@
138.663 127.861 mo
138.663 127.861 li
@
138.743 128.224 mo
138.743 128.224 li
@
138.824 128.103 mo
138.824 128.103 li
@
138.945 126.69 mo
138.945 126.69 li
@
139.026 126.609 mo
139.026 126.609 li
@
139.147 127.659 mo
139.147 127.659 li
@
139.228 126.487 mo
139.228 126.487 li
@
139.349 125.962 mo
139.349 125.962 li
@
139.43 126.77 mo
139.43 126.77 li
@
139.511 127.174 mo
139.511 127.174 li
@
139.632 126.205 mo
139.632 126.205 li
@
139.713 127.215 mo
139.713 127.215 li
@
139.834 127.255 mo
139.834 127.255 li
@
139.915 127.659 mo
139.915 127.659 li
@
140.036 127.619 mo
140.036 127.619 li
@
140.117 127.578 mo
140.117 127.578 li
@
140.198 127.78 mo
140.198 127.78 li
@
140.319 128.467 mo
140.319 128.467 li
@
140.4 127.901 mo
140.4 127.901 li
@
140.521 127.255 mo
140.521 127.255 li
@
140.602 127.457 mo
140.602 127.457 li
@
140.723 127.053 mo
140.723 127.053 li
@
140.804 127.659 mo
140.804 127.659 li
@
140.925 127.901 mo
140.925 127.901 li
@
141.006 128.952 mo
141.006 128.952 li
@
141.086 128.144 mo
141.086 128.144 li
@
141.207 126.851 mo
141.207 126.851 li
@
141.288 128.022 mo
141.288 128.022 li
@
141.409 128.144 mo
141.409 128.144 li
@
141.49 127.417 mo
141.49 127.417 li
@
141.611 128.184 mo
141.611 128.184 li
@
141.692 129.235 mo
141.692 129.235 li
@
141.773 128.063 mo
141.773 128.063 li
@
141.894 128.224 mo
141.894 128.224 li
@
141.975 128.467 mo
141.975 128.467 li
@
142.096 127.538 mo
142.096 127.538 li
@
142.177 127.74 mo
142.177 127.74 li
@
142.298 127.659 mo
142.298 127.659 li
@
142.379 129.033 mo
142.379 129.033 li
@
142.46 127.659 mo
142.46 127.659 li
@
142.581 129.073 mo
142.581 129.073 li
@
142.662 126.932 mo
142.662 126.932 li
@
142.783 128.467 mo
142.783 128.467 li
@
142.864 128.063 mo
142.864 128.063 li
@
142.985 127.336 mo
142.985 127.336 li
@
143.066 128.022 mo
143.066 128.022 li
@
143.147 127.578 mo
143.147 127.578 li
@
143.268 127.336 mo
143.268 127.336 li
@
143.348 128.507 mo
143.348 128.507 li
@
143.47 127.942 mo
143.47 127.942 li
@
143.55 126.69 mo
143.55 126.69 li
@
143.672 127.094 mo
143.672 127.094 li
@
143.752 126.77 mo
143.752 126.77 li
@
143.833 128.022 mo
143.833 128.022 li
@
143.954 128.507 mo
143.954 128.507 li
@
144.035 128.426 mo
144.035 128.426 li
@
144.156 127.094 mo
144.156 127.094 li
@
144.237 128.144 mo
144.237 128.144 li
@
144.358 126.811 mo
144.358 126.811 li
@
144.439 127.336 mo
144.439 127.336 li
@
144.52 126.649 mo
144.52 126.649 li
@
144.641 127.78 mo
144.641 127.78 li
@
144.722 127.74 mo
144.722 127.74 li
@
144.843 126.892 mo
144.843 126.892 li
@
144.924 127.013 mo
144.924 127.013 li
@
145.045 127.417 mo
145.045 127.417 li
@
145.126 126.972 mo
145.126 126.972 li
@
145.247 127.013 mo
145.247 127.013 li
@
145.328 128.184 mo
145.328 128.184 li
@
145.409 126.447 mo
145.409 126.447 li
@
145.53 127.417 mo
145.53 127.417 li
@
145.611 127.417 mo
145.611 127.417 li
@
145.732 128.022 mo
145.732 128.022 li
@
145.813 127.094 mo
145.813 127.094 li
@
145.934 127.336 mo
145.934 127.336 li
@
146.014 126.73 mo
146.014 126.73 li
@
146.095 127.578 mo
146.095 127.578 li
@
146.216 127.376 mo
146.216 127.376 li
@
146.297 125.922 mo
146.297 125.922 li
@
146.419 126.164 mo
146.419 126.164 li
@
146.499 126.972 mo
146.499 126.972 li
@
146.621 126.528 mo
146.621 126.528 li
@
146.701 127.134 mo
146.701 127.134 li
@
146.782 126.77 mo
146.782 126.77 li
@
146.904 127.861 mo
146.904 127.861 li
@
146.984 126.043 mo
146.984 126.043 li
@
147.106 126.568 mo
147.106 126.568 li
@
147.186 126.649 mo
147.186 126.649 li
@
147.307 125.76 mo
147.307 125.76 li
@
147.388 126.892 mo
147.388 126.892 li
@
147.469 126.205 mo
147.469 126.205 li
@
147.59 126.892 mo
147.59 126.892 li
@
147.671 125.478 mo
147.671 125.478 li
@
147.792 124.266 mo
147.792 124.266 li
@
147.873 124.508 mo
147.873 124.508 li
@
147.994 124.347 mo
147.994 124.347 li
@
148.075 124.589 mo
148.075 124.589 li
@
148.156 124.185 mo
148.156 124.185 li
@
148.277 124.144 mo
148.277 124.144 li
@
148.357 122.65 mo
148.357 122.65 li
@
148.479 122.488 mo
148.479 122.488 li
@
148.559 122.812 mo
148.559 122.812 li
@
148.681 123.619 mo
148.681 123.619 li
@
148.762 123.256 mo
148.762 123.256 li
@
148.842 124.387 mo
148.842 124.387 li
@
148.964 122.852 mo
148.964 122.852 li
@
149.044 122.529 mo
149.044 122.529 li
@
149.166 124.064 mo
149.166 124.064 li
@
149.247 123.862 mo
149.247 123.862 li
@
149.368 124.064 mo
149.368 124.064 li
@
149.448 124.064 mo
149.448 124.064 li
@
149.57 124.104 mo
149.57 124.104 li
@
149.65 125.518 mo
149.65 125.518 li
@
149.731 125.195 mo
149.731 125.195 li
@
149.852 124.791 mo
149.852 124.791 li
@
149.933 125.155 mo
149.933 125.155 li
@
150.054 124.347 mo
150.054 124.347 li
@
150.135 124.629 mo
150.135 124.629 li
@
150.256 125.72 mo
150.256 125.72 li
@
150.337 123.862 mo
150.337 123.862 li
@
150.418 125.639 mo
150.418 125.639 li
@
150.539 125.962 mo
150.539 125.962 li
@
150.62 124.468 mo
150.62 124.468 li
@
150.741 124.791 mo
150.741 124.791 li
@
150.822 125.033 mo
150.822 125.033 li
@
150.943 124.589 mo
150.943 124.589 li
@
151.024 124.993 mo
151.024 124.993 li
@
151.105 125.76 mo
151.105 125.76 li
@
151.226 124.791 mo
151.226 124.791 li
@
151.307 124.912 mo
151.307 124.912 li
@
151.428 124.144 mo
151.428 124.144 li
@
151.509 123.74 mo
151.509 123.74 li
@
151.63 124.185 mo
151.63 124.185 li
@
151.711 123.619 mo
151.711 123.619 li
@
151.791 123.296 mo
151.791 123.296 li
@
151.913 123.66 mo
151.913 123.66 li
@
151.993 124.266 mo
151.993 124.266 li
@
152.114 123.337 mo
152.114 123.337 li
@
152.195 122.165 mo
152.195 122.165 li
@
152.316 123.094 mo
152.316 123.094 li
@
152.397 122.327 mo
152.397 122.327 li
@
152.478 122.286 mo
152.478 122.286 li
@
152.599 120.509 mo
152.599 120.509 li
@
152.68 120.267 mo
152.68 120.267 li
@
152.801 122.206 mo
152.801 122.206 li
@
152.882 121.599 mo
152.882 121.599 li
@
153.003 121.599 mo
153.003 121.599 li
@
153.084 121.034 mo
153.084 121.034 li
@
153.205 121.599 mo
153.205 121.599 li
@
153.286 121.519 mo
153.286 121.519 li
@
153.367 119.62 mo
153.367 119.62 li
@
153.488 118.085 mo
153.488 118.085 li
@
153.569 118.247 mo
153.569 118.247 li
@
153.69 116.994 mo
153.69 116.994 li
@
153.771 116.025 mo
153.771 116.025 li
@
153.892 116.469 mo
153.892 116.469 li
@
153.973 116.348 mo
153.973 116.348 li
@
154.054 117.56 mo
154.054 117.56 li
@
154.175 118.61 mo
154.175 118.61 li
@
154.256 119.216 mo
154.256 119.216 li
@
154.377 119.378 mo
154.377 119.378 li
@
154.457 120.267 mo
154.457 120.267 li
@
154.579 120.63 mo
154.579 120.63 li
@
154.659 119.984 mo
154.659 119.984 li
@
154.74 120.671 mo
154.74 120.671 li
@
154.861 121.438 mo
154.861 121.438 li
@
154.942 121.397 mo
154.942 121.397 li
@
155.063 120.994 mo
155.063 120.994 li
@
155.144 121.963 mo
155.144 121.963 li
@
155.265 121.599 mo
155.265 121.599 li
@
155.346 121.923 mo
155.346 121.923 li
@
155.427 120.792 mo
155.427 120.792 li
@
155.548 121.559 mo
155.548 121.559 li
@
155.629 121.397 mo
155.629 121.397 li
@
155.75 120.711 mo
155.75 120.711 li
@
155.831 121.074 mo
155.831 121.074 li
@
155.952 121.882 mo
155.952 121.882 li
@
156.033 122.004 mo
156.033 122.004 li
@
156.114 119.863 mo
156.114 119.863 li
@
156.235 119.903 mo
156.235 119.903 li
@
156.316 119.62 mo
156.316 119.62 li
@
156.437 120.469 mo
156.437 120.469 li
@
156.518 119.055 mo
156.518 119.055 li
@
156.639 118.772 mo
156.639 118.772 li
@
156.72 118.853 mo
156.72 118.853 li
@
156.8 117.52 mo
156.8 117.52 li
@
156.922 117.358 mo
156.922 117.358 li
@
157.002 116.833 mo
157.002 116.833 li
@
157.123 117.762 mo
157.123 117.762 li
@
157.204 116.55 mo
157.204 116.55 li
@
157.325 117.237 mo
157.325 117.237 li
@
157.406 116.954 mo
157.406 116.954 li
@
157.527 116.55 mo
157.527 116.55 li
@
157.608 116.59 mo
157.608 116.59 li
@
157.689 115.055 mo
157.689 115.055 li
@
157.81 115.177 mo
157.81 115.177 li
@
157.891 116.187 mo
157.891 116.187 li
@
158.012 116.106 mo
158.012 116.106 li
@
158.093 115.177 mo
158.093 115.177 li
@
158.214 114.046 mo
158.214 114.046 li
@
158.295 113.319 mo
158.295 113.319 li
@
158.376 113.884 mo
158.376 113.884 li
@
158.497 113.642 mo
158.497 113.642 li
@
158.578 113.44 mo
158.578 113.44 li
@
158.699 112.672 mo
158.699 112.672 li
@
158.78 115.581 mo
158.78 115.581 li
@
158.901 115.338 mo
158.901 115.338 li
@
158.982 114.772 mo
158.982 114.772 li
@
159.063 116.429 mo
159.063 116.429 li
@
159.184 116.994 mo
159.184 116.994 li
@
159.264 117.964 mo
159.264 117.964 li
@
159.386 117.641 mo
159.386 117.641 li
@
159.466 116.187 mo
159.466 116.187 li
@
159.588 117.883 mo
159.588 117.883 li
@
159.668 117.115 mo
159.668 117.115 li
@
159.749 116.631 mo
159.749 116.631 li
@
159.87 116.429 mo
159.87 116.429 li
@
159.951 115.864 mo
159.951 115.864 li
@
160.072 115.54 mo
160.072 115.54 li
@
160.153 114.53 mo
160.153 114.53 li
@
160.275 113.319 mo
160.275 113.319 li
@
160.355 114.772 mo
160.355 114.772 li
@
160.436 114.934 mo
160.436 114.934 li
@
160.557 115.904 mo
160.557 115.904 li
@
160.638 116.792 mo
160.638 116.792 li
@
160.759 118.61 mo
160.759 118.61 li
@
160.84 118.772 mo
160.84 118.772 li
@
160.961 118.287 mo
160.961 118.287 li
@
161.042 118.005 mo
161.042 118.005 li
@
161.163 117.681 mo
161.163 117.681 li
@
161.244 117.439 mo
161.244 117.439 li
@
161.325 116.227 mo
161.325 116.227 li
@
161.446 117.641 mo
161.446 117.641 li
@
161.527 117.237 mo
161.527 117.237 li
@
161.648 117.762 mo
161.648 117.762 li
@
161.729 118.489 mo
161.729 118.489 li
@
161.85 119.661 mo
161.85 119.661 li
@
161.931 118.651 mo
161.931 118.651 li
@
162.011 118.126 mo
162.011 118.126 li
@
162.133 117.56 mo
162.133 117.56 li
@
162.213 118.408 mo
162.213 118.408 li
@
162.335 118.005 mo
162.335 118.005 li
@
162.415 118.126 mo
162.415 118.126 li
@
162.537 118.126 mo
162.537 118.126 li
@
162.618 117.883 mo
162.618 117.883 li
@
162.698 118.933 mo
162.698 118.933 li
@
162.82 118.489 mo
162.82 118.489 li
@
162.9 118.933 mo
162.9 118.933 li
@
163.022 119.499 mo
163.022 119.499 li
@
163.102 119.256 mo
163.102 119.256 li
@
163.223 118.933 mo
163.223 118.933 li
@
163.304 119.055 mo
163.304 119.055 li
@
163.385 117.237 mo
163.385 117.237 li
@
163.506 115.662 mo
163.506 115.662 li
@
163.587 115.581 mo
163.587 115.581 li
@
163.708 114.247 mo
163.708 114.247 li
@
163.789 112.43 mo
163.789 112.43 li
@
163.91 111.218 mo
163.91 111.218 li
@
163.991 111.38 mo
163.991 111.38 li
@
164.072 112.874 mo
164.072 112.874 li
@
164.193 110.854 mo
164.193 110.854 li
@
164.273 112.026 mo
164.273 112.026 li
@
164.395 111.218 mo
164.395 111.218 li
@
164.476 111.703 mo
164.476 111.703 li
@
164.597 112.47 mo
164.597 112.47 li
@
164.678 113.521 mo
164.678 113.521 li
@
164.758 114.086 mo
164.758 114.086 li
@
164.88 112.995 mo
164.88 112.995 li
@
164.961 112.066 mo
164.961 112.066 li
@
165.082 111.945 mo
165.082 111.945 li
@
165.163 111.703 mo
165.163 111.703 li
@
165.284 110.208 mo
165.284 110.208 li
@
165.364 110.45 mo
165.364 110.45 li
@
165.486 112.187 mo
165.486 112.187 li
@
165.566 111.056 mo
165.566 111.056 li
@
165.647 111.622 mo
165.647 111.622 li
@
165.768 111.662 mo
165.768 111.662 li
@
165.849 111.622 mo
165.849 111.622 li
@
165.97 111.46 mo
165.97 111.46 li
@
166.051 111.783 mo
166.051 111.783 li
@
166.172 111.42 mo
166.172 111.42 li
@
166.253 110.733 mo
166.253 110.733 li
@
166.334 109.844 mo
166.334 109.844 li
@
166.455 111.339 mo
166.455 111.339 li
@
166.536 110.693 mo
166.536 110.693 li
@
166.657 110.733 mo
166.657 110.733 li
@
166.738 110.248 mo
166.738 110.248 li
@
166.859 111.299 mo
166.859 111.299 li
@
166.94 110.288 mo
166.94 110.288 li
@
167.021 111.178 mo
167.021 111.178 li
@
167.142 111.178 mo
167.142 111.178 li
@
167.223 112.066 mo
167.223 112.066 li
@
167.344 113.561 mo
167.344 113.561 li
@
167.425 112.834 mo
167.425 112.834 li
@
167.546 112.834 mo
167.546 112.834 li
@
167.627 113.48 mo
167.627 113.48 li
@
167.707 114.853 mo
167.707 114.853 li
@
167.829 115.823 mo
167.829 115.823 li
@
167.909 114.571 mo
167.909 114.571 li
@
168.031 114.207 mo
168.031 114.207 li
@
168.111 116.227 mo
168.111 116.227 li
@
168.232 116.106 mo
168.232 116.106 li
@
168.313 114.692 mo
168.313 114.692 li
@
168.394 115.904 mo
168.394 115.904 li
@
168.515 116.106 mo
168.515 116.106 li
@
168.596 115.581 mo
168.596 115.581 li
@
168.717 114.651 mo
168.717 114.651 li
@
168.798 114.49 mo
168.798 114.49 li
@
168.919 112.268 mo
168.919 112.268 li
@
169 112.551 mo
169 112.551 li
@
169.081 112.51 mo
169.081 112.51 li
@
169.202 112.955 mo
169.202 112.955 li
@
169.283 113.197 mo
169.283 113.197 li
@
169.404 113.763 mo
169.404 113.763 li
@
169.485 114.086 mo
169.485 114.086 li
@
169.606 114.53 mo
169.606 114.53 li
@
169.687 113.763 mo
169.687 113.763 li
@
169.808 112.995 mo
169.808 112.995 li
@
169.889 113.278 mo
169.889 113.278 li
@
169.97 113.036 mo
169.97 113.036 li
@
170.091 113.116 mo
170.091 113.116 li
@
170.172 112.43 mo
170.172 112.43 li
@
170.293 113.844 mo
170.293 113.844 li
@
170.373 115.096 mo
170.373 115.096 li
@
170.495 115.459 mo
170.495 115.459 li
@
170.575 115.298 mo
170.575 115.298 li
@
170.656 114.409 mo
170.656 114.409 li
@
170.777 114.247 mo
170.777 114.247 li
@
170.858 114.813 mo
170.858 114.813 li
@
170.979 114.53 mo
170.979 114.53 li
@
171.06 115.136 mo
171.06 115.136 li
@
171.181 113.884 mo
171.181 113.884 li
@
171.262 113.844 mo
171.262 113.844 li
@
171.343 113.763 mo
171.343 113.763 li
@
171.464 112.147 mo
171.464 112.147 li
@
171.545 110.733 mo
171.545 110.733 li
@
171.666 110.006 mo
171.666 110.006 li
@
171.747 109.602 mo
171.747 109.602 li
@
171.868 111.056 mo
171.868 111.056 li
@
171.949 113.844 mo
171.949 113.844 li
@
172.03 114.207 mo
172.03 114.207 li
@
172.151 113.278 mo
172.151 113.278 li
@
172.232 113.44 mo
172.232 113.44 li
@
172.353 112.995 mo
172.353 112.995 li
@
172.434 113.601 mo
172.434 113.601 li
@
172.555 113.763 mo
172.555 113.763 li
@
172.636 112.874 mo
172.636 112.874 li
@
172.716 111.743 mo
172.716 111.743 li
@
172.838 111.097 mo
172.838 111.097 li
@
172.918 111.218 mo
172.918 111.218 li
@
173.04 111.541 mo
173.04 111.541 li
@
173.12 108.996 mo
173.12 108.996 li
@
173.241 107.703 mo
173.241 107.703 li
@
173.322 105.118 mo
173.322 105.118 li
@
173.443 102.21 mo
173.443 102.21 li
@
173.524 102.048 mo
173.524 102.048 li
@
173.605 100.796 mo
173.605 100.796 li
@
173.726 99.665 mo
173.726 99.665 li
@
173.807 99.8262 mo
173.807 99.8262 li
@
173.928 97.4023 mo
173.928 97.4023 li
@
174.009 98.897 mo
174.009 98.897 li
@
174.13 100.271 mo
174.13 100.271 li
@
174.211 100.957 mo
174.211 100.957 li
@
174.292 100.311 mo
174.292 100.311 li
@
174.413 99.543 mo
174.413 99.543 li
@
174.494 101.442 mo
174.494 101.442 li
@
174.615 99.4634 mo
174.615 99.4634 li
@
174.696 101.159 mo
174.696 101.159 li
@
174.817 101.886 mo
174.817 101.886 li
@
174.898 101.806 mo
174.898 101.806 li
@
174.979 102.21 mo
174.979 102.21 li
@
175.1 104.27 mo
175.1 104.27 li
@
175.181 103.623 mo
175.181 103.623 li
@
175.302 102.21 mo
175.302 102.21 li
@
175.382 99.5029 mo
175.382 99.5029 li
@
175.504 97.3623 mo
175.504 97.3623 li
@
175.584 98.21 mo
175.584 98.21 li
@
175.665 100.715 mo
175.665 100.715 li
@
175.786 101.28 mo
175.786 101.28 li
@
175.867 102.169 mo
175.867 102.169 li
@
175.988 103.058 mo
175.988 103.058 li
@
176.069 103.744 mo
176.069 103.744 li
@
176.191 104.795 mo
176.191 104.795 li
@
176.271 103.542 mo
176.271 103.542 li
@
176.352 104.108 mo
176.352 104.108 li
@
176.473 104.755 mo
176.473 104.755 li
@
176.554 105.037 mo
176.554 105.037 li
@
176.675 104.391 mo
176.675 104.391 li
@
176.756 104.916 mo
176.756 104.916 li
@
176.877 103.542 mo
176.877 103.542 li
@
176.958 103.017 mo
176.958 103.017 li
@
177.039 105.966 mo
177.039 105.966 li
@
177.16 107.299 mo
177.16 107.299 li
@
177.241 106.976 mo
177.241 106.976 li
@
177.362 107.421 mo
177.362 107.421 li
@
177.443 107.703 mo
177.443 107.703 li
@
177.564 106.815 mo
177.564 106.815 li
@
177.645 104.795 mo
177.645 104.795 li
@
177.766 105.966 mo
177.766 105.966 li
@
177.847 102.735 mo
177.847 102.735 li
@
177.927 102.25 mo
177.927 102.25 li
@
178.049 101.442 mo
178.049 101.442 li
@
178.129 103.26 mo
178.129 103.26 li
@
178.251 102.614 mo
178.251 102.614 li
@
178.331 103.866 mo
178.331 103.866 li
@
178.453 104.956 mo
178.453 104.956 li
@
178.534 106.411 mo
178.534 106.411 li
@
178.614 107.703 mo
178.614 107.703 li
@
178.736 108.39 mo
178.736 108.39 li
@
178.816 110.45 mo
178.816 110.45 li
@
178.938 109.642 mo
178.938 109.642 li
@
179.018 111.097 mo
179.018 111.097 li
@
179.14 113.116 mo
179.14 113.116 li
@
179.22 114.086 mo
179.22 114.086 li
@
179.301 113.682 mo
179.301 113.682 li
@
179.422 113.642 mo
179.422 113.642 li
@
179.503 111.824 mo
179.503 111.824 li
@
179.624 109.965 mo
179.624 109.965 li
@
179.705 109.158 mo
179.705 109.158 li
@
179.826 109.319 mo
179.826 109.319 li
@
179.907 109.804 mo
179.907 109.804 li
@
179.988 109.117 mo
179.988 109.117 li
@
180.109 112.591 mo
180.109 112.591 li
@
180.19 113.682 mo
180.19 113.682 li
@
180.311 112.591 mo
180.311 112.591 li
@
180.392 113.803 mo
180.392 113.803 li
@
180.513 112.591 mo
180.513 112.591 li
@
180.594 112.955 mo
180.594 112.955 li
@
180.674 113.44 mo
180.674 113.44 li
@
180.796 112.47 mo
180.796 112.47 li
@
180.877 111.218 mo
180.877 111.218 li
@
180.998 109.723 mo
180.998 109.723 li
@
181.079 109.642 mo
181.079 109.642 li
@
181.2 107.784 mo
181.2 107.784 li
@
181.281 107.501 mo
181.281 107.501 li
@
181.361 104.916 mo
181.361 104.916 li
@
181.482 104.351 mo
181.482 104.351 li
@
181.563 103.3 mo
181.563 103.3 li
@
181.684 103.825 mo
181.684 103.825 li
@
181.765 104.027 mo
181.765 104.027 li
@
181.886 102.735 mo
181.886 102.735 li
@
181.967 100.876 mo
181.967 100.876 li
@
182.088 102.088 mo
182.088 102.088 li
@
182.169 101.765 mo
182.169 101.765 li
@
182.25 100.634 mo
182.25 100.634 li
@
182.371 99.1392 mo
182.371 99.1392 li
@
182.452 96.4731 mo
182.452 96.4731 li
@
182.573 94.8984 mo
182.573 94.8984 li
@
182.654 94.7363 mo
182.654 94.7363 li
@
182.775 94.4531 mo
182.775 94.4531 li
@
182.856 91.1812 mo
182.856 91.1812 li
@
182.937 87.748 mo
182.937 87.748 li
@
183.058 83.5474 mo
183.058 83.5474 li
@
183.139 82.9004 mo
183.139 82.9004 li
@
183.26 81.5674 mo
183.26 81.5674 li
@
183.341 79.6689 mo
183.341 79.6689 li
@
183.462 77.9312 mo
183.462 77.9312 li
@
183.543 78.7803 mo
183.543 78.7803 li
@
183.623 79.9922 mo
183.623 79.9922 li
@
183.745 78.6992 mo
183.745 78.6992 li
@
183.825 79.5884 mo
183.825 79.5884 li
@
183.947 78.6182 mo
183.947 78.6182 li
@
184.027 80.9214 mo
184.027 80.9214 li
@
184.148 83.1831 mo
184.148 83.1831 li
@
184.229 85.3643 mo
184.229 85.3643 li
@
184.31 87.9092 mo
184.31 87.9092 li
@
184.431 89.3643 mo
184.431 89.3643 li
@
184.512 92.7163 mo
184.512 92.7163 li
@
184.633 94.2109 mo
184.633 94.2109 li
@
184.714 96.7153 mo
184.714 96.7153 li
@
184.835 97.3623 mo
184.835 97.3623 li
@
184.916 99.2612 mo
184.916 99.2612 li
@
184.997 99.9072 mo
184.997 99.9072 li
@
185.118 99.8262 mo
185.118 99.8262 li
@
185.199 98.4932 mo
185.199 98.4932 li
@
185.32 98.3721 mo
185.32 98.3721 li
@
185.401 96.5542 mo
185.401 96.5542 li
@
185.522 93.3223 mo
185.522 93.3223 li
@
185.603 89.8481 mo
185.603 89.8481 li
@
185.724 87.4243 mo
185.724 87.4243 li
@
185.805 83.021 mo
185.805 83.021 li
@
185.886 82.0923 mo
185.886 82.0923 li
@
186.007 80.2344 mo
186.007 80.2344 li
@
186.088 76.3154 mo
186.088 76.3154 li
@
186.209 74.1753 mo
186.209 74.1753 li
@
186.29 72.438 mo
186.29 72.438 li
@
186.411 73.0029 mo
186.411 73.0029 li
@
186.491 74.0942 mo
186.491 74.0942 li
@
186.572 74.377 mo
186.572 74.377 li
@
186.693 78.0933 mo
186.693 78.0933 li
@
186.774 75.8311 mo
186.774 75.8311 li
@
186.895 73.3672 mo
186.895 73.3672 li
@
186.976 66.54 mo
186.976 66.54 li
@
187.097 57.7744 mo
187.097 57.7744 li
@
187.178 46.9883 mo
187.178 46.9883 li
@
187.259 34.8291 mo
187.259 34.8291 li
@
187.38 22.9531 mo
187.38 22.9531 li
@
187.461 13.6211 mo
187.461 13.6211 li
@
187.582 8.93506 mo
187.582 8.93506 li
@
187.663 12.4092 mo
187.663 12.4092 li
@
187.784 11.8843 mo
187.784 11.8843 li
@
187.865 10.834 mo
187.865 10.834 li
@
187.946 10.7529 mo
187.946 10.7529 li
@
188.067 8.04639 mo
188.067 8.04639 li
@
188.148 7.8042 mo
188.148 7.8042 li
@
188.269 6.47119 mo
188.269 6.47119 li
@
188.35 7.84424 mo
188.35 7.84424 li
@
188.471 13.8232 mo
188.471 13.8232 li
@
188.552 21.458 mo
188.552 21.458 li
@
188.632 27.2354 mo
188.632 27.2354 li
@
188.754 34.062 mo
188.754 34.062 li
@
188.834 42.8682 mo
188.834 42.8682 li
@
188.956 53.936 mo
188.956 53.936 li
@
189.036 64.48 mo
189.036 64.48 li
@
189.157 71.105 mo
189.157 71.105 li
@
189.238 76.5181 mo
189.238 76.5181 li
@
189.319 81.9312 mo
189.319 81.9312 li
@
189.44 87.021 mo
189.44 87.021 li
@
189.521 91.2622 mo
189.521 91.2622 li
@
189.642 98.6143 mo
189.642 98.6143 li
@
189.723 105.481 mo
189.723 105.481 li
@
189.844 109.642 mo
189.844 109.642 li
@
189.925 114.369 mo
189.925 114.369 li
@
190.047 115.864 mo
190.047 115.864 li
@
190.127 118.812 mo
190.127 118.812 li
@
190.208 119.701 mo
190.208 119.701 li
@
190.329 120.59 mo
190.329 120.59 li
@
190.41 120.953 mo
190.41 120.953 li
@
190.531 120.145 mo
190.531 120.145 li
@
190.612 121.761 mo
190.612 121.761 li
@
190.733 122.933 mo
190.733 122.933 li
@
190.814 123.862 mo
190.814 123.862 li
@
190.895 124.629 mo
190.895 124.629 li
@
191.016 124.953 mo
191.016 124.953 li
@
191.097 125.356 mo
191.097 125.356 li
@
191.218 125.801 mo
191.218 125.801 li
@
191.298 128.346 mo
191.298 128.346 li
@
191.42 127.861 mo
191.42 127.861 li
@
191.5 128.588 mo
191.5 128.588 li
@
191.581 128.063 mo
191.581 128.063 li
@
191.702 127.538 mo
191.702 127.538 li
@
191.783 128.184 mo
191.783 128.184 li
@
191.905 128.022 mo
191.905 128.022 li
@
191.985 128.507 mo
191.985 128.507 li
@
192.107 129.396 mo
192.107 129.396 li
@
192.187 128.426 mo
192.187 128.426 li
@
192.268 128.952 mo
192.268 128.952 li
@
192.39 127.659 mo
192.39 127.659 li
@
192.47 129.073 mo
192.47 129.073 li
@
192.591 127.942 mo
192.591 127.942 li
@
192.672 128.75 mo
192.672 128.75 li
@
192.793 129.356 mo
192.793 129.356 li
@
192.874 129.517 mo
192.874 129.517 li
@
192.955 130.164 mo
192.955 130.164 li
@
193.076 129.638 mo
193.076 129.638 li
@
193.157 130.204 mo
193.157 130.204 li
@
193.278 128.588 mo
193.278 128.588 li
@
193.359 129.356 mo
193.359 129.356 li
@
193.48 129.194 mo
193.48 129.194 li
@
193.561 129.558 mo
193.561 129.558 li
@
193.682 128.871 mo
193.682 128.871 li
@
193.763 129.679 mo
193.763 129.679 li
@
193.843 129.396 mo
193.843 129.396 li
@
193.965 129.113 mo
193.965 129.113 li
@
194.045 129.84 mo
194.045 129.84 li
@
194.167 130.365 mo
194.167 130.365 li
@
194.248 129.598 mo
194.248 129.598 li
@
194.369 129.921 mo
194.369 129.921 li
@
194.45 129.679 mo
194.45 129.679 li
@
194.53 129.437 mo
194.53 129.437 li
@
194.652 127.578 mo
194.652 127.578 li
@
194.732 129.396 mo
194.732 129.396 li
@
194.854 128.346 mo
194.854 128.346 li
@
194.934 128.75 mo
194.934 128.75 li
@
195.056 129.073 mo
195.056 129.073 li
@
195.136 130.487 mo
195.136 130.487 li
@
195.217 129.315 mo
195.217 129.315 li
@
195.338 128.709 mo
195.338 128.709 li
@
195.419 127.942 mo
195.419 127.942 li
@
195.54 129.477 mo
195.54 129.477 li
@
195.621 129.073 mo
195.621 129.073 li
@
195.742 129.275 mo
195.742 129.275 li
@
195.823 127.821 mo
195.823 127.821 li
@
195.904 128.426 mo
195.904 128.426 li
@
196.025 129.638 mo
196.025 129.638 li
@
196.106 129.235 mo
196.106 129.235 li
@
196.227 129.558 mo
196.227 129.558 li
@
196.308 129.154 mo
196.308 129.154 li
@
196.429 129.396 mo
196.429 129.396 li
@
196.51 129.477 mo
196.51 129.477 li
@
196.591 129.76 mo
196.591 129.76 li
@
196.712 130.81 mo
196.712 130.81 li
@
196.793 128.911 mo
196.793 128.911 li
@
196.914 129.881 mo
196.914 129.881 li
@
196.995 129.76 mo
196.995 129.76 li
@
197.116 128.992 mo
197.116 128.992 li
@
197.197 129.881 mo
197.197 129.881 li
@
197.277 128.871 mo
197.277 128.871 li
@
197.398 128.992 mo
197.398 128.992 li
@
197.479 129.356 mo
197.479 129.356 li
@
197.6 128.628 mo
197.6 128.628 li
@
197.681 129.356 mo
197.681 129.356 li
@
197.802 128.265 mo
197.802 128.265 li
@
197.883 130.648 mo
197.883 130.648 li
@
198.004 129.437 mo
198.004 129.437 li
@
198.085 128.952 mo
198.085 128.952 li
@
198.166 128.265 mo
198.166 128.265 li
@
198.287 129.517 mo
198.287 129.517 li
@
198.368 129.558 mo
198.368 129.558 li
@
198.489 129.598 mo
198.489 129.598 li
@
198.57 129.517 mo
198.57 129.517 li
@
198.691 129.235 mo
198.691 129.235 li
@
198.772 130.083 mo
198.772 130.083 li
@
198.853 130.002 mo
198.853 130.002 li
@
198.974 128.588 mo
198.974 128.588 li
@
199.055 128.992 mo
199.055 128.992 li
@
199.176 129.154 mo
199.176 129.154 li
@
199.257 129.517 mo
199.257 129.517 li
@
199.378 129.76 mo
199.378 129.76 li
@
199.459 129.033 mo
199.459 129.033 li
@
199.54 129.598 mo
199.54 129.598 li
@
199.661 129.962 mo
199.661 129.962 li
@
199.741 128.548 mo
199.741 128.548 li
@
199.863 129.719 mo
199.863 129.719 li
@
199.943 129.194 mo
199.943 129.194 li
@
200.064 129.315 mo
200.064 129.315 li
@
200.145 128.83 mo
200.145 128.83 li
@
200.226 128.426 mo
200.226 128.426 li
@
200.347 128.467 mo
200.347 128.467 li
@
200.428 129.881 mo
200.428 129.881 li
@
200.549 129.598 mo
200.549 129.598 li
@
200.63 128.022 mo
200.63 128.022 li
@
200.751 128.144 mo
200.751 128.144 li
@
200.832 128.952 mo
200.832 128.952 li
@
200.913 128.992 mo
200.913 128.992 li
@
201.034 129.315 mo
201.034 129.315 li
@
201.115 128.386 mo
201.115 128.386 li
@
201.236 129.638 mo
201.236 129.638 li
@
201.317 129.558 mo
201.317 129.558 li
@
201.438 129.638 mo
201.438 129.638 li
@
201.519 129.113 mo
201.519 129.113 li
@
201.6 129.84 mo
201.6 129.84 li
@
201.721 128.992 mo
201.721 128.992 li
@
201.802 130.285 mo
201.802 130.285 li
@
201.923 129.194 mo
201.923 129.194 li
@
202.004 129.477 mo
202.004 129.477 li
@
202.125 129.517 mo
202.125 129.517 li
@
202.206 129.8 mo
202.206 129.8 li
@
202.327 129.921 mo
202.327 129.921 li
@
202.407 129.8 mo
202.407 129.8 li
@
202.488 129.638 mo
202.488 129.638 li
@
202.609 128.911 mo
202.609 128.911 li
@
202.69 130.285 mo
202.69 130.285 li
@
202.811 128.426 mo
202.811 128.426 li
@
202.892 129.719 mo
202.892 129.719 li
@
203.013 128.628 mo
203.013 128.628 li
@
203.094 129.235 mo
203.094 129.235 li
@
203.175 129.558 mo
203.175 129.558 li
@
203.296 128.386 mo
203.296 128.386 li
@
203.377 129.962 mo
203.377 129.962 li
@
203.498 128.346 mo
203.498 128.346 li
@
203.579 129.235 mo
203.579 129.235 li
@
203.7 127.901 mo
203.7 127.901 li
@
203.781 129.517 mo
203.781 129.517 li
@
203.862 128.305 mo
203.862 128.305 li
@
203.983 129.517 mo
203.983 129.517 li
@
204.064 129.638 mo
204.064 129.638 li
@
204.185 130.446 mo
204.185 130.446 li
@
204.266 128.952 mo
204.266 128.952 li
@
204.387 128.79 mo
204.387 128.79 li
@
204.468 129.477 mo
204.468 129.477 li
@
204.548 128.386 mo
204.548 128.386 li
@
204.67 128.507 mo
204.67 128.507 li
@
204.75 130.083 mo
204.75 130.083 li
@
204.872 129.962 mo
204.872 129.962 li
@
204.952 129.76 mo
204.952 129.76 li
@
205.073 129.396 mo
205.073 129.396 li
@
205.154 129.194 mo
205.154 129.194 li
@
205.235 129.719 mo
205.235 129.719 li
@
205.356 129.437 mo
205.356 129.437 li
@
205.437 130.244 mo
205.437 130.244 li
@
205.558 128.871 mo
205.558 128.871 li
@
205.639 128.628 mo
205.639 128.628 li
@
205.761 129.558 mo
205.761 129.558 li
@
205.841 129.113 mo
205.841 129.113 li
@
205.922 128.507 mo
205.922 128.507 li
@
206.043 128.669 mo
206.043 128.669 li
@
206.124 129.356 mo
206.124 129.356 li
@
206.245 128.75 mo
206.245 128.75 li
@
206.326 129.8 mo
206.326 129.8 li
@
206.447 130.083 mo
206.447 130.083 li
@
206.528 129.315 mo
206.528 129.315 li
@
206.649 129.154 mo
206.649 129.154 li
@
206.73 129.073 mo
206.73 129.073 li
@
206.811 129.638 mo
206.811 129.638 li
@
206.932 129.76 mo
206.932 129.76 li
@
207.013 130.083 mo
207.013 130.083 li
@
207.134 129.84 mo
207.134 129.84 li
@
207.214 128.952 mo
207.214 128.952 li
@
207.336 130.285 mo
207.336 130.285 li
@
207.416 128.628 mo
207.416 128.628 li
@
207.497 129.356 mo
207.497 129.356 li
@
207.619 129.638 mo
207.619 129.638 li
@
207.699 129.638 mo
207.699 129.638 li
@
207.821 128.992 mo
207.821 128.992 li
@
207.901 129.679 mo
207.901 129.679 li
@
208.023 128.75 mo
208.023 128.75 li
@
208.104 130.123 mo
208.104 130.123 li
@
208.184 129.315 mo
208.184 129.315 li
@
208.306 129.881 mo
208.306 129.881 li
@
208.386 129.033 mo
208.386 129.033 li
@
208.507 128.911 mo
208.507 128.911 li
@
208.588 128.265 mo
208.588 128.265 li
@
208.709 129.84 mo
208.709 129.84 li
@
208.79 129.073 mo
208.79 129.073 li
@
208.871 128.467 mo
208.871 128.467 li
@
208.992 129.194 mo
208.992 129.194 li
@
209.073 129.76 mo
209.073 129.76 li
@
209.194 128.79 mo
209.194 128.79 li
@
209.275 130.688 mo
209.275 130.688 li
@
209.396 130.769 mo
209.396 130.769 li
@
209.477 128.184 mo
209.477 128.184 li
@
209.557 129.477 mo
209.557 129.477 li
@
209.679 128.871 mo
209.679 128.871 li
@
209.759 129.679 mo
209.759 129.679 li
@
209.881 128.346 mo
209.881 128.346 li
@
209.962 129.76 mo
209.962 129.76 li
@
210.083 129.84 mo
210.083 129.84 li
@
210.164 129.315 mo
210.164 129.315 li
@
210.285 129.113 mo
210.285 129.113 li
@
210.366 129.113 mo
210.366 129.113 li
@
210.447 129.679 mo
210.447 129.679 li
@
210.568 128.871 mo
210.568 128.871 li
@
210.648 128.79 mo
210.648 128.79 li
@
210.77 128.386 mo
210.77 128.386 li
@
210.85 129.194 mo
210.85 129.194 li
@
210.972 130.244 mo
210.972 130.244 li
@
211.052 128.467 mo
211.052 128.467 li
@
211.133 128.952 mo
211.133 128.952 li
@
211.254 129.558 mo
211.254 129.558 li
@
211.335 129.76 mo
211.335 129.76 li
@
211.456 130.164 mo
211.456 130.164 li
@
211.537 128.911 mo
211.537 128.911 li
@
211.658 129.396 mo
211.658 129.396 li
@
211.739 128.426 mo
211.739 128.426 li
@
211.82 128.386 mo
211.82 128.386 li
@
211.941 129.275 mo
211.941 129.275 li
@
212.022 129.033 mo
212.022 129.033 li
@
212.143 128.871 mo
212.143 128.871 li
@
212.224 130.002 mo
212.224 130.002 li
@
212.345 130.244 mo
212.345 130.244 li
@
212.426 129.194 mo
212.426 129.194 li
@
212.507 128.709 mo
212.507 128.709 li
@
212.628 129.84 mo
212.628 129.84 li
@
212.709 129.235 mo
212.709 129.235 li
@
212.83 129.8 mo
212.83 129.8 li
@
212.911 129.235 mo
212.911 129.235 li
@
213.032 128.548 mo
213.032 128.548 li
@
213.113 129.517 mo
213.113 129.517 li
@
213.193 130.891 mo
213.193 130.891 li
@
213.314 129.8 mo
213.314 129.8 li
@
213.395 128.224 mo
213.395 128.224 li
@
213.516 128.628 mo
213.516 128.628 li
@
213.597 130.365 mo
213.597 130.365 li
@
213.718 129.396 mo
213.718 129.396 li
@
213.799 130.083 mo
213.799 130.083 li
@
213.88 128.588 mo
213.88 128.588 li
@
214.001 128.952 mo
214.001 128.952 li
@
214.082 128.669 mo
214.082 128.669 li
@
214.203 129.396 mo
214.203 129.396 li
@
214.284 128.911 mo
214.284 128.911 li
@
214.405 129.962 mo
214.405 129.962 li
@
214.486 129.638 mo
214.486 129.638 li
@
214.607 128.911 mo
214.607 128.911 li
@
214.688 129.113 mo
214.688 129.113 li
@
214.769 129.073 mo
214.769 129.073 li
@
214.89 129.76 mo
214.89 129.76 li
@
214.971 129.275 mo
214.971 129.275 li
@
215.092 130.406 mo
215.092 130.406 li
@
215.173 128.83 mo
215.173 128.83 li
@
215.294 129.113 mo
215.294 129.113 li
@
215.375 129.477 mo
215.375 129.477 li
@
215.456 129.315 mo
215.456 129.315 li
@
215.577 129.275 mo
215.577 129.275 li
@
215.657 127.78 mo
215.657 127.78 li
@
215.779 128.588 mo
215.779 128.588 li
@
215.859 129.558 mo
215.859 129.558 li
@
215.981 129.598 mo
215.981 129.598 li
@
216.061 128.426 mo
216.061 128.426 li
@
216.142 129.477 mo
216.142 129.477 li
@
216.263 129.8 mo
216.263 129.8 li
@
216.344 129.113 mo
216.344 129.113 li
@
216.465 128.224 mo
216.465 128.224 li
@
216.546 128.79 mo
216.546 128.79 li
@
216.667 129.154 mo
216.667 129.154 li
@
216.748 129.962 mo
216.748 129.962 li
@
216.829 128.588 mo
216.829 128.588 li
@
216.95 129.154 mo
216.95 129.154 li
@
217.031 129.356 mo
217.031 129.356 li
@
217.152 128.669 mo
217.152 128.669 li
@
217.233 129.679 mo
217.233 129.679 li
@
217.354 129.679 mo
217.354 129.679 li
@
217.435 129.679 mo
217.435 129.679 li
@
217.516 128.305 mo
217.516 128.305 li
@
217.637 129.477 mo
217.637 129.477 li
@
217.718 129.638 mo
217.718 129.638 li
@
217.839 129.8 mo
217.839 129.8 li
@
217.92 128.709 mo
217.92 128.709 li
@
218.041 129.437 mo
218.041 129.437 li
@
218.122 128.911 mo
218.122 128.911 li
@
218.243 129.962 mo
218.243 129.962 li
@
218.323 129.8 mo
218.323 129.8 li
@
218.404 130.123 mo
218.404 130.123 li
@
218.525 129.477 mo
218.525 129.477 li
@
218.606 128.709 mo
218.606 128.709 li
@
218.727 128.871 mo
218.727 128.871 li
@
218.808 130.164 mo
218.808 130.164 li
@
218.929 127.78 mo
218.929 127.78 li
@
219.01 129.921 mo
219.01 129.921 li
@
219.091 129.719 mo
219.091 129.719 li
@
219.212 129.881 mo
219.212 129.881 li
@
219.293 130.083 mo
219.293 130.083 li
@
219.414 129.194 mo
219.414 129.194 li
@
219.495 129.76 mo
219.495 129.76 li
@
219.616 128.669 mo
219.616 128.669 li
@
219.697 129.275 mo
219.697 129.275 li
@
219.778 128.83 mo
219.778 128.83 li
@
219.899 129.437 mo
219.899 129.437 li
@
219.98 129.235 mo
219.98 129.235 li
@
220.101 130.365 mo
220.101 130.365 li
@
220.182 129.962 mo
220.182 129.962 li
@
220.303 128.669 mo
220.303 128.669 li
@
220.384 128.669 mo
220.384 128.669 li
@
220.464 129.113 mo
220.464 129.113 li
@
220.586 128.669 mo
220.586 128.669 li
@
220.667 130.042 mo
220.667 130.042 li
@
220.789 128.871 mo
220.789 128.871 li
@
220.869 129.154 mo
220.869 129.154 li
@
220.99 131.335 mo
220.99 131.335 li
@
221.07 128.871 mo
221.07 128.871 li
@
221.151 129.033 mo
221.151 129.033 li
@
27.3721 129.719 mo
27.4521 129.76 li
27.5332 129.638 li
27.6143 128.83 li
27.7354 129.275 li
27.8164 128.265 li
27.937 129.315 li
28.0181 129.356 li
28.1392 128.911 li
28.2202 129.073 li
28.3003 128.507 li
28.4224 129.679 li
28.5034 128.911 li
28.624 130.285 li
28.7051 129.921 li
28.8262 129.517 li
28.9072 128.588 li
28.9873 129.679 li
29.1094 130.002 li
29.1904 128.79 li
29.311 130.083 li
29.3911 129.558 li
29.5132 129.598 li
29.5933 128.79 li
29.6743 129.315 li
29.7954 128.628 li
29.8765 128.669 li
29.9971 129.113 li
30.0781 129.194 li
30.1992 129.073 li
30.2803 128.911 li
30.3613 129.558 li
30.4824 129.8 li
30.5635 129.033 li
30.6841 129.356 li
30.7651 130.002 li
30.8862 129.477 li
30.9673 129.073 li
31.0884 129.235 li
31.1694 129.194 li
31.2505 130.042 li
31.3711 129.477 li
31.4521 129.881 li
31.5732 128.911 li
31.6543 129.033 li
31.7754 129.598 li
31.8564 129.194 li
31.936 129.275 li
32.0571 129.275 li
32.1382 129.598 li
32.2593 129.558 li
32.3403 129.235 li
32.4614 129.033 li
32.5425 129.235 li
32.623 130.002 li
32.7441 129.477 li
32.8252 130.083 li
32.9463 129.356 li
33.0273 129.154 li
33.1484 129.477 li
33.229 129.033 li
33.3101 128.265 li
33.4312 129.033 li
33.5122 129.679 li
33.6333 128.79 li
33.7144 128.628 li
33.8354 129.598 li
33.916 128.992 li
33.9971 129.356 li
34.1182 129.073 li
34.1982 129.315 li
34.3203 128.669 li
34.4004 129.76 li
34.5225 128.507 li
34.6021 128.386 li
34.6831 129.275 li
34.8042 130.083 li
34.8853 128.346 li
35.0063 129.033 li
35.0874 130.244 li
35.2085 128.992 li
35.2891 129.275 li
35.4102 129.194 li
35.4912 128.83 li
35.5723 128.952 li
35.6934 129.275 li
35.7744 128.79 li
35.895 129.558 li
35.9761 129.154 li
36.0972 129.235 li
36.1782 129.719 li
36.2593 129.315 li
36.3804 129.517 li
36.4614 129.598 li
36.582 129.356 li
36.6631 129.235 li
36.7842 129.517 li
36.8643 129.154 li
36.9453 129.638 li
37.0664 129.315 li
37.1475 129.033 li
37.2681 128.911 li
37.3491 128.952 li
37.4702 129.881 li
37.5513 128.507 li
37.6323 129.315 li
37.7534 129.275 li
37.8345 130.123 li
37.9551 129.437 li
38.0361 129.8 li
38.1572 128.709 li
38.2383 129.194 li
38.3193 129.396 li
38.4404 129.437 li
38.521 128.467 li
38.6421 130.406 li
38.7231 129.8 li
38.8442 128.79 li
38.9253 129.517 li
39.0464 129.315 li
39.1274 129.638 li
39.207 129.437 li
39.3291 129.517 li
39.4092 129.315 li
39.5313 129.033 li
39.6113 129.113 li
39.7334 129.8 li
39.8135 128.346 li
39.894 129.396 li
40.0151 129.638 li
40.0962 129.962 li
40.2183 130.083 li
40.2983 128.709 li
40.4204 129.235 li
40.5005 129.396 li
40.5811 129.598 li
40.7021 129.033 li
40.7832 129.315 li
40.9043 129.033 li
40.9854 128.83 li
41.1064 129.437 li
41.187 128.628 li
41.2681 129.396 li
41.3892 129.315 li
41.4702 129.073 li
41.5913 129.679 li
41.6724 128.83 li
41.7935 129.194 li
41.873 129.113 li
41.9541 129.558 li
42.0762 129.437 li
42.1563 129.76 li
42.2783 128.79 li
42.3584 130.042 li
42.4805 129.315 li
42.561 129.396 li
42.6411 128.628 li
42.7632 129.921 li
42.8433 128.871 li
42.9644 129.356 li
43.0454 129.477 li
43.166 129.113 li
43.2471 128.911 li
43.3682 128.952 li
43.4492 129.356 li
43.5303 129.598 li
43.6514 128.75 li
43.7324 129.154 li
43.853 129.154 li
43.9341 129.194 li
44.0552 128.75 li
44.1362 129.881 li
44.2163 129.275 li
44.3384 128.669 li
44.4194 128.992 li
44.54 128.386 li
44.6211 129.679 li
44.7422 129.396 li
44.8232 129.517 li
44.9043 129.84 li
45.0254 129.194 li
45.1064 129.598 li
45.2271 128.386 li
45.3071 129.437 li
45.4292 129.598 li
45.5093 129.598 li
45.5903 129.194 li
45.7114 129.517 li
45.7925 129.194 li
45.9131 129.558 li
45.9941 129.679 li
46.1152 129.113 li
46.1963 129.76 li
46.2773 129.638 li
46.3984 129.073 li
46.479 129.719 li
46.6001 129.719 li
46.6812 129.477 li
46.8022 129.356 li
46.8833 129.275 li
46.9644 128.75 li
47.0854 130.244 li
47.166 129.315 li
47.2871 129.356 li
47.3682 128.628 li
47.4893 128.548 li
47.5703 129.235 li
47.6914 129.719 li
47.7725 129.8 li
47.8521 129.437 li
47.9731 129.275 li
48.0542 129.033 li
48.1753 129.719 li
48.2563 129.154 li
48.3774 130.325 li
48.4585 129.881 li
48.5391 129.356 li
48.6602 129.558 li
48.7412 129.113 li
48.8623 129.194 li
48.9434 128.386 li
49.0645 130.083 li
49.145 129.8 li
49.2261 129.194 li
49.3472 129.881 li
49.4282 129.437 li
49.5493 129.073 li
49.6304 129.194 li
49.7515 129.437 li
49.832 130.042 li
49.9131 130.042 li
50.0342 129.154 li
50.1143 129.113 li
50.2363 129.437 li
50.3164 128.992 li
50.4385 128.063 li
50.5181 128.507 li
50.5991 129.396 li
50.7202 130.123 li
50.8013 129.517 li
50.9224 129.073 li
51.0034 129.76 li
51.124 128.992 li
51.2051 128.224 li
51.3262 129.719 li
51.4072 128.952 li
51.4883 129.315 li
51.6094 129.356 li
51.6904 128.669 li
51.811 129.033 li
51.8921 129.517 li
52.0132 128.83 li
52.0942 129.437 li
52.1753 128.911 li
52.2964 129.558 li
52.3774 129.194 li
52.498 128.709 li
52.5791 128.992 li
52.7002 128.83 li
52.7813 128.709 li
52.8613 129.275 li
52.9824 128.709 li
53.0635 129.396 li
53.1841 129.073 li
53.2651 128.911 li
53.3862 129.477 li
53.4673 129.437 li
53.5483 129.154 li
53.6694 129.194 li
53.7505 128.588 li
53.8711 129.638 li
53.9521 129.396 li
54.0732 129.396 li
54.1543 128.588 li
54.2354 129.719 li
54.3564 129.437 li
54.437 128.911 li
54.5581 129.073 li
54.6392 129.517 li
54.7603 128.709 li
54.8413 128.79 li
54.9224 128.871 li
55.0435 129.154 li
55.123 129.517 li
55.2451 129.275 li
55.3252 129.356 li
55.4473 129.558 li
55.5273 129.235 li
55.6494 128.952 li
55.729 128.507 li
55.8101 130.446 li
55.9321 129.477 li
56.0122 129.76 li
56.1343 129.113 li
56.2144 129.235 li
56.3364 130.002 li
56.416 129.154 li
56.4971 129.315 li
56.6182 129.154 li
56.6992 130.285 li
56.8203 129.638 li
56.9014 128.871 li
57.0225 128.871 li
57.103 130.123 li
57.1841 129.235 li
57.3052 129.396 li
57.3862 129.76 li
57.5073 129.477 li
57.5884 128.952 li
57.7095 129.154 li
57.79 129.396 li
57.8701 129.477 li
57.9922 129.437 li
58.0723 129.962 li
58.1943 128.628 li
58.2754 129.962 li
58.396 128.386 li
58.4771 129.194 li
58.5571 130.204 li
58.6792 128.911 li
58.7593 128.305 li
58.8813 129.194 li
58.9614 129.881 li
59.082 129.679 li
59.1631 128.386 li
59.2441 129.356 li
59.3652 129.194 li
59.4463 128.79 li
59.5674 128.75 li
59.6484 129.315 li
59.769 128.063 li
59.8501 129.962 li
59.9712 129.477 li
60.0522 129.719 li
60.1333 128.83 li
60.2544 130.285 li
60.3354 130.446 li
60.4561 128.426 li
60.5371 129.356 li
60.6582 129.315 li
60.7393 129.477 li
60.8203 129.477 li
60.9414 128.952 li
61.0225 129.8 li
61.1431 128.628 li
61.2231 128.83 li
61.3452 129.719 li
61.4253 129.073 li
61.5063 129.638 li
61.6274 129.235 li
61.7085 130.083 li
61.8291 128.548 li
61.9102 128.871 li
62.0313 129.194 li
62.1123 130.244 li
62.1934 130.123 li
62.3145 128.992 li
62.395 129.194 li
62.5161 128.669 li
62.5972 127.457 li
62.7183 127.336 li
62.7993 126.003 li
62.8804 126.164 li
63.0015 126.326 li
63.082 125.599 li
63.2031 126.851 li
63.2842 125.437 li
63.4053 125.033 li
63.4863 123.781 li
63.6074 123.215 li
63.6885 120.307 li
63.7681 117.398 li
63.8901 112.591 li
63.9702 109.238 li
64.0913 103.906 li
64.1724 98.856 li
64.2935 93.2822 li
64.374 87.4243 li
64.4551 82.4961 li
64.5762 78.2554 li
64.6572 75.5483 li
64.7783 75.3062 li
64.8594 78.0532 li
64.9805 78.2949 li
65.061 79.2651 li
65.1421 81.1631 li
65.2632 81.9312 li
65.3442 83.2642 li
65.4653 83.4253 li
65.5464 83.9512 li
65.6675 86.334 li
65.748 88.4751 li
65.8291 90.1714 li
65.9502 90.6162 li
66.0313 92.7163 li
66.1523 93.9692 li
66.2324 96.4331 li
66.354 97.1602 li
66.4341 99.4224 li
66.5151 101.846 li
66.6362 102.129 li
66.7173 102.977 li
66.8384 103.785 li
66.9194 105.037 li
67.04 107.138 li
67.1211 107.744 li
67.2021 109.4 li
67.3232 109.885 li
67.4043 110.288 li
67.5254 110.046 li
67.6064 111.016 li
67.7271 112.349 li
67.8081 112.308 li
67.9292 111.783 li
68.0103 112.268 li
68.0913 111.501 li
68.2124 112.026 li
68.2935 110.127 li
68.4141 110.612 li
68.4951 108.794 li
68.6162 106.492 li
68.6973 105.522 li
68.7773 104.391 li
68.8984 103.744 li
68.979 104.472 li
69.1001 104.149 li
69.1812 104.068 li
69.3032 104.633 li
69.3833 105.078 li
69.4644 104.431 li
69.5854 101.886 li
69.666 100.351 li
69.7871 99.3013 li
69.8682 97.7661 li
69.9902 96.7563 li
70.0703 96.7153 li
70.1514 94.7773 li
70.2725 93.605 li
70.353 93.8882 li
70.4741 93.2422 li
70.5552 92.4341 li
70.6763 91.9492 li
70.7573 92.8779 li
70.8384 92.1914 li
70.9595 94.0903 li
71.04 94.5342 li
71.1611 97.0391 li
71.2412 96.6353 li
71.3633 97.8872 li
71.4434 98.3311 li
71.5654 97.9683 li
71.646 97.6851 li
71.7261 96.4331 li
71.8481 96.958 li
71.9282 97.1201 li
72.0503 97.3223 li
72.1304 98.3721 li
72.2524 98.856 li
72.332 99.5029 li
72.4131 99.0181 li
72.5342 101.24 li
72.6152 102.25 li
72.7363 101.765 li
72.8174 102.129 li
72.9385 100.553 li
73.019 99.7451 li
73.1001 99.3823 li
73.2212 98.4121 li
73.3022 98.5742 li
73.4233 98.4121 li
73.5044 99.1392 li
73.6255 99.7051 li
73.7061 99.1802 li
73.7861 99.4224 li
73.9082 98.21 li
73.9893 98.21 li
74.1104 98.1304 li
74.1914 98.8164 li
74.312 99.2612 li
74.3931 99.8672 li
74.4731 99.2202 li
74.5952 100.634 li
74.6753 101.159 li
74.7974 100.069 li
74.8774 99.8262 li
74.998 98.1699 li
75.0791 99.624 li
75.1602 98.3311 li
75.2813 98.5742 li
75.3623 100.109 li
75.4834 99.0181 li
75.5645 98.6553 li
75.6851 95.2212 li
75.7661 93.605 li
75.8872 92.1914 li
75.9683 90.5762 li
76.0493 90.0503 li
76.1704 90.2119 li
76.2515 88.96 li
76.3721 89.2422 li
76.4531 87.4243 li
76.5742 86.8994 li
76.6553 88.7983 li
76.7363 90.0913 li
76.8574 90.8184 li
76.9385 91.7871 li
77.0591 94.4941 li
77.1401 96.5142 li
77.2612 98.5332 li
77.3413 100.069 li
77.4224 100.472 li
77.5435 100.472 li
77.624 100.957 li
77.7451 99.3013 li
77.8262 100.109 li
77.9473 98.856 li
78.0283 99.3413 li
78.1094 101.563 li
78.2305 101.644 li
78.311 100.674 li
78.4321 100.634 li
78.5132 101.199 li
78.6343 101.967 li
78.7153 102.492 li
78.7964 102.048 li
78.9175 101.886 li
78.998 102.775 li
79.1191 103.179 li
79.2002 103.34 li
79.3213 106.37 li
79.4023 107.097 li
79.4824 107.057 li
79.604 108.026 li
79.6841 108.956 li
79.8062 108.754 li
79.8862 108.996 li
80.0073 109.36 li
80.0884 109.077 li
80.2095 109.925 li
80.29 109.804 li
80.3711 109.238 li
80.4922 109.36 li
80.5732 111.097 li
80.6943 111.097 li
80.7754 110.167 li
80.896 109.4 li
80.9771 111.056 li
81.0581 110.369 li
81.1792 109.198 li
81.2603 111.016 li
81.3813 109.885 li
81.4624 113.359 li
81.5835 111.541 li
81.6641 112.066 li
81.7451 110.329 li
81.8662 109.117 li
81.9473 109.319 li
82.0684 109.198 li
82.1484 108.713 li
82.27 108.956 li
82.3501 108.996 li
82.4312 108.39 li
82.5522 109.602 li
82.6333 107.582 li
82.7544 110.652 li
82.8354 111.622 li
82.9561 111.864 li
83.0371 111.703 li
83.1182 113.561 li
83.2393 113.722 li
83.3203 111.339 li
83.4414 112.551 li
83.5225 112.187 li
83.6431 112.753 li
83.7241 114.167 li
83.8452 114.409 li
83.9263 114.772 li
84.0073 115.864 li
84.1284 115.783 li
84.2095 115.54 li
84.3301 116.025 li
84.4111 114.571 li
84.5322 115.5 li
84.6133 114.934 li
84.6934 115.015 li
84.8145 114.571 li
84.895 115.217 li
85.0161 116.146 li
85.0972 117.277 li
85.2192 116.429 li
85.2993 115.742 li
85.3804 116.267 li
85.5015 116.792 li
85.582 115.864 li
85.7041 116.51 li
85.7842 117.035 li
85.9063 116.106 li
85.9863 115.5 li
86.0674 116.994 li
86.1885 117.479 li
86.269 117.56 li
86.3901 117.479 li
86.4712 118.408 li
86.5923 117.6 li
86.6733 118.005 li
86.7544 118.893 li
86.8755 118.893 li
86.9561 118.57 li
87.0771 117.156 li
87.1572 115.823 li
87.2793 117.762 li
87.3594 117.196 li
87.4404 120.63 li
87.562 120.186 li
87.6421 120.994 li
87.7642 121.438 li
87.8442 121.64 li
87.9663 122.004 li
88.0474 121.963 li
88.1685 121.276 li
88.248 120.145 li
88.3291 121.074 li
88.4502 120.186 li
88.5313 119.418 li
88.6523 120.59 li
88.7334 120.671 li
88.854 120.913 li
88.9351 121.882 li
89.0161 122.488 li
89.1372 121.519 li
89.2183 121.963 li
89.3394 122.327 li
89.4204 122.004 li
89.541 122.933 li
89.6221 122.892 li
89.7031 122.892 li
89.8242 121.196 li
89.9053 120.751 li
90.0264 121.761 li
90.1074 121.559 li
90.228 122.004 li
90.3091 122.61 li
90.3901 120.913 li
90.5112 120.509 li
90.5913 120.428 li
90.7134 121.721 li
90.7935 121.276 li
90.9141 123.337 li
90.9951 121.357 li
91.0762 121.478 li
91.1973 121.599 li
91.2783 122.286 li
91.3994 122.004 li
91.4805 120.509 li
91.6011 119.741 li
91.6821 119.378 li
91.7632 119.863 li
91.8843 120.307 li
91.9653 119.701 li
92.0864 120.751 li
92.1675 120.711 li
92.2881 120.953 li
92.3691 120.307 li
92.4902 119.903 li
92.5713 119.701 li
92.6523 121.034 li
92.7734 121.155 li
92.854 120.388 li
92.9751 120.105 li
93.0562 120.59 li
93.1772 120.307 li
93.2573 120.388 li
93.3384 119.822 li
93.4595 119.458 li
93.54 119.499 li
93.6611 120.145 li
93.7422 119.741 li
93.8633 120.63 li
93.9443 121.074 li
94.0254 119.418 li
94.146 119.539 li
94.2271 119.216 li
94.3481 117.964 li
94.4292 117.479 li
94.5503 116.267 li
94.6313 116.914 li
94.7124 117.479 li
94.8335 116.308 li
94.9141 117.237 li
95.0352 117.358 li
95.1162 117.358 li
95.2373 115.662 li
95.3184 115.459 li
95.3984 116.752 li
95.52 117.398 li
95.6001 117.479 li
95.7222 117.722 li
95.8022 117.924 li
95.9233 119.378 li
96.0044 119.62 li
96.1255 118.53 li
96.2061 119.095 li
96.2871 120.145 li
96.4082 119.458 li
96.4893 121.236 li
96.6104 121.155 li
96.6914 122.084 li
96.812 120.388 li
96.8931 120.59 li
96.9741 119.984 li
97.0952 119.337 li
97.1763 119.903 li
97.2974 120.347 li
97.3784 121.923 li
97.499 120.872 li
97.5801 121.196 li
97.6611 121.196 li
97.7822 122.165 li
97.8633 122.206 li
97.9844 123.054 li
98.0645 123.74 li
98.186 122.933 li
98.2661 122.448 li
98.3472 123.498 li
98.4683 122.812 li
98.5493 123.417 li
98.6704 122.731 li
98.7515 123.175 li
98.8721 122.004 li
98.9531 122.246 li
99.0342 122.044 li
99.1553 121.397 li
99.2363 121.68 li
99.3574 120.953 li
99.4385 121.478 li
99.5591 121.438 li
99.6401 122.408 li
99.7212 121.842 li
99.8423 121.801 li
99.9233 120.832 li
100.044 121.64 li
100.125 121.478 li
100.246 122.367 li
100.327 122.206 li
100.448 121.963 li
100.529 122.65 li
100.609 122.771 li
100.731 122.973 li
100.811 122.125 li
100.933 121.357 li
101.013 122.206 li
101.135 122.448 li
101.215 123.902 li
101.296 123.458 li
101.418 124.064 li
101.498 123.579 li
101.62 123.377 li
101.7 124.468 li
101.822 123.7 li
101.902 123.619 li
101.983 123.983 li
102.104 123.417 li
102.185 123.296 li
102.306 123.902 li
102.387 123.054 li
102.508 122.044 li
102.589 122.044 li
102.67 122.408 li
102.791 121.963 li
102.872 123.498 li
102.993 122.731 li
103.073 123.821 li
103.195 124.387 li
103.276 123.821 li
103.356 125.074 li
103.478 124.912 li
103.558 124.468 li
103.68 124.67 li
103.761 125.639 li
103.882 124.629 li
103.963 123.862 li
104.043 124.144 li
104.164 123.74 li
104.245 123.942 li
104.366 123.821 li
104.447 124.67 li
104.568 124.266 li
104.649 124.831 li
104.77 125.316 li
104.851 125.074 li
104.932 126.77 li
105.053 125.195 li
105.134 125.68 li
105.255 125.639 li
105.336 125.518 li
105.457 125.599 li
105.538 126.407 li
105.619 124.993 li
105.74 125.558 li
105.821 126.528 li
105.942 125.558 li
106.023 126.124 li
106.144 127.255 li
106.225 126.366 li
106.306 126.407 li
106.427 126.447 li
106.507 127.861 li
106.629 126.366 li
106.709 126.124 li
106.831 125.356 li
106.911 126.447 li
106.992 127.417 li
107.113 125.68 li
107.194 125.962 li
107.315 126.568 li
107.396 126.205 li
107.517 127.699 li
107.598 127.053 li
107.679 127.417 li
107.8 126.528 li
107.881 126.972 li
108.002 127.538 li
108.083 127.982 li
108.204 126.851 li
108.285 127.821 li
108.406 127.538 li
108.487 127.497 li
108.568 127.134 li
108.689 127.497 li
108.77 126.932 li
108.891 127.74 li
108.972 127.174 li
109.093 127.296 li
109.173 127.538 li
109.254 127.578 li
109.375 126.326 li
109.456 128.386 li
109.577 127.296 li
109.658 126.366 li
109.779 127.901 li
109.86 126.851 li
109.941 128.952 li
110.062 127.699 li
110.143 127.699 li
110.264 127.861 li
110.345 127.619 li
110.466 127.942 li
110.547 127.497 li
110.628 128.709 li
110.749 128.184 li
110.83 127.699 li
110.951 128.83 li
111.032 128.265 li
111.153 127.74 li
111.234 127.699 li
111.314 127.053 li
111.436 127.174 li
111.516 127.942 li
111.638 127.215 li
111.718 127.901 li
111.84 127.619 li
111.92 126.892 li
112.001 126.851 li
112.122 127.296 li
112.203 126.124 li
112.324 127.255 li
112.405 127.538 li
112.526 127.538 li
112.607 128.346 li
112.728 128.063 li
112.809 126.407 li
112.89 127.215 li
113.011 127.053 li
113.092 127.134 li
113.213 127.255 li
113.294 127.538 li
113.415 126.811 li
113.496 128.871 li
113.577 128.224 li
113.698 128.305 li
113.779 127.861 li
113.9 128.507 li
113.981 127.942 li
114.102 128.628 li
114.182 127.376 li
114.263 128.669 li
114.384 128.588 li
114.465 127.094 li
114.586 126.528 li
114.667 127.497 li
114.788 127.699 li
114.869 127.215 li
114.95 128.224 li
115.071 128.426 li
115.152 128.588 li
115.273 128.79 li
115.354 128.305 li
115.475 129.235 li
115.556 128.426 li
115.637 128.548 li
115.758 128.224 li
115.839 129.113 li
115.96 127.619 li
116.041 127.255 li
116.162 128.265 li
116.243 128.911 li
116.364 128.386 li
116.445 128.628 li
116.525 128.265 li
116.647 127.457 li
116.727 128.426 li
116.849 128.911 li
116.929 127.336 li
117.051 127.174 li
117.132 127.538 li
117.212 128.507 li
117.334 128.103 li
117.414 127.74 li
117.536 128.83 li
117.616 127.982 li
117.738 127.982 li
117.818 128.144 li
117.899 129.315 li
118.02 128.83 li
118.101 128.992 li
118.222 129.356 li
118.303 127.982 li
118.424 128.467 li
118.505 128.305 li
118.586 129.315 li
118.707 129.8 li
118.788 128.952 li
118.909 128.467 li
118.99 128.346 li
119.111 127.699 li
119.192 127.901 li
119.272 128.588 li
119.394 128.426 li
119.475 129.315 li
119.596 129.76 li
119.677 128.103 li
119.798 126.932 li
119.879 128.346 li
119.959 128.426 li
120.081 128.467 li
120.161 127.538 li
120.282 128.305 li
120.363 128.628 li
120.484 127.497 li
120.565 128.103 li
120.686 127.821 li
120.767 127.942 li
120.848 127.457 li
120.969 128.709 li
121.05 127.497 li
121.171 128.305 li
121.252 127.619 li
121.373 129.275 li
121.454 127.78 li
121.535 127.013 li
121.656 126.528 li
121.737 129.154 li
121.858 128.871 li
121.939 127.942 li
122.06 128.507 li
122.141 127.336 li
122.222 127.699 li
122.343 127.699 li
122.423 127.942 li
122.545 128.79 li
122.625 128.063 li
122.747 128.548 li
122.827 128.588 li
122.908 128.305 li
123.029 127.982 li
123.11 129.275 li
123.231 128.83 li
123.312 127.861 li
123.433 128.386 li
123.514 127.901 li
123.595 128.063 li
123.716 128.79 li
123.797 129.356 li
123.918 129.275 li
123.999 127.417 li
124.12 127.538 li
124.201 128.83 li
124.282 128.588 li
124.403 129.194 li
124.484 128.184 li
124.605 128.103 li
124.686 128.548 li
124.807 126.69 li
124.888 127.982 li
125.009 127.094 li
125.09 127.215 li
125.17 127.74 li
125.291 127.336 li
125.372 128.386 li
125.493 128.588 li
125.574 127.699 li
125.695 128.184 li
125.776 127.901 li
125.857 128.103 li
125.978 127.699 li
126.059 127.215 li
126.18 127.78 li
126.261 127.659 li
126.382 127.376 li
126.463 127.296 li
126.544 128.467 li
126.665 127.255 li
126.746 128.022 li
126.867 128.022 li
126.948 127.417 li
127.069 127.134 li
127.15 128.911 li
127.231 128.83 li
127.352 127.336 li
127.432 127.901 li
127.554 128.588 li
127.634 127.376 li
127.756 129.073 li
127.836 127.134 li
127.917 127.821 li
@
127.917 127.821 mo
128.038 127.174 li
128.119 127.053 li
128.24 127.094 li
128.321 127.013 li
128.442 127.659 li
128.523 127.982 li
128.644 129.154 li
128.725 127.619 li
128.806 128.184 li
128.927 128.467 li
129.008 128.224 li
129.129 127.457 li
129.21 127.538 li
129.331 128.79 li
129.412 128.265 li
129.493 127.942 li
129.614 128.022 li
129.695 127.417 li
129.816 127.74 li
129.897 128.063 li
130.018 127.659 li
130.098 128.871 li
130.179 128.386 li
130.3 127.982 li
130.381 128.426 li
130.502 128.548 li
130.583 127.538 li
130.705 127.659 li
130.785 128.346 li
130.866 127.78 li
130.987 127.497 li
131.068 127.619 li
131.19 128.265 li
131.27 127.861 li
131.391 127.821 li
131.472 128.063 li
131.553 128.669 li
131.674 127.982 li
131.755 128.952 li
131.876 127.942 li
131.957 128.224 li
132.078 128.426 li
132.159 128.911 li
132.24 129.073 li
132.361 128.103 li
132.441 128.184 li
132.563 127.094 li
132.643 128.709 li
132.765 128.709 li
132.845 127.821 li
132.967 127.982 li
133.048 128.224 li
133.128 127.417 li
133.25 127.619 li
133.33 128.548 li
133.452 129.517 li
133.532 127.74 li
133.654 128.022 li
133.734 128.265 li
133.815 128.305 li
133.936 127.78 li
134.017 128.548 li
134.138 128.265 li
134.219 129.113 li
134.34 127.417 li
134.421 128.588 li
134.502 129.921 li
134.623 128.103 li
134.704 128.75 li
134.825 128.628 li
134.906 127.942 li
135.027 127.861 li
135.108 127.78 li
135.188 127.457 li
135.31 128.063 li
135.391 128.386 li
135.512 128.265 li
135.593 128.265 li
135.714 128.588 li
135.795 127.417 li
135.875 127.699 li
135.997 128.79 li
136.077 126.69 li
136.198 129.194 li
136.279 128.184 li
136.4 128.467 li
136.481 129.315 li
136.562 127.619 li
136.683 128.911 li
136.764 127.457 li
136.885 128.467 li
136.966 127.901 li
137.087 128.144 li
137.168 127.861 li
137.289 128.952 li
137.37 127.861 li
137.451 128.628 li
137.572 127.982 li
137.653 128.709 li
137.774 127.619 li
137.855 127.417 li
137.976 127.497 li
138.057 126.811 li
138.138 127.013 li
138.259 129.154 li
138.34 128.346 li
138.461 127.094 li
138.541 127.376 li
138.663 127.861 li
138.743 128.224 li
138.824 128.103 li
138.945 126.69 li
139.026 126.609 li
139.147 127.659 li
139.228 126.487 li
139.349 125.962 li
139.43 126.77 li
139.511 127.174 li
139.632 126.205 li
139.713 127.215 li
139.834 127.255 li
139.915 127.659 li
140.036 127.619 li
140.117 127.578 li
140.198 127.78 li
140.319 128.467 li
140.4 127.901 li
140.521 127.255 li
140.602 127.457 li
140.723 127.053 li
140.804 127.659 li
140.925 127.901 li
141.006 128.952 li
141.086 128.144 li
141.207 126.851 li
141.288 128.022 li
141.409 128.144 li
141.49 127.417 li
141.611 128.184 li
141.692 129.235 li
141.773 128.063 li
141.894 128.224 li
141.975 128.467 li
142.096 127.538 li
142.177 127.74 li
142.298 127.659 li
142.379 129.033 li
142.46 127.659 li
142.581 129.073 li
142.662 126.932 li
142.783 128.467 li
142.864 128.063 li
142.985 127.336 li
143.066 128.022 li
143.147 127.578 li
143.268 127.336 li
143.348 128.507 li
143.47 127.942 li
143.55 126.69 li
143.672 127.094 li
143.752 126.77 li
143.833 128.022 li
143.954 128.507 li
144.035 128.426 li
144.156 127.094 li
144.237 128.144 li
144.358 126.811 li
144.439 127.336 li
144.52 126.649 li
144.641 127.78 li
144.722 127.74 li
144.843 126.892 li
144.924 127.013 li
145.045 127.417 li
145.126 126.972 li
145.247 127.013 li
145.328 128.184 li
145.409 126.447 li
145.53 127.417 li
145.611 127.417 li
145.732 128.022 li
145.813 127.094 li
145.934 127.336 li
146.014 126.73 li
146.095 127.578 li
146.216 127.376 li
146.297 125.922 li
146.419 126.164 li
146.499 126.972 li
146.621 126.528 li
146.701 127.134 li
146.782 126.77 li
146.904 127.861 li
146.984 126.043 li
147.106 126.568 li
147.186 126.649 li
147.307 125.76 li
147.388 126.892 li
147.469 126.205 li
147.59 126.892 li
147.671 125.478 li
147.792 124.266 li
147.873 124.508 li
147.994 124.347 li
148.075 124.589 li
148.156 124.185 li
148.277 124.144 li
148.357 122.65 li
148.479 122.488 li
148.559 122.812 li
148.681 123.619 li
148.762 123.256 li
148.842 124.387 li
148.964 122.852 li
149.044 122.529 li
149.166 124.064 li
149.247 123.862 li
149.368 124.064 li
149.448 124.064 li
149.57 124.104 li
149.65 125.518 li
149.731 125.195 li
149.852 124.791 li
149.933 125.155 li
150.054 124.347 li
150.135 124.629 li
150.256 125.72 li
150.337 123.862 li
150.418 125.639 li
150.539 125.962 li
150.62 124.468 li
150.741 124.791 li
150.822 125.033 li
150.943 124.589 li
151.024 124.993 li
151.105 125.76 li
151.226 124.791 li
151.307 124.912 li
151.428 124.144 li
151.509 123.74 li
151.63 124.185 li
151.711 123.619 li
151.791 123.296 li
151.913 123.66 li
151.993 124.266 li
152.114 123.337 li
152.195 122.165 li
152.316 123.094 li
152.397 122.327 li
152.478 122.286 li
152.599 120.509 li
152.68 120.267 li
152.801 122.206 li
152.882 121.599 li
153.003 121.599 li
153.084 121.034 li
153.205 121.599 li
153.286 121.519 li
153.367 119.62 li
153.488 118.085 li
153.569 118.247 li
153.69 116.994 li
153.771 116.025 li
153.892 116.469 li
153.973 116.348 li
154.054 117.56 li
154.175 118.61 li
154.256 119.216 li
154.377 119.378 li
154.457 120.267 li
154.579 120.63 li
154.659 119.984 li
154.74 120.671 li
154.861 121.438 li
154.942 121.397 li
155.063 120.994 li
155.144 121.963 li
155.265 121.599 li
155.346 121.923 li
155.427 120.792 li
155.548 121.559 li
155.629 121.397 li
155.75 120.711 li
155.831 121.074 li
155.952 121.882 li
156.033 122.004 li
156.114 119.863 li
156.235 119.903 li
156.316 119.62 li
156.437 120.469 li
156.518 119.055 li
156.639 118.772 li
156.72 118.853 li
156.8 117.52 li
156.922 117.358 li
157.002 116.833 li
157.123 117.762 li
157.204 116.55 li
157.325 117.237 li
157.406 116.954 li
157.527 116.55 li
157.608 116.59 li
157.689 115.055 li
157.81 115.177 li
157.891 116.187 li
158.012 116.106 li
158.093 115.177 li
158.214 114.046 li
158.295 113.319 li
158.376 113.884 li
158.497 113.642 li
158.578 113.44 li
158.699 112.672 li
158.78 115.581 li
158.901 115.338 li
158.982 114.772 li
159.063 116.429 li
159.184 116.994 li
159.264 117.964 li
159.386 117.641 li
159.466 116.187 li
159.588 117.883 li
159.668 117.115 li
159.749 116.631 li
159.87 116.429 li
159.951 115.864 li
160.072 115.54 li
160.153 114.53 li
160.275 113.319 li
160.355 114.772 li
160.436 114.934 li
160.557 115.904 li
160.638 116.792 li
160.759 118.61 li
160.84 118.772 li
160.961 118.287 li
161.042 118.005 li
161.163 117.681 li
161.244 117.439 li
161.325 116.227 li
161.446 117.641 li
161.527 117.237 li
161.648 117.762 li
161.729 118.489 li
161.85 119.661 li
161.931 118.651 li
162.011 118.126 li
162.133 117.56 li
162.213 118.408 li
162.335 118.005 li
162.415 118.126 li
162.537 118.126 li
162.618 117.883 li
162.698 118.933 li
162.82 118.489 li
162.9 118.933 li
163.022 119.499 li
163.102 119.256 li
163.223 118.933 li
163.304 119.055 li
163.385 117.237 li
163.506 115.662 li
163.587 115.581 li
163.708 114.247 li
163.789 112.43 li
163.91 111.218 li
163.991 111.38 li
164.072 112.874 li
164.193 110.854 li
164.273 112.026 li
164.395 111.218 li
164.476 111.703 li
164.597 112.47 li
164.678 113.521 li
164.758 114.086 li
164.88 112.995 li
164.961 112.066 li
165.082 111.945 li
165.163 111.703 li
165.284 110.208 li
165.364 110.45 li
165.486 112.187 li
165.566 111.056 li
165.647 111.622 li
165.768 111.662 li
165.849 111.622 li
165.97 111.46 li
166.051 111.783 li
166.172 111.42 li
166.253 110.733 li
166.334 109.844 li
166.455 111.339 li
166.536 110.693 li
166.657 110.733 li
166.738 110.248 li
166.859 111.299 li
166.94 110.288 li
167.021 111.178 li
167.142 111.178 li
167.223 112.066 li
167.344 113.561 li
167.425 112.834 li
167.546 112.834 li
167.627 113.48 li
167.707 114.853 li
167.829 115.823 li
167.909 114.571 li
168.031 114.207 li
168.111 116.227 li
168.232 116.106 li
168.313 114.692 li
168.394 115.904 li
168.515 116.106 li
168.596 115.581 li
168.717 114.651 li
168.798 114.49 li
168.919 112.268 li
169 112.551 li
169.081 112.51 li
169.202 112.955 li
169.283 113.197 li
169.404 113.763 li
169.485 114.086 li
169.606 114.53 li
169.687 113.763 li
169.808 112.995 li
169.889 113.278 li
169.97 113.036 li
170.091 113.116 li
170.172 112.43 li
170.293 113.844 li
170.373 115.096 li
170.495 115.459 li
170.575 115.298 li
170.656 114.409 li
170.777 114.247 li
170.858 114.813 li
170.979 114.53 li
171.06 115.136 li
171.181 113.884 li
171.262 113.844 li
171.343 113.763 li
171.464 112.147 li
171.545 110.733 li
171.666 110.006 li
171.747 109.602 li
171.868 111.056 li
171.949 113.844 li
172.03 114.207 li
172.151 113.278 li
172.232 113.44 li
172.353 112.995 li
172.434 113.601 li
172.555 113.763 li
172.636 112.874 li
172.716 111.743 li
172.838 111.097 li
172.918 111.218 li
173.04 111.541 li
173.12 108.996 li
173.241 107.703 li
173.322 105.118 li
173.443 102.21 li
173.524 102.048 li
173.605 100.796 li
173.726 99.665 li
173.807 99.8262 li
173.928 97.4023 li
174.009 98.897 li
174.13 100.271 li
174.211 100.957 li
174.292 100.311 li
174.413 99.543 li
174.494 101.442 li
174.615 99.4634 li
174.696 101.159 li
174.817 101.886 li
174.898 101.806 li
174.979 102.21 li
175.1 104.27 li
175.181 103.623 li
175.302 102.21 li
175.382 99.5029 li
175.504 97.3623 li
175.584 98.21 li
175.665 100.715 li
175.786 101.28 li
175.867 102.169 li
175.988 103.058 li
176.069 103.744 li
176.191 104.795 li
176.271 103.542 li
176.352 104.108 li
176.473 104.755 li
176.554 105.037 li
176.675 104.391 li
176.756 104.916 li
176.877 103.542 li
176.958 103.017 li
177.039 105.966 li
177.16 107.299 li
177.241 106.976 li
177.362 107.421 li
177.443 107.703 li
177.564 106.815 li
177.645 104.795 li
177.766 105.966 li
177.847 102.735 li
177.927 102.25 li
178.049 101.442 li
178.129 103.26 li
178.251 102.614 li
178.331 103.866 li
178.453 104.956 li
178.534 106.411 li
178.614 107.703 li
178.736 108.39 li
178.816 110.45 li
178.938 109.642 li
179.018 111.097 li
179.14 113.116 li
179.22 114.086 li
179.301 113.682 li
179.422 113.642 li
179.503 111.824 li
179.624 109.965 li
179.705 109.158 li
179.826 109.319 li
179.907 109.804 li
179.988 109.117 li
180.109 112.591 li
180.19 113.682 li
180.311 112.591 li
180.392 113.803 li
180.513 112.591 li
180.594 112.955 li
180.674 113.44 li
180.796 112.47 li
180.877 111.218 li
180.998 109.723 li
181.079 109.642 li
181.2 107.784 li
181.281 107.501 li
181.361 104.916 li
181.482 104.351 li
181.563 103.3 li
181.684 103.825 li
181.765 104.027 li
181.886 102.735 li
181.967 100.876 li
182.088 102.088 li
182.169 101.765 li
182.25 100.634 li
182.371 99.1392 li
182.452 96.4731 li
182.573 94.8984 li
182.654 94.7363 li
182.775 94.4531 li
182.856 91.1812 li
182.937 87.748 li
183.058 83.5474 li
183.139 82.9004 li
183.26 81.5674 li
183.341 79.6689 li
183.462 77.9312 li
183.543 78.7803 li
183.623 79.9922 li
183.745 78.6992 li
183.825 79.5884 li
183.947 78.6182 li
184.027 80.9214 li
184.148 83.1831 li
184.229 85.3643 li
184.31 87.9092 li
184.431 89.3643 li
184.512 92.7163 li
184.633 94.2109 li
184.714 96.7153 li
184.835 97.3623 li
184.916 99.2612 li
184.997 99.9072 li
185.118 99.8262 li
185.199 98.4932 li
185.32 98.3721 li
185.401 96.5542 li
185.522 93.3223 li
185.603 89.8481 li
185.724 87.4243 li
185.805 83.021 li
185.886 82.0923 li
186.007 80.2344 li
186.088 76.3154 li
186.209 74.1753 li
186.29 72.438 li
186.411 73.0029 li
186.491 74.0942 li
186.572 74.377 li
186.693 78.0933 li
186.774 75.8311 li
186.895 73.3672 li
186.976 66.54 li
187.097 57.7744 li
187.178 46.9883 li
187.259 34.8291 li
187.38 22.9531 li
187.461 13.6211 li
187.582 8.93506 li
187.663 12.4092 li
187.784 11.8843 li
187.865 10.834 li
187.946 10.7529 li
188.067 8.04639 li
188.148 7.8042 li
188.269 6.47119 li
188.35 7.84424 li
188.471 13.8232 li
188.552 21.458 li
188.632 27.2354 li
188.754 34.062 li
188.834 42.8682 li
188.956 53.936 li
189.036 64.48 li
189.157 71.105 li
189.238 76.5181 li
189.319 81.9312 li
189.44 87.021 li
189.521 91.2622 li
189.642 98.6143 li
189.723 105.481 li
189.844 109.642 li
189.925 114.369 li
190.047 115.864 li
190.127 118.812 li
190.208 119.701 li
190.329 120.59 li
190.41 120.953 li
190.531 120.145 li
190.612 121.761 li
190.733 122.933 li
190.814 123.862 li
190.895 124.629 li
191.016 124.953 li
191.097 125.356 li
191.218 125.801 li
191.298 128.346 li
191.42 127.861 li
191.5 128.588 li
191.581 128.063 li
191.702 127.538 li
191.783 128.184 li
191.905 128.022 li
191.985 128.507 li
192.107 129.396 li
192.187 128.426 li
192.268 128.952 li
192.39 127.659 li
192.47 129.073 li
192.591 127.942 li
192.672 128.75 li
192.793 129.356 li
192.874 129.517 li
192.955 130.164 li
193.076 129.638 li
193.157 130.204 li
193.278 128.588 li
193.359 129.356 li
193.48 129.194 li
193.561 129.558 li
193.682 128.871 li
193.763 129.679 li
193.843 129.396 li
193.965 129.113 li
194.045 129.84 li
194.167 130.365 li
194.248 129.598 li
194.369 129.921 li
194.45 129.679 li
194.53 129.437 li
194.652 127.578 li
194.732 129.396 li
194.854 128.346 li
194.934 128.75 li
195.056 129.073 li
195.136 130.487 li
195.217 129.315 li
195.338 128.709 li
195.419 127.942 li
195.54 129.477 li
195.621 129.073 li
195.742 129.275 li
195.823 127.821 li
195.904 128.426 li
196.025 129.638 li
196.106 129.235 li
196.227 129.558 li
196.308 129.154 li
196.429 129.396 li
196.51 129.477 li
196.591 129.76 li
196.712 130.81 li
196.793 128.911 li
196.914 129.881 li
196.995 129.76 li
197.116 128.992 li
197.197 129.881 li
197.277 128.871 li
197.398 128.992 li
197.479 129.356 li
197.6 128.628 li
197.681 129.356 li
197.802 128.265 li
197.883 130.648 li
198.004 129.437 li
198.085 128.952 li
198.166 128.265 li
198.287 129.517 li
198.368 129.558 li
198.489 129.598 li
198.57 129.517 li
198.691 129.235 li
198.772 130.083 li
198.853 130.002 li
198.974 128.588 li
199.055 128.992 li
199.176 129.154 li
199.257 129.517 li
199.378 129.76 li
199.459 129.033 li
199.54 129.598 li
199.661 129.962 li
199.741 128.548 li
199.863 129.719 li
199.943 129.194 li
200.064 129.315 li
200.145 128.83 li
200.226 128.426 li
200.347 128.467 li
200.428 129.881 li
200.549 129.598 li
200.63 128.022 li
200.751 128.144 li
200.832 128.952 li
200.913 128.992 li
201.034 129.315 li
201.115 128.386 li
201.236 129.638 li
201.317 129.558 li
201.438 129.638 li
201.519 129.113 li
201.6 129.84 li
201.721 128.992 li
201.802 130.285 li
201.923 129.194 li
202.004 129.477 li
202.125 129.517 li
202.206 129.8 li
202.327 129.921 li
202.407 129.8 li
202.488 129.638 li
202.609 128.911 li
202.69 130.285 li
202.811 128.426 li
202.892 129.719 li
203.013 128.628 li
203.094 129.235 li
203.175 129.558 li
203.296 128.386 li
203.377 129.962 li
203.498 128.346 li
203.579 129.235 li
203.7 127.901 li
203.781 129.517 li
203.862 128.305 li
203.983 129.517 li
204.064 129.638 li
204.185 130.446 li
204.266 128.952 li
204.387 128.79 li
204.468 129.477 li
204.548 128.386 li
204.67 128.507 li
204.75 130.083 li
204.872 129.962 li
204.952 129.76 li
205.073 129.396 li
205.154 129.194 li
205.235 129.719 li
205.356 129.437 li
205.437 130.244 li
205.558 128.871 li
205.639 128.628 li
205.761 129.558 li
205.841 129.113 li
205.922 128.507 li
206.043 128.669 li
206.124 129.356 li
206.245 128.75 li
206.326 129.8 li
206.447 130.083 li
206.528 129.315 li
206.649 129.154 li
206.73 129.073 li
206.811 129.638 li
206.932 129.76 li
207.013 130.083 li
207.134 129.84 li
207.214 128.952 li
207.336 130.285 li
207.416 128.628 li
207.497 129.356 li
207.619 129.638 li
207.699 129.638 li
207.821 128.992 li
207.901 129.679 li
208.023 128.75 li
208.104 130.123 li
208.184 129.315 li
208.306 129.881 li
208.386 129.033 li
208.507 128.911 li
208.588 128.265 li
208.709 129.84 li
208.79 129.073 li
208.871 128.467 li
208.992 129.194 li
209.073 129.76 li
209.194 128.79 li
209.275 130.688 li
209.396 130.769 li
209.477 128.184 li
209.557 129.477 li
209.679 128.871 li
209.759 129.679 li
209.881 128.346 li
209.962 129.76 li
210.083 129.84 li
210.164 129.315 li
210.285 129.113 li
210.366 129.113 li
210.447 129.679 li
210.568 128.871 li
210.648 128.79 li
210.77 128.386 li
210.85 129.194 li
210.972 130.244 li
211.052 128.467 li
211.133 128.952 li
211.254 129.558 li
211.335 129.76 li
211.456 130.164 li
211.537 128.911 li
211.658 129.396 li
211.739 128.426 li
211.82 128.386 li
211.941 129.275 li
212.022 129.033 li
212.143 128.871 li
212.224 130.002 li
212.345 130.244 li
212.426 129.194 li
212.507 128.709 li
212.628 129.84 li
212.709 129.235 li
212.83 129.8 li
212.911 129.235 li
213.032 128.548 li
213.113 129.517 li
213.193 130.891 li
213.314 129.8 li
213.395 128.224 li
213.516 128.628 li
213.597 130.365 li
213.718 129.396 li
213.799 130.083 li
213.88 128.588 li
214.001 128.952 li
214.082 128.669 li
214.203 129.396 li
214.284 128.911 li
214.405 129.962 li
214.486 129.638 li
214.607 128.911 li
214.688 129.113 li
214.769 129.073 li
214.89 129.76 li
214.971 129.275 li
215.092 130.406 li
215.173 128.83 li
215.294 129.113 li
215.375 129.477 li
215.456 129.315 li
215.577 129.275 li
215.657 127.78 li
215.779 128.588 li
215.859 129.558 li
215.981 129.598 li
216.061 128.426 li
216.142 129.477 li
216.263 129.8 li
216.344 129.113 li
216.465 128.224 li
216.546 128.79 li
216.667 129.154 li
216.748 129.962 li
216.829 128.588 li
216.95 129.154 li
217.031 129.356 li
217.152 128.669 li
217.233 129.679 li
217.435 129.679 li
217.516 128.305 li
217.637 129.477 li
217.718 129.638 li
217.839 129.8 li
217.92 128.709 li
218.041 129.437 li
218.122 128.911 li
218.243 129.962 li
218.323 129.8 li
218.404 130.123 li
218.525 129.477 li
218.606 128.709 li
218.727 128.871 li
218.808 130.164 li
218.929 127.78 li
219.01 129.921 li
219.091 129.719 li
219.212 129.881 li
219.293 130.083 li
219.414 129.194 li
219.495 129.76 li
219.616 128.669 li
219.697 129.275 li
219.778 128.83 li
219.899 129.437 li
219.98 129.235 li
220.101 130.365 li
220.182 129.962 li
220.303 128.669 li
220.384 128.669 li
220.464 129.113 li
220.586 128.669 li
220.667 130.042 li
220.789 128.871 li
220.869 129.154 li
220.99 131.335 li
221.07 128.871 li
221.151 129.033 li
221.272 129.679 li
@
83.4419 154.591 mo
85.3794 160.407 li
@
83.7651 154.591 mo
85.3794 159.601 li
@
87.3198 154.591 mo
85.3794 160.407 li
@
82.8755 154.591 mo
84.5718 154.591 li
@
86.27 154.591 mo
87.8853 154.591 li
@
89.2573 158.228 mo
92.5718 158.228 li
92.5718 157.661 li
92.3276 157.097 li
92.0854 156.854 li
91.52 156.53 li
90.6313 156.53 li
89.8237 156.854 li
89.2573 157.419 li
89.0151 158.228 li
89.0151 158.794 li
89.2573 159.601 li
89.8237 160.165 li
90.6313 160.407 li
91.1978 160.407 li
92.0854 160.165 li
92.5718 159.601 li
@
92.3276 158.228 mo
92.3276 157.419 li
92.0854 156.854 li
@
90.6313 156.53 mo
90.1479 156.854 li
89.5815 157.419 li
89.2573 158.228 li
89.2573 158.794 li
89.5815 159.601 li
90.1479 160.165 li
90.6313 160.407 li
@
94.8335 154.591 mo
94.8335 160.407 li
@
95.0757 154.591 mo
95.0757 160.407 li
@
94.0259 154.591 mo
95.0757 154.591 li
@
94.0259 160.407 mo
95.9634 160.407 li
@
98.9536 156.53 mo
98.146 156.854 li
97.5796 157.419 li
97.3374 158.228 li
97.3374 158.794 li
97.5796 159.601 li
98.146 160.165 li
98.9536 160.407 li
99.52 160.407 li
100.326 160.165 li
100.892 159.601 li
101.215 158.794 li
101.215 158.228 li
100.892 157.419 li
100.326 156.854 li
99.52 156.53 li
98.9536 156.53 li
98.3872 156.854 li
97.9038 157.419 li
97.5796 158.228 li
97.5796 158.794 li
97.9038 159.601 li
98.3872 160.165 li
98.9536 160.407 li
@
99.52 160.407 mo
100.083 160.165 li
100.65 159.601 li
100.892 158.794 li
100.892 158.228 li
100.65 157.419 li
100.083 156.854 li
99.52 156.53 li
@
106.144 157.419 mo
105.902 157.661 li
106.144 157.985 li
106.467 157.661 li
106.467 157.419 li
105.902 156.854 li
105.335 156.53 li
104.528 156.53 li
103.719 156.854 li
103.154 157.419 li
102.832 158.228 li
102.832 158.794 li
103.154 159.601 li
103.719 160.165 li
104.528 160.407 li
105.093 160.407 li
105.902 160.165 li
106.467 159.601 li
@
104.528 156.53 mo
103.961 156.854 li
103.398 157.419 li
103.154 158.228 li
103.154 158.794 li
103.398 159.601 li
103.961 160.165 li
104.528 160.407 li
@
108.648 154.591 mo
108.406 154.913 li
108.648 155.157 li
108.971 154.913 li
108.648 154.591 li
@
108.648 156.53 mo
108.648 160.407 li
@
108.971 156.53 mo
108.971 160.407 li
@
107.839 156.53 mo
108.971 156.53 li
@
107.839 160.407 mo
109.78 160.407 li
@
111.719 154.591 mo
111.719 159.358 li
111.961 160.165 li
112.526 160.407 li
113.091 160.407 li
113.658 160.165 li
113.9 159.601 li
@
111.961 154.591 mo
111.961 159.358 li
112.284 160.165 li
112.526 160.407 li
@
110.912 156.53 mo
113.091 156.53 li
@
115.597 156.53 mo
117.293 160.407 li
@
115.839 156.53 mo
117.293 159.923 li
@
118.91 156.53 mo
117.293 160.407 li
116.728 161.54 li
116.162 162.106 li
115.597 162.349 li
115.354 162.349 li
115.032 162.106 li
115.354 161.862 li
115.597 162.106 li
@
115.032 156.53 mo
116.728 156.53 li
@
117.778 156.53 mo
119.474 156.53 li
@
127.23 153.542 mo
126.666 154.025 li
126.099 154.913 li
125.534 156.046 li
125.292 157.419 li
125.292 158.47 li
125.534 159.923 li
126.099 160.974 li
126.666 161.862 li
127.23 162.349 li
@
126.666 154.025 mo
126.099 155.157 li
125.858 156.046 li
125.534 157.419 li
125.534 158.47 li
125.858 159.923 li
126.099 160.731 li
126.666 161.862 li
@
129.412 154.591 mo
129.412 160.407 li
@
129.736 154.591 mo
129.736 160.407 li
@
132.482 156.53 mo
129.736 159.358 li
@
131.108 158.228 mo
132.805 160.407 li
@
130.866 158.228 mo
132.482 160.407 li
@
128.604 154.591 mo
129.736 154.591 li
@
131.673 156.53 mo
133.29 156.53 li
@
128.604 160.407 mo
130.543 160.407 li
@
131.673 160.407 mo
133.29 160.407 li
@
135.23 156.53 mo
135.23 160.407 li
@
135.551 156.53 mo
135.551 160.407 li
@
135.551 157.419 mo
136.118 156.854 li
136.925 156.53 li
137.492 156.53 li
138.299 156.854 li
138.622 157.419 li
138.622 160.407 li
@
137.492 156.53 mo
138.058 156.854 li
138.299 157.419 li
138.299 160.407 li
@
138.622 157.419 mo
139.108 156.854 li
139.996 156.53 li
140.562 156.53 li
141.37 156.854 li
141.612 157.419 li
141.612 160.407 li
@
140.562 156.53 mo
141.045 156.854 li
141.37 157.419 li
141.37 160.407 li
@
134.421 156.53 mo
135.551 156.53 li
@
134.421 160.407 mo
136.36 160.407 li
@
137.492 160.407 mo
139.429 160.407 li
@
140.562 160.407 mo
142.5 160.407 li
@
148.56 153.542 mo
143.551 162.349 li
@
152.679 157.097 mo
153.003 156.53 li
153.003 157.661 li
152.679 157.097 li
152.438 156.854 li
151.872 156.53 li
150.742 156.53 li
150.175 156.854 li
149.934 157.097 li
149.934 157.661 li
150.175 157.985 li
150.742 158.228 li
152.196 158.794 li
152.679 159.036 li
153.003 159.358 li
@
149.934 157.419 mo
150.175 157.661 li
150.742 157.985 li
152.196 158.47 li
152.679 158.794 li
153.003 159.036 li
153.003 159.923 li
152.679 160.165 li
152.196 160.407 li
151.064 160.407 li
150.498 160.165 li
150.175 159.923 li
149.934 159.358 li
149.934 160.407 li
150.175 159.923 li
@
154.62 153.542 mo
155.184 154.025 li
155.75 154.913 li
156.316 156.046 li
156.558 157.419 li
156.558 158.47 li
156.316 159.923 li
155.75 160.974 li
155.184 161.862 li
154.62 162.349 li
@
155.184 154.025 mo
155.75 155.157 li
155.994 156.046 li
156.316 157.419 li
156.316 158.47 li
155.994 159.923 li
155.75 160.731 li
155.184 161.862 li
@
1.2998 84.4258 mo
7.11719 84.4258 li
@
1.2998 84.1836 mo
7.11719 84.1836 li
@
2.99707 82.4873 mo
5.17871 82.4873 li
@
1.2998 85.3154 mo
1.2998 80.8721 li
2.99707 80.8721 li
1.2998 81.1133 li
@
4.12793 84.1836 mo
4.12793 82.4873 li
@
7.11719 85.3154 mo
7.11719 83.376 li
@
1.2998 78.9336 mo
7.11719 78.9336 li
@
1.2998 78.6094 mo
7.11719 78.6094 li
@
1.2998 79.7402 mo
1.2998 78.6094 li
@
7.11719 79.7402 mo
7.11719 77.8018 li
@
3.23926 75.8633 mo
6.30957 75.8633 li
6.875 75.6201 li
7.11719 74.7314 li
7.11719 74.166 li
6.875 73.3574 li
6.30957 72.7939 li
@
3.23926 75.6201 mo
6.30957 75.6201 li
6.875 75.2979 li
7.11719 74.7314 li
@
3.23926 72.7939 mo
7.11719 72.7939 li
@
3.23926 72.5518 mo
7.11719 72.5518 li
@
3.23926 76.6719 mo
3.23926 75.6201 li
@
3.23926 73.6816 mo
3.23926 72.5518 li
@
7.11719 72.7939 mo
7.11719 71.7422 li
@
3.23926 70.0459 mo
7.11719 66.9756 li
@
3.23926 69.8037 mo
7.11719 66.7334 li
@
3.23926 66.7334 mo
7.11719 70.0459 li
@
3.23926 70.6113 mo
3.23926 68.916 li
@
3.23926 67.8652 mo
3.23926 66.168 li
@
7.11719 70.6113 mo
7.11719 68.916 li
@
7.11719 67.8652 mo
7.11719 66.168 li
@
.25 58.1699 mo
.734375 58.6533 li
1.62402 59.2197 li
2.67383 59.7861 li
4.12793 60.1074 li
5.17871 60.1074 li
6.55176 59.7861 li
7.68262 59.2197 li
8.49121 58.6533 li
9.05664 58.1699 li
@
.734375 58.6533 mo
1.86621 59.2197 li
2.67383 59.5439 li
4.12793 59.7861 li
5.17871 59.7861 li
6.55176 59.5439 li
7.44043 59.2197 li
8.49121 58.6533 li
@
1.2998 54.5332 mo
6.06738 54.5332 li
6.875 54.7754 li
7.11719 55.3418 li
7.11719 55.9082 li
6.875 56.4717 li
6.30957 56.7158 li
5.74414 56.7158 li
5.50195 56.4717 li
5.74414 56.2295 li
6.06738 56.4717 li
@
1.2998 54.7754 mo
6.06738 54.7754 li
6.875 55.0996 li
7.11719 55.3418 li
@
1.2998 55.666 mo
1.2998 53.7256 li
@
3.23926 52.0293 mo
7.11719 50.4141 li
@
3.23926 51.7861 mo
6.55176 50.4141 li
@
3.23926 48.7178 mo
7.11719 50.4141 li
8.24902 50.8975 li
8.81445 51.4639 li
9.05664 52.0293 li
9.05664 52.3516 li
8.81445 52.5938 li
8.49121 52.3516 li
8.81445 52.0293 li
@
3.23926 52.5938 mo
3.23926 50.8975 li
@
3.23926 49.8477 mo
3.23926 48.1514 li
@
.25 47.0195 mo
.734375 46.5361 li
1.62402 45.9697 li
2.67383 45.4033 li
4.12793 45.082 li
5.17871 45.082 li
6.55176 45.4033 li
7.68262 45.9697 li
8.49121 46.5361 li
9.05664 47.0195 li
@
.734375 46.5361 mo
1.86621 45.9697 li
2.67383 45.6475 li
4.12793 45.4033 li
5.17871 45.4033 li
6.55176 45.6475 li
7.44043 45.9697 li
8.49121 46.5361 li
@
435.94 137.596 mo
242.041 137.596 li
242.041 136.385 li
@
256.946 137.596 mo
256.946 135.172 li
@
271.852 137.596 mo
271.852 136.385 li
@
286.758 137.596 mo
286.758 136.385 li
@
301.665 137.596 mo
301.665 136.385 li
@
316.611 137.596 mo
316.611 135.172 li
@
331.517 137.596 mo
331.517 136.385 li
@
346.423 137.596 mo
346.423 136.385 li
@
361.33 137.596 mo
361.33 136.385 li
@
376.275 137.596 mo
376.275 135.172 li
@
391.182 137.596 mo
391.182 136.385 li
@
406.088 137.596 mo
406.088 136.385 li
@
420.995 137.596 mo
420.995 136.385 li
@
435.94 137.596 mo
435.94 135.172 li
@
435.94 .25 mo
242.041 .25 li
242.041 1.42139 li
@
256.946 .25 mo
256.946 2.6333 li
@
271.852 .25 mo
271.852 1.42139 li
@
286.758 .25 mo
286.758 1.42139 li
@
301.665 .25 mo
301.665 1.42139 li
@
316.611 .25 mo
316.611 2.6333 li
@
331.517 .25 mo
331.517 1.42139 li
@
346.423 .25 mo
346.423 1.42139 li
@
361.33 .25 mo
361.33 1.42139 li
@
376.275 .25 mo
376.275 2.6333 li
@
391.182 .25 mo
391.182 1.42139 li
@
406.088 .25 mo
406.088 1.42139 li
@
420.995 .25 mo
420.995 1.42139 li
@
435.94 .25 mo
435.94 2.6333 li
@
435.94 .25 mo
435.94 137.596 li
@
435.94 130.244 mo
433.517 130.244 li
@
435.94 122.408 mo
434.729 122.408 li
@
435.94 114.571 mo
434.729 114.571 li
@
435.94 106.734 mo
434.729 106.734 li
@
435.94 98.897 mo
433.517 98.897 li
@
435.94 91.0601 mo
434.729 91.0601 li
@
435.94 83.2231 mo
434.729 83.2231 li
@
435.94 75.3872 mo
434.729 75.3872 li
@
435.94 67.5503 mo
433.517 67.5503 li
@
435.94 59.7134 mo
434.729 59.7134 li
@
435.94 51.8359 mo
434.729 51.8359 li
@
435.94 43.999 mo
434.729 43.999 li
@
435.94 36.1621 mo
433.517 36.1621 li
@
435.94 28.3252 mo
434.729 28.3252 li
@
435.94 20.4883 mo
434.729 20.4883 li
@
435.94 12.6514 mo
434.729 12.6514 li
@
435.94 4.81543 mo
433.517 4.81543 li
@
242.041 .25 mo
242.041 137.596 li
@
242.041 130.244 mo
244.463 130.244 li
@
242.041 122.408 mo
243.251 122.408 li
@
242.041 114.571 mo
243.251 114.571 li
@
242.041 106.734 mo
243.251 106.734 li
@
242.041 98.897 mo
244.463 98.897 li
@
242.041 91.0601 mo
243.251 91.0601 li
@
242.041 83.2231 mo
243.251 83.2231 li
@
242.041 75.3872 mo
243.251 75.3872 li
@
242.041 67.5503 mo
244.463 67.5503 li
@
242.041 59.7134 mo
243.251 59.7134 li
@
242.041 51.8359 mo
243.251 51.8359 li
@
242.041 43.999 mo
243.251 43.999 li
@
242.041 36.1621 mo
244.463 36.1621 li
@
242.041 28.3252 mo
243.251 28.3252 li
@
242.041 20.4883 mo
243.251 20.4883 li
@
242.041 12.6514 mo
243.251 12.6514 li
@
242.041 4.81543 mo
244.463 4.81543 li
@
236.911 126.266 mo
236.102 126.588 li
235.536 127.396 li
235.211 128.77 li
235.211 129.576 li
235.536 131.031 li
236.102 131.84 li
236.911 132.082 li
237.473 132.082 li
238.282 131.84 li
238.848 131.031 li
239.092 129.576 li
239.092 128.77 li
238.848 127.396 li
238.282 126.588 li
237.473 126.266 li
236.911 126.266 li
236.344 126.588 li
236.102 126.83 li
235.778 127.396 li
235.536 128.77 li
235.536 129.576 li
235.778 131.031 li
236.102 131.518 li
236.344 131.84 li
236.911 132.082 li
@
237.473 132.082 mo
238.04 131.84 li
238.282 131.518 li
238.526 131.031 li
238.848 129.576 li
238.848 128.77 li
238.526 127.396 li
238.282 126.83 li
238.04 126.588 li
237.473 126.266 li
@
229.961 97.7007 mo
230.284 97.9448 li
229.961 98.187 li
229.719 97.9448 li
229.719 97.7007 li
229.961 97.1372 li
230.284 96.813 li
231.092 96.5708 li
232.141 96.5708 li
233.03 96.813 li
233.274 97.1372 li
233.596 97.7007 li
233.596 98.187 li
233.274 98.7505 li
232.465 99.3169 li
231.092 99.8823 li
230.528 100.125 li
229.961 100.691 li
229.719 101.579 li
229.719 102.387 li
@
232.141 96.5708 mo
232.708 96.813 li
233.03 97.1372 li
233.274 97.7007 li
233.274 98.187 li
233.03 98.7505 li
232.141 99.3169 li
231.092 99.8823 li
@
229.719 101.823 mo
229.961 101.579 li
230.528 101.579 li
231.901 102.065 li
232.708 102.065 li
233.274 101.823 li
233.596 101.579 li
@
230.528 101.579 mo
231.901 102.387 li
233.03 102.387 li
233.274 102.065 li
233.596 101.579 li
233.596 101.015 li
@
236.911 96.5708 mo
236.02 96.813 li
235.536 97.7007 li
235.211 99.0747 li
235.211 99.8823 li
235.536 101.256 li
236.02 102.065 li
236.911 102.387 li
237.473 102.387 li
238.282 102.065 li
238.848 101.256 li
239.092 99.8823 li
239.092 99.0747 li
238.848 97.7007 li
238.282 96.813 li
237.473 96.5708 li
236.911 96.5708 li
236.344 96.813 li
236.02 97.1372 li
235.778 97.7007 li
235.536 99.0747 li
235.536 99.8823 li
235.778 101.256 li
236.02 101.823 li
236.344 102.065 li
236.911 102.387 li
@
237.473 102.387 mo
238.04 102.065 li
238.282 101.823 li
238.526 101.256 li
238.848 99.8823 li
238.848 99.0747 li
238.526 97.7007 li
238.282 97.1372 li
238.04 96.813 li
237.473 96.5708 li
@
232.141 65.3608 mo
232.141 70.6929 li
@
232.465 64.8765 mo
232.465 70.6929 li
@
232.465 64.8765 mo
229.397 68.9966 li
233.84 68.9966 li
@
231.334 70.6929 mo
233.274 70.6929 li
@
236.911 64.8765 mo
236.02 65.1187 li
235.536 65.9263 li
235.211 67.2983 li
235.211 68.189 li
235.536 69.563 li
236.02 70.3687 li
236.911 70.6929 li
237.473 70.6929 li
238.282 70.3687 li
238.848 69.563 li
239.092 68.189 li
239.092 67.2983 li
238.848 65.9263 li
238.282 65.1187 li
237.473 64.8765 li
236.911 64.8765 li
236.344 65.1187 li
236.02 65.3608 li
235.778 65.9263 li
235.536 67.2983 li
235.536 68.189 li
235.778 69.563 li
236.02 70.1265 li
236.344 70.3687 li
236.911 70.6929 li
@
237.473 70.6929 mo
238.04 70.3687 li
238.282 70.1265 li
238.526 69.563 li
238.848 68.189 li
238.848 67.2983 li
238.526 65.9263 li
238.282 65.3608 li
238.04 65.1187 li
237.473 64.8765 li
@
233.03 33.9087 mo
232.708 34.231 li
233.03 34.4731 li
233.274 34.231 li
233.274 33.9087 li
233.03 33.4224 li
232.465 33.1011 li
231.659 33.1011 li
230.77 33.4224 li
230.284 33.9087 li
229.961 34.4731 li
229.719 35.605 li
229.719 37.3003 li
229.961 38.1089 li
230.528 38.6743 li
231.334 38.9165 li
231.901 38.9165 li
232.708 38.6743 li
233.274 38.1089 li
233.596 37.3003 li
233.596 36.979 li
233.274 36.1704 li
232.708 35.605 li
231.901 35.3628 li
231.659 35.3628 li
230.77 35.605 li
230.284 36.1704 li
229.961 36.979 li
@
231.659 33.1011 mo
231.092 33.4224 li
230.528 33.9087 li
230.284 34.4731 li
229.961 35.605 li
229.961 37.3003 li
230.284 38.1089 li
230.77 38.6743 li
231.334 38.9165 li
@
231.901 38.9165 mo
232.465 38.6743 li
233.03 38.1089 li
233.274 37.3003 li
233.274 36.979 li
233.03 36.1704 li
232.465 35.605 li
231.901 35.3628 li
@
236.911 33.1011 mo
236.02 33.4224 li
235.536 34.231 li
235.211 35.605 li
235.211 36.4126 li
235.536 37.7866 li
236.02 38.6743 li
236.911 38.9165 li
237.473 38.9165 li
238.282 38.6743 li
238.848 37.7866 li
239.092 36.4126 li
239.092 35.605 li
238.848 34.231 li
238.282 33.4224 li
237.473 33.1011 li
236.911 33.1011 li
236.344 33.4224 li
236.02 33.6646 li
235.778 34.231 li
235.536 35.605 li
235.536 36.4126 li
235.778 37.7866 li
236.02 38.3511 li
236.344 38.6743 li
236.911 38.9165 li
@
237.473 38.9165 mo
238.04 38.6743 li
238.282 38.3511 li
238.526 37.7866 li
238.848 36.4126 li
238.848 35.605 li
238.526 34.231 li
238.282 33.6646 li
238.04 33.4224 li
237.473 33.1011 li
@
231.092 2.40479 mo
230.284 2.64893 li
229.961 3.2124 li
229.961 4.021 li
230.284 4.58643 li
231.092 4.91064 li
232.141 4.91064 li
233.03 4.58643 li
233.274 4.021 li
233.274 3.2124 li
233.03 2.64893 li
232.141 2.40479 li
231.092 2.40479 li
230.528 2.64893 li
230.284 3.2124 li
230.284 4.021 li
230.528 4.58643 li
231.092 4.91064 li
@
232.141 4.91064 mo
232.708 4.58643 li
233.03 4.021 li
233.03 3.2124 li
232.708 2.64893 li
232.141 2.40479 li
@
231.092 4.91064 mo
230.284 5.15283 li
229.961 5.39502 li
229.719 5.96045 li
229.719 7.09033 li
229.961 7.65674 li
230.284 7.89893 li
231.092 8.22314 li
232.141 8.22314 li
233.03 7.89893 li
233.274 7.65674 li
233.596 7.09033 li
233.596 5.96045 li
233.274 5.39502 li
233.03 5.15283 li
232.141 4.91064 li
@
231.092 4.91064 mo
230.528 5.15283 li
230.284 5.39502 li
229.961 5.96045 li
229.961 7.09033 li
230.284 7.65674 li
230.528 7.89893 li
231.092 8.22314 li
@
232.141 8.22314 mo
232.708 7.89893 li
233.03 7.65674 li
233.274 7.09033 li
233.274 5.96045 li
233.03 5.39502 li
232.708 5.15283 li
232.141 4.91064 li
@
236.911 2.40479 mo
236.02 2.64893 li
235.536 3.45459 li
235.211 4.91064 li
235.211 5.71924 li
235.536 7.09033 li
236.02 7.89893 li
236.911 8.22314 li
237.473 8.22314 li
238.282 7.89893 li
238.848 7.09033 li
239.092 5.71924 li
239.092 4.91064 li
238.848 3.45459 li
238.282 2.64893 li
237.473 2.40479 li
236.911 2.40479 li
236.344 2.64893 li
236.02 2.97119 li
235.778 3.45459 li
235.536 4.91064 li
235.536 5.71924 li
235.778 7.09033 li
236.02 7.65674 li
236.344 7.89893 li
236.911 8.22314 li
@
237.473 8.22314 mo
238.04 7.89893 li
238.282 7.65674 li
238.526 7.09033 li
238.848 5.71924 li
238.848 4.91064 li
238.526 3.45459 li
238.282 2.97119 li
238.04 2.64893 li
237.473 2.40479 li
@
244.382 143.868 mo
249.394 143.868 li
@
251.574 141.605 mo
251.898 141.928 li
251.574 142.172 li
251.332 141.928 li
251.332 141.605 li
251.574 141.04 li
251.898 140.798 li
252.705 140.474 li
253.835 140.474 li
254.644 140.798 li
254.968 141.04 li
255.208 141.605 li
255.208 142.172 li
254.968 142.735 li
254.08 143.302 li
252.705 143.868 li
252.14 144.11 li
251.574 144.676 li
251.332 145.483 li
251.332 146.292 li
@
253.835 140.474 mo
254.402 140.798 li
254.644 141.04 li
254.968 141.605 li
254.968 142.172 li
254.644 142.735 li
253.835 143.302 li
252.705 143.868 li
@
251.332 145.726 mo
251.574 145.483 li
252.14 145.483 li
253.513 146.05 li
254.402 146.05 li
254.968 145.726 li
255.208 145.483 li
@
252.14 145.483 mo
253.513 146.292 li
254.644 146.292 li
254.968 146.05 li
255.208 145.483 li
255.208 144.918 li
@
258.521 140.474 mo
257.714 140.798 li
257.15 141.605 li
256.906 142.978 li
256.906 143.868 li
257.15 145.242 li
257.714 146.05 li
258.521 146.292 li
259.087 146.292 li
259.896 146.05 li
260.46 145.242 li
260.783 143.868 li
260.783 142.978 li
260.46 141.605 li
259.896 140.798 li
259.087 140.474 li
258.521 140.474 li
257.957 140.798 li
257.714 141.04 li
257.392 141.605 li
257.15 142.978 li
257.15 143.868 li
257.392 145.242 li
257.714 145.726 li
257.957 146.05 li
258.521 146.292 li
@
259.087 146.292 mo
259.654 146.05 li
259.896 145.726 li
260.218 145.242 li
260.46 143.868 li
260.46 142.978 li
260.218 141.605 li
259.896 141.04 li
259.654 140.798 li
259.087 140.474 li
@
316.47 140.474 mo
315.662 140.798 li
315.095 141.605 li
314.853 142.978 li
314.853 143.868 li
315.095 145.242 li
315.662 146.05 li
316.47 146.292 li
317.035 146.292 li
317.843 146.05 li
318.408 145.242 li
318.732 143.868 li
318.732 142.978 li
318.408 141.605 li
317.843 140.798 li
317.035 140.474 li
316.47 140.474 li
315.904 140.798 li
315.662 141.04 li
315.419 141.605 li
315.095 142.978 li
315.095 143.868 li
315.419 145.242 li
315.662 145.726 li
315.904 146.05 li
316.47 146.292 li
@
317.035 146.292 mo
317.599 146.05 li
317.843 145.726 li
318.166 145.242 li
318.408 143.868 li
318.408 142.978 li
318.166 141.605 li
317.843 141.04 li
317.599 140.798 li
317.035 140.474 li
@
371.593 141.605 mo
371.835 141.928 li
371.593 142.172 li
371.269 141.928 li
371.269 141.605 li
371.593 141.04 li
371.835 140.798 li
372.644 140.474 li
373.775 140.474 li
374.582 140.798 li
374.906 141.04 li
375.148 141.605 li
375.148 142.172 li
374.906 142.735 li
374.097 143.302 li
372.644 143.868 li
372.158 144.11 li
371.593 144.676 li
371.269 145.483 li
371.269 146.292 li
@
373.775 140.474 mo
374.339 140.798 li
374.582 141.04 li
374.906 141.605 li
374.906 142.172 li
374.582 142.735 li
373.775 143.302 li
372.644 143.868 li
@
371.269 145.726 mo
371.593 145.483 li
372.158 145.483 li
373.531 146.05 li
374.339 146.05 li
374.906 145.726 li
375.148 145.483 li
@
372.158 145.483 mo
373.531 146.292 li
374.582 146.292 li
374.906 146.05 li
375.148 145.483 li
375.148 144.918 li
@
378.46 140.474 mo
377.652 140.798 li
377.087 141.605 li
376.843 142.978 li
376.843 143.868 li
377.087 145.242 li
377.652 146.05 li
378.46 146.292 li
379.025 146.292 li
379.914 146.05 li
380.4 145.242 li
380.722 143.868 li
380.722 142.978 li
380.4 141.605 li
379.914 140.798 li
379.025 140.474 li
378.46 140.474 li
377.976 140.798 li
377.652 141.04 li
377.41 141.605 li
377.087 142.978 li
377.087 143.868 li
377.41 145.242 li
377.652 145.726 li
377.976 146.05 li
378.46 146.292 li
@
379.025 146.292 mo
379.591 146.05 li
379.914 145.726 li
380.158 145.242 li
380.4 143.868 li
380.4 142.978 li
380.158 141.605 li
379.914 141.04 li
379.591 140.798 li
379.025 140.474 li
@
432.103 141.04 mo
432.103 146.292 li
@
432.427 140.474 mo
432.427 146.292 li
@
432.427 140.474 mo
429.357 144.676 li
433.802 144.676 li
@
431.296 146.292 mo
433.236 146.292 li
@
436.789 140.474 mo
435.982 140.798 li
435.417 141.605 li
435.175 142.978 li
435.175 143.868 li
435.417 145.242 li
435.982 146.05 li
436.789 146.292 li
437.355 146.292 li
438.244 146.05 li
438.73 145.242 li
439.052 143.868 li
439.052 142.978 li
438.73 141.605 li
438.244 140.798 li
437.355 140.474 li
436.789 140.474 li
436.306 140.798 li
435.982 141.04 li
435.74 141.605 li
435.417 142.978 li
435.417 143.868 li
435.74 145.242 li
435.982 145.726 li
436.306 146.05 li
436.789 146.292 li
@
437.355 146.292 mo
437.921 146.05 li
438.244 145.726 li
438.488 145.242 li
438.73 143.868 li
438.73 142.978 li
438.488 141.605 li
438.244 141.04 li
437.921 140.798 li
437.355 140.474 li
@
242.121 130.487 mo
242.121 130.487 li
@
242.524 130.083 mo
242.524 130.083 li
@
242.928 130.164 mo
242.928 130.164 li
@
243.333 130.164 mo
243.333 130.164 li
@
243.736 130.002 mo
243.736 130.002 li
@
244.14 130.608 mo
244.14 130.608 li
@
244.544 129.84 mo
244.544 129.84 li
@
244.988 130.365 mo
244.988 130.365 li
@
245.392 129.679 mo
245.392 129.679 li
@
245.796 130.608 mo
245.796 130.608 li
@
246.201 130.365 mo
246.201 130.365 li
@
246.604 130.204 mo
246.604 130.204 li
@
247.008 130.204 mo
247.008 130.204 li
@
247.413 130.042 mo
247.413 130.042 li
@
247.856 130.608 mo
247.856 130.608 li
@
248.261 129.921 mo
248.261 129.921 li
@
248.665 129.962 mo
248.665 129.962 li
@
249.068 130.244 mo
249.068 130.244 li
@
249.472 129.679 mo
249.472 129.679 li
@
249.876 130.204 mo
249.876 130.204 li
@
250.28 130.002 mo
250.28 130.002 li
@
250.725 130.81 mo
250.725 130.81 li
@
251.129 129.881 mo
251.129 129.881 li
@
251.533 130.446 mo
251.533 130.446 li
@
251.936 129.396 mo
251.936 129.396 li
@
252.34 130.325 mo
252.34 130.325 li
@
252.746 130.527 mo
252.746 130.527 li
@
253.148 130.285 mo
253.148 130.285 li
@
253.593 130.891 mo
253.593 130.891 li
@
253.998 130.769 mo
253.998 130.769 li
@
254.401 130.527 mo
254.401 130.527 li
@
254.805 130.608 mo
254.805 130.608 li
@
255.209 130.083 mo
255.209 130.083 li
@
255.613 130.285 mo
255.613 130.285 li
@
256.016 130.406 mo
256.016 130.406 li
@
256.461 130.85 mo
256.461 130.85 li
@
256.865 130.042 mo
256.865 130.042 li
@
257.269 130.487 mo
257.269 130.487 li
@
257.673 130.123 mo
257.673 130.123 li
@
258.078 130.729 mo
258.078 130.729 li
@
258.481 130.244 mo
258.481 130.244 li
@
258.884 130.244 mo
258.884 130.244 li
@
259.29 130.244 mo
259.29 130.244 li
@
259.733 130.285 mo
259.733 130.285 li
@
260.137 130.325 mo
260.137 130.325 li
@
260.542 130.527 mo
260.542 130.527 li
@
260.945 130.567 mo
260.945 130.567 li
@
261.349 130.083 mo
261.349 130.083 li
@
261.753 129.76 mo
261.753 129.76 li
@
262.158 130.123 mo
262.158 130.123 li
@
262.601 130.204 mo
262.601 130.204 li
@
263.005 130.123 mo
263.005 130.123 li
@
263.41 130.85 mo
263.41 130.85 li
@
263.813 130.446 mo
263.813 130.446 li
@
264.217 130.285 mo
264.217 130.285 li
@
264.622 130.487 mo
264.622 130.487 li
@
265.025 130.164 mo
265.025 130.164 li
@
265.469 130.608 mo
265.469 130.608 li
@
265.874 130.204 mo
265.874 130.204 li
@
266.277 130.729 mo
266.277 130.729 li
@
266.681 130.083 mo
266.681 130.083 li
@
267.085 130.406 mo
267.085 130.406 li
@
267.49 129.84 mo
267.49 129.84 li
@
267.893 129.8 mo
267.893 129.8 li
@
268.337 130.406 mo
268.337 130.406 li
@
268.742 129.719 mo
268.742 129.719 li
@
269.145 130.002 mo
269.145 130.002 li
@
269.549 130.123 mo
269.549 130.123 li
@
269.954 130.204 mo
269.954 130.204 li
@
270.357 129.638 mo
270.357 129.638 li
@
270.761 129.638 mo
270.761 129.638 li
@
271.207 129.8 mo
271.207 129.8 li
@
271.609 129.719 mo
271.609 129.719 li
@
272.013 129.921 mo
272.013 129.921 li
@
272.417 130.042 mo
272.417 130.042 li
@
272.821 129.76 mo
272.821 129.76 li
@
273.225 129.235 mo
273.225 129.235 li
@
273.629 129.638 mo
273.629 129.638 li
@
274.074 129.517 mo
274.074 129.517 li
@
274.477 129.275 mo
274.477 129.275 li
@
274.881 129.235 mo
274.881 129.235 li
@
275.287 129.517 mo
275.287 129.517 li
@
275.69 128.548 mo
275.69 128.548 li
@
276.093 129.477 mo
276.093 129.477 li
@
276.498 128.426 mo
276.498 128.426 li
@
276.941 129.033 mo
276.941 129.033 li
@
277.346 128.871 mo
277.346 128.871 li
@
277.75 129.073 mo
277.75 129.073 li
@
278.154 129.154 mo
278.154 129.154 li
@
278.557 128.588 mo
278.557 128.588 li
@
278.961 128.386 mo
278.961 128.386 li
@
279.365 128.669 mo
279.365 128.669 li
@
279.81 128.871 mo
279.81 128.871 li
@
280.214 128.386 mo
280.214 128.386 li
@
280.619 128.871 mo
280.619 128.871 li
@
281.022 129.194 mo
281.022 129.194 li
@
281.425 129.315 mo
281.425 129.315 li
@
281.831 129.033 mo
281.831 129.033 li
@
282.234 129.235 mo
282.234 129.235 li
@
282.678 128.669 mo
282.678 128.669 li
@
283.083 128.346 mo
283.083 128.346 li
@
283.486 127.134 mo
283.486 127.134 li
@
283.89 126.851 mo
283.89 126.851 li
@
284.294 126.285 mo
284.294 126.285 li
@
284.699 126.003 mo
284.699 126.003 li
@
285.102 126.972 mo
285.102 126.972 li
@
285.546 126.285 mo
285.546 126.285 li
@
285.951 127.174 mo
285.951 127.174 li
@
286.354 126.649 mo
286.354 126.649 li
@
286.758 127.901 mo
286.758 127.901 li
@
287.163 127.336 mo
287.163 127.336 li
@
287.566 127.134 mo
287.566 127.134 li
@
287.97 126.649 mo
287.97 126.649 li
@
288.415 127.013 mo
288.415 127.013 li
@
288.818 126.609 mo
288.818 126.609 li
@
289.222 125.68 mo
289.222 125.68 li
@
289.626 124.064 mo
289.626 124.064 li
@
290.03 124.387 mo
290.03 124.387 li
@
290.434 123.74 mo
290.434 123.74 li
@
290.838 124.023 mo
290.838 124.023 li
@
291.283 124.185 mo
291.283 124.185 li
@
291.686 125.155 mo
291.686 125.155 li
@
292.09 124.266 mo
292.09 124.266 li
@
292.495 123.417 mo
292.495 123.417 li
@
292.898 122.731 mo
292.898 122.731 li
@
293.302 122.408 mo
293.302 122.408 li
@
293.707 122.165 mo
293.707 122.165 li
@
294.15 123.054 mo
294.15 123.054 li
@
294.554 122.488 mo
294.554 122.488 li
@
294.958 120.065 mo
294.958 120.065 li
@
295.362 117.681 mo
295.362 117.681 li
@
295.766 119.095 mo
295.766 119.095 li
@
296.17 122.731 mo
296.17 122.731 li
@
296.575 123.175 mo
296.575 123.175 li
@
297.018 123.619 mo
297.018 123.619 li
@
297.422 124.589 mo
297.422 124.589 li
@
297.827 124.387 mo
297.827 124.387 li
@
298.231 124.387 mo
298.231 124.387 li
@
298.634 123.458 mo
298.634 123.458 li
@
299.039 121.155 mo
299.039 121.155 li
@
299.442 120.024 mo
299.442 120.024 li
@
299.887 120.872 mo
299.887 120.872 li
@
300.292 122.852 mo
300.292 122.852 li
@
300.695 124.67 mo
300.695 124.67 li
@
301.098 125.962 mo
301.098 125.962 li
@
301.502 126.487 mo
301.502 126.487 li
@
301.906 126.447 mo
301.906 126.447 li
@
302.31 127.134 mo
302.31 127.134 li
@
302.755 127.174 mo
302.755 127.174 li
@
303.16 126.73 mo
303.16 126.73 li
@
303.563 127.053 mo
303.563 127.053 li
@
303.966 125.841 mo
303.966 125.841 li
@
304.371 123.579 mo
304.371 123.579 li
@
304.775 123.66 mo
304.775 123.66 li
@
305.179 124.872 mo
305.179 124.872 li
@
305.624 125.397 mo
305.624 125.397 li
@
306.027 124.589 mo
306.027 124.589 li
@
306.431 122.529 mo
306.431 122.529 li
@
306.835 123.821 mo
306.835 123.821 li
@
307.24 125.558 mo
307.24 125.558 li
@
307.643 126.245 mo
307.643 126.245 li
@
308.047 127.094 mo
308.047 127.094 li
@
308.492 127.174 mo
308.492 127.174 li
@
308.895 127.982 mo
308.895 127.982 li
@
309.299 125.962 mo
309.299 125.962 li
@
309.704 126.326 mo
309.704 126.326 li
@
310.107 126.164 mo
310.107 126.164 li
@
310.511 124.791 mo
310.511 124.791 li
@
310.916 125.478 mo
310.916 125.478 li
@
311.359 125.881 mo
311.359 125.881 li
@
311.763 124.427 mo
311.763 124.427 li
@
312.167 123.094 mo
312.167 123.094 li
@
312.571 124.71 mo
312.571 124.71 li
@
312.975 124.225 mo
312.975 124.225 li
@
313.379 125.397 mo
313.379 125.397 li
@
313.784 126.932 mo
313.784 126.932 li
@
314.227 127.497 mo
314.227 127.497 li
@
314.631 127.578 mo
314.631 127.578 li
@
315.036 127.497 mo
315.036 127.497 li
@
315.439 127.174 mo
315.439 127.174 li
@
315.843 126.932 mo
315.843 126.932 li
@
316.248 127.497 mo
316.248 127.497 li
@
316.651 126.69 mo
316.651 126.69 li
@
317.095 126.487 mo
317.095 126.487 li
@
317.5 125.316 mo
317.5 125.316 li
@
317.903 125.599 mo
317.903 125.599 li
@
318.307 125.316 mo
318.307 125.316 li
@
318.711 125.801 mo
318.711 125.801 li
@
319.115 124.144 mo
319.115 124.144 li
@
319.519 124.508 mo
319.519 124.508 li
@
319.923 126.326 mo
319.923 126.326 li
@
320.368 127.497 mo
320.368 127.497 li
@
320.772 126.69 mo
320.772 126.69 li
@
321.175 127.174 mo
321.175 127.174 li
@
321.58 126.326 mo
321.58 126.326 li
@
321.983 126.043 mo
321.983 126.043 li
@
322.387 126.407 mo
322.387 126.407 li
@
322.792 126.326 mo
322.792 126.326 li
@
323.236 126.811 mo
323.236 126.811 li
@
323.64 125.801 mo
323.64 125.801 li
@
324.043 125.356 mo
324.043 125.356 li
@
324.447 124.347 mo
324.447 124.347 li
@
324.851 122.488 mo
324.851 122.488 li
@
325.255 119.62 mo
325.255 119.62 li
@
325.66 116.712 mo
325.66 116.712 li
@
326.104 114.772 mo
326.104 114.772 li
@
326.507 110.773 mo
326.507 110.773 li
@
326.912 110.288 mo
326.912 110.288 li
@
327.316 106.411 mo
327.316 106.411 li
@
327.72 110.006 mo
327.72 110.006 li
@
328.124 115.136 mo
328.124 115.136 li
@
328.527 118.449 mo
328.527 118.449 li
@
328.972 118.166 mo
328.972 118.166 li
@
329.376 118.853 mo
329.376 118.853 li
@
329.78 118.206 mo
329.78 118.206 li
@
330.184 117.439 mo
330.184 117.439 li
@
330.588 113.884 mo
330.588 113.884 li
@
330.992 112.712 mo
330.992 112.712 li
@
331.395 112.268 mo
331.395 112.268 li
@
331.84 111.541 mo
331.84 111.541 li
@
332.245 114.571 mo
332.245 114.571 li
@
332.648 120.549 mo
332.648 120.549 li
@
333.052 117.964 mo
333.052 117.964 li
@
333.457 118.449 mo
333.457 118.449 li
@
333.86 118.812 mo
333.86 118.812 li
@
334.264 117.398 mo
334.264 117.398 li
@
334.708 115.217 mo
334.708 115.217 li
@
335.112 123.417 mo
335.112 123.417 li
@
335.516 123.66 mo
335.516 123.66 li
@
335.92 124.751 mo
335.92 124.751 li
@
336.325 112.834 mo
336.325 112.834 li
@
336.728 109.077 mo
336.728 109.077 li
@
337.132 113.238 mo
337.132 113.238 li
@
337.577 103.947 mo
337.577 103.947 li
@
337.98 26.1841 mo
337.98 26.1841 li
@
338.384 6.47119 mo
338.384 6.47119 li
@
338.789 93.1211 mo
338.789 93.1211 li
@
339.192 117.722 mo
339.192 117.722 li
@
339.596 122.367 mo
339.596 122.367 li
@
340 120.388 mo
340 120.388 li
@
340.444 120.145 mo
340.444 120.145 li
@
340.848 117.358 mo
340.848 117.358 li
@
341.252 118.812 mo
341.252 118.812 li
@
341.656 121.236 mo
341.656 121.236 li
@
342.06 120.145 mo
342.06 120.145 li
@
342.464 114.167 mo
342.464 114.167 li
@
342.869 109.804 mo
342.869 109.804 li
@
343.312 103.179 mo
343.312 103.179 li
@
343.716 113.278 mo
343.716 113.278 li
@
344.121 119.863 mo
344.121 119.863 li
@
344.524 121.761 mo
344.524 121.761 li
@
344.928 122.206 mo
344.928 122.206 li
@
345.333 122.165 mo
345.333 122.165 li
@
345.736 122.731 mo
345.736 122.731 li
@
346.181 123.579 mo
346.181 123.579 li
@
346.584 123.902 mo
346.584 123.902 li
@
346.988 124.427 mo
346.988 124.427 li
@
347.392 123.458 mo
347.392 123.458 li
@
347.796 124.791 mo
347.796 124.791 li
@
348.201 123.7 mo
348.201 123.7 li
@
348.604 121.357 mo
348.604 121.357 li
@
349.048 119.216 mo
349.048 119.216 li
@
349.453 116.914 mo
349.453 116.914 li
@
349.856 114.449 mo
349.856 114.449 li
@
350.261 114.853 mo
350.261 114.853 li
@
350.665 116.873 mo
350.665 116.873 li
@
351.068 118.005 mo
351.068 118.005 li
@
351.472 113.44 mo
351.472 113.44 li
@
351.917 113.682 mo
351.917 113.682 li
@
352.321 115.217 mo
352.321 115.217 li
@
352.725 117.277 mo
352.725 117.277 li
@
353.129 120.792 mo
353.129 120.792 li
@
353.533 122.448 mo
353.533 122.448 li
@
353.936 120.711 mo
353.936 120.711 li
@
354.34 119.58 mo
354.34 119.58 li
@
354.786 118.61 mo
354.786 118.61 li
@
355.189 116.712 mo
355.189 116.712 li
@
355.593 114.732 mo
355.593 114.732 li
@
355.998 115.177 mo
355.998 115.177 li
@
356.401 118.085 mo
356.401 118.085 li
@
356.805 121.236 mo
356.805 121.236 li
@
357.209 122.327 mo
357.209 122.327 li
@
357.653 121.438 mo
357.653 121.438 li
@
358.057 119.984 mo
358.057 119.984 li
@
358.461 118.61 mo
358.461 118.61 li
@
358.865 118.328 mo
358.865 118.328 li
@
359.269 117.439 mo
359.269 117.439 li
@
359.673 118.166 mo
359.673 118.166 li
@
360.078 119.62 mo
360.078 119.62 li
@
360.521 120.549 mo
360.521 120.549 li
@
360.925 120.267 mo
360.925 120.267 li
@
361.33 117.843 mo
361.33 117.843 li
@
361.733 116.914 mo
361.733 116.914 li
@
362.137 116.469 mo
362.137 116.469 li
@
362.542 116.55 mo
362.542 116.55 li
@
362.945 119.014 mo
362.945 119.014 li
@
363.389 121.196 mo
363.389 121.196 li
@
363.793 121.438 mo
363.793 121.438 li
@
364.197 121.721 mo
364.197 121.721 li
@
364.601 122.731 mo
364.601 122.731 li
@
365.005 123.337 mo
365.005 123.337 li
@
365.41 122.731 mo
365.41 122.731 li
@
365.813 124.023 mo
365.813 124.023 li
@
366.257 122.65 mo
366.257 122.65 li
@
366.662 120.267 mo
366.662 120.267 li
@
367.065 117.317 mo
367.065 117.317 li
@
367.469 114.449 mo
367.469 114.449 li
@
367.874 111.824 mo
367.874 111.824 li
@
368.277 108.067 mo
368.277 108.067 li
@
368.681 104.714 mo
368.681 104.714 li
@
369.125 100.351 mo
369.125 100.351 li
@
369.529 94.251 mo
369.529 94.251 li
@
369.933 87.667 mo
369.933 87.667 li
@
370.337 75.8711 mo
370.337 75.8711 li
@
370.742 59.147 mo
370.742 59.147 li
@
371.145 64.9644 mo
371.145 64.9644 li
@
371.549 84.7583 mo
371.549 84.7583 li
@
371.994 93.1211 mo
371.994 93.1211 li
@
372.397 99.5029 mo
372.397 99.5029 li
@
372.802 101.199 mo
372.802 101.199 li
@
373.207 104.229 mo
373.207 104.229 li
@
373.609 105.158 mo
373.609 105.158 li
@
374.013 104.108 mo
374.013 104.108 li
@
374.417 103.623 mo
374.417 103.623 li
@
374.862 101.563 mo
374.862 101.563 li
@
375.266 102.29 mo
375.266 102.29 li
@
375.67 104.916 mo
375.67 104.916 li
@
376.074 107.542 mo
376.074 107.542 li
@
376.477 109.602 mo
376.477 109.602 li
@
376.881 112.672 mo
376.881 112.672 li
@
377.287 113.036 mo
377.287 113.036 li
@
377.73 112.551 mo
377.73 112.551 li
@
378.134 112.51 mo
378.134 112.51 li
@
378.539 110.167 mo
378.539 110.167 li
@
378.941 108.026 mo
378.941 108.026 li
@
379.346 106.411 mo
379.346 106.411 li
@
379.75 108.552 mo
379.75 108.552 li
@
380.154 111.056 mo
380.154 111.056 li
@
380.557 112.914 mo
380.557 112.914 li
@
381.002 111.945 mo
381.002 111.945 li
@
381.406 112.349 mo
381.406 112.349 li
@
381.81 111.38 mo
381.81 111.38 li
@
382.214 110.208 mo
382.214 110.208 li
@
382.619 113.48 mo
382.619 113.48 li
@
383.022 115.298 mo
383.022 115.298 li
@
383.425 117.035 mo
383.425 117.035 li
@
383.871 118.408 mo
383.871 118.408 li
@
384.274 119.337 mo
384.274 119.337 li
@
384.678 122.367 mo
384.678 122.367 li
@
385.083 123.337 mo
385.083 123.337 li
@
385.486 124.67 mo
385.486 124.67 li
@
385.89 125.558 mo
385.89 125.558 li
@
386.294 126.487 mo
386.294 126.487 li
@
386.738 126.285 mo
386.738 126.285 li
@
387.142 125.155 mo
387.142 125.155 li
@
387.546 126.285 mo
387.546 126.285 li
@
387.951 127.659 mo
387.951 127.659 li
@
388.354 127.174 mo
388.354 127.174 li
@
388.758 127.942 mo
388.758 127.942 li
@
389.163 127.942 mo
389.163 127.942 li
@
389.606 127.821 mo
389.606 127.821 li
@
390.01 127.699 mo
390.01 127.699 li
@
390.415 128.063 mo
390.415 128.063 li
@
390.818 127.538 mo
390.818 127.538 li
@
391.222 128.103 mo
391.222 128.103 li
@
391.626 128.669 mo
391.626 128.669 li
@
392.03 129.315 mo
392.03 129.315 li
@
392.474 128.952 mo
392.474 128.952 li
@
392.878 128.952 mo
392.878 128.952 li
@
393.283 128.346 mo
393.283 128.346 li
@
393.686 129.113 mo
393.686 129.113 li
@
394.09 128.507 mo
394.09 128.507 li
@
394.495 128.224 mo
394.495 128.224 li
@
394.898 129.033 mo
394.898 129.033 li
@
395.342 129.275 mo
395.342 129.275 li
@
395.748 129.235 mo
395.748 129.235 li
@
396.15 128.992 mo
396.15 128.992 li
@
396.554 128.467 mo
396.554 128.467 li
@
396.958 129.235 mo
396.958 129.235 li
@
397.362 128.75 mo
397.362 128.75 li
@
397.766 129.073 mo
397.766 129.073 li
@
398.211 129.194 mo
398.211 129.194 li
@
398.615 129.517 mo
398.615 129.517 li
@
399.018 129.235 mo
399.018 129.235 li
@
399.422 129.194 mo
399.422 129.194 li
@
399.827 129.315 mo
399.827 129.315 li
@
400.231 129.719 mo
400.231 129.719 li
@
400.634 129.76 mo
400.634 129.76 li
@
401.08 130.608 mo
401.08 130.608 li
@
401.482 129.154 mo
401.482 129.154 li
@
401.887 129.719 mo
401.887 129.719 li
@
402.292 128.83 mo
402.292 128.83 li
@
402.695 130.123 mo
402.695 130.123 li
@
403.098 129.437 mo
403.098 129.437 li
@
403.502 129.113 mo
403.502 129.113 li
@
403.947 129.235 mo
403.947 129.235 li
@
404.351 129.719 mo
404.351 129.719 li
@
404.755 128.588 mo
404.755 128.588 li
@
405.16 128.669 mo
405.16 128.669 li
@
405.563 129.113 mo
405.563 129.113 li
@
405.966 128.871 mo
405.966 128.871 li
@
406.371 128.79 mo
406.371 128.79 li
@
406.815 128.709 mo
406.815 128.709 li
@
407.219 128.79 mo
407.219 128.79 li
@
407.624 129.275 mo
407.624 129.275 li
@
408.027 130.123 mo
408.027 130.123 li
@
408.431 130.164 mo
408.431 130.164 li
@
408.835 130.487 mo
408.835 130.487 li
@
409.24 129.8 mo
409.24 129.8 li
@
409.683 129.962 mo
409.683 129.962 li
@
410.087 130.204 mo
410.087 130.204 li
@
410.492 129.881 mo
410.492 129.881 li
@
410.895 130.123 mo
410.895 130.123 li
@
411.299 130.365 mo
411.299 130.365 li
@
411.704 130.365 mo
411.704 130.365 li
@
412.107 130.971 mo
412.107 130.971 li
@
412.551 129.881 mo
412.551 129.881 li
@
412.956 130.527 mo
412.956 130.527 li
@
413.359 130.527 mo
413.359 130.527 li
@
413.763 129.84 mo
413.763 129.84 li
@
414.167 131.295 mo
414.167 131.295 li
@
414.571 130.527 mo
414.571 130.527 li
@
414.975 130.971 mo
414.975 130.971 li
@
415.419 130.608 mo
415.419 130.608 li
@
415.824 130.487 mo
415.824 130.487 li
@
416.227 131.335 mo
416.227 131.335 li
@
416.631 130.729 mo
416.631 130.729 li
@
417.036 130.971 mo
417.036 130.971 li
@
417.439 130.608 mo
417.439 130.608 li
@
417.843 130.083 mo
417.843 130.083 li
@
418.289 130.325 mo
418.289 130.325 li
@
418.691 129.76 mo
418.691 129.76 li
@
419.095 130.608 mo
419.095 130.608 li
@
419.5 129.962 mo
419.5 129.962 li
@
419.903 130.446 mo
419.903 130.446 li
@
420.307 129.84 mo
420.307 129.84 li
@
420.711 129.921 mo
420.711 129.921 li
@
421.156 129.638 mo
421.156 129.638 li
@
421.559 130.325 mo
421.559 130.325 li
@
421.963 130.325 mo
421.963 130.325 li
@
422.368 130.971 mo
422.368 130.971 li
@
422.772 130.527 mo
422.772 130.527 li
@
423.175 129.679 mo
423.175 129.679 li
@
423.58 130.244 mo
423.58 130.244 li
@
424.023 129.679 mo
424.023 129.679 li
@
424.427 129.8 mo
424.427 129.8 li
@
424.833 129.558 mo
424.833 129.558 li
@
425.236 129.154 mo
425.236 129.154 li
@
425.64 129.598 mo
425.64 129.598 li
@
426.043 128.952 mo
426.043 128.952 li
@
426.447 130.164 mo
426.447 130.164 li
@
426.892 130.608 mo
426.892 130.608 li
@
427.296 130.042 mo
427.296 130.042 li
@
427.701 129.517 mo
427.701 129.517 li
@
428.104 130.042 mo
428.104 130.042 li
@
428.507 129.638 mo
428.507 129.638 li
@
428.912 129.881 mo
428.912 129.881 li
@
429.316 129.719 mo
429.316 129.719 li
@
429.76 130.891 mo
429.76 130.891 li
@
430.165 130.325 mo
430.165 130.325 li
@
430.568 129.638 mo
430.568 129.638 li
@
430.972 130.971 mo
430.972 130.971 li
@
431.376 130.164 mo
431.376 130.164 li
@
431.78 130.729 mo
431.78 130.729 li
@
432.184 130.446 mo
432.184 130.446 li
@
432.628 130.891 mo
432.628 130.891 li
@
433.033 130.891 mo
433.033 130.891 li
@
433.436 130.567 mo
433.436 130.567 li
@
433.84 130.567 mo
433.84 130.567 li
@
434.245 129.719 mo
434.245 129.719 li
@
434.648 130.244 mo
434.648 130.244 li
@
435.052 130.769 mo
435.052 130.769 li
@
435.497 130.688 mo
435.497 130.688 li
@
435.9 130.487 mo
435.9 130.487 li
@
242.041 130.365 mo
242.121 130.487 li
242.524 130.083 li
242.928 130.164 li
243.333 130.164 li
243.736 130.002 li
244.14 130.608 li
244.544 129.84 li
244.988 130.365 li
245.392 129.679 li
245.796 130.608 li
246.201 130.365 li
246.604 130.204 li
247.008 130.204 li
247.413 130.042 li
247.856 130.608 li
248.261 129.921 li
248.665 129.962 li
249.068 130.244 li
249.472 129.679 li
249.876 130.204 li
250.28 130.002 li
250.725 130.81 li
251.129 129.881 li
251.533 130.446 li
251.936 129.396 li
252.34 130.325 li
252.746 130.527 li
253.148 130.285 li
253.593 130.891 li
253.998 130.769 li
254.401 130.527 li
254.805 130.608 li
255.209 130.083 li
255.613 130.285 li
256.016 130.406 li
256.461 130.85 li
256.865 130.042 li
257.269 130.487 li
257.673 130.123 li
258.078 130.729 li
258.481 130.244 li
259.29 130.244 li
259.733 130.285 li
260.137 130.325 li
260.542 130.527 li
260.945 130.567 li
261.349 130.083 li
261.753 129.76 li
262.158 130.123 li
262.601 130.204 li
263.005 130.123 li
263.41 130.85 li
263.813 130.446 li
264.217 130.285 li
264.622 130.487 li
265.025 130.164 li
265.469 130.608 li
265.874 130.204 li
266.277 130.729 li
266.681 130.083 li
267.085 130.406 li
267.49 129.84 li
267.893 129.8 li
268.337 130.406 li
268.742 129.719 li
269.145 130.002 li
269.549 130.123 li
269.954 130.204 li
270.357 129.638 li
270.761 129.638 li
271.207 129.8 li
271.609 129.719 li
272.013 129.921 li
272.417 130.042 li
272.821 129.76 li
273.225 129.235 li
273.629 129.638 li
274.074 129.517 li
274.477 129.275 li
274.881 129.235 li
275.287 129.517 li
275.69 128.548 li
276.093 129.477 li
276.498 128.426 li
276.941 129.033 li
277.346 128.871 li
277.75 129.073 li
278.154 129.154 li
278.557 128.588 li
278.961 128.386 li
279.365 128.669 li
279.81 128.871 li
280.214 128.386 li
280.619 128.871 li
281.022 129.194 li
281.425 129.315 li
281.831 129.033 li
282.234 129.235 li
282.678 128.669 li
283.083 128.346 li
283.486 127.134 li
283.89 126.851 li
284.294 126.285 li
284.699 126.003 li
285.102 126.972 li
285.546 126.285 li
285.951 127.174 li
286.354 126.649 li
286.758 127.901 li
287.163 127.336 li
287.566 127.134 li
287.97 126.649 li
288.415 127.013 li
288.818 126.609 li
289.222 125.68 li
289.626 124.064 li
290.03 124.387 li
290.434 123.74 li
290.838 124.023 li
291.283 124.185 li
291.686 125.155 li
292.09 124.266 li
292.495 123.417 li
292.898 122.731 li
293.302 122.408 li
293.707 122.165 li
294.15 123.054 li
294.554 122.488 li
294.958 120.065 li
295.362 117.681 li
295.766 119.095 li
296.17 122.731 li
296.575 123.175 li
297.018 123.619 li
297.422 124.589 li
297.827 124.387 li
298.231 124.387 li
298.634 123.458 li
299.039 121.155 li
299.442 120.024 li
299.887 120.872 li
300.292 122.852 li
300.695 124.67 li
301.098 125.962 li
301.502 126.487 li
301.906 126.447 li
302.31 127.134 li
302.755 127.174 li
303.16 126.73 li
303.563 127.053 li
303.966 125.841 li
304.371 123.579 li
304.775 123.66 li
305.179 124.872 li
305.624 125.397 li
306.027 124.589 li
306.431 122.529 li
306.835 123.821 li
307.24 125.558 li
307.643 126.245 li
308.047 127.094 li
308.492 127.174 li
308.895 127.982 li
309.299 125.962 li
309.704 126.326 li
310.107 126.164 li
310.511 124.791 li
310.916 125.478 li
311.359 125.881 li
311.763 124.427 li
312.167 123.094 li
312.571 124.71 li
312.975 124.225 li
313.379 125.397 li
313.784 126.932 li
314.227 127.497 li
314.631 127.578 li
315.036 127.497 li
315.439 127.174 li
315.843 126.932 li
316.248 127.497 li
316.651 126.69 li
317.095 126.487 li
317.5 125.316 li
317.903 125.599 li
318.307 125.316 li
318.711 125.801 li
319.115 124.144 li
319.519 124.508 li
319.923 126.326 li
320.368 127.497 li
320.772 126.69 li
321.175 127.174 li
321.58 126.326 li
321.983 126.043 li
322.387 126.407 li
322.792 126.326 li
323.236 126.811 li
323.64 125.801 li
324.043 125.356 li
324.447 124.347 li
324.851 122.488 li
325.255 119.62 li
325.66 116.712 li
326.104 114.772 li
326.507 110.773 li
326.912 110.288 li
327.316 106.411 li
327.72 110.006 li
328.124 115.136 li
328.527 118.449 li
328.972 118.166 li
329.376 118.853 li
329.78 118.206 li
330.184 117.439 li
330.588 113.884 li
330.992 112.712 li
331.395 112.268 li
331.84 111.541 li
332.245 114.571 li
332.648 120.549 li
333.052 117.964 li
333.457 118.449 li
333.86 118.812 li
334.264 117.398 li
334.708 115.217 li
335.112 123.417 li
335.516 123.66 li
335.92 124.751 li
336.325 112.834 li
336.728 109.077 li
337.132 113.238 li
337.577 103.947 li
337.98 26.1841 li
338.384 6.47119 li
338.789 93.1211 li
339.192 117.722 li
339.596 122.367 li
340 120.388 li
340.444 120.145 li
340.848 117.358 li
341.252 118.812 li
341.656 121.236 li
342.06 120.145 li
342.464 114.167 li
342.869 109.804 li
343.312 103.179 li
343.716 113.278 li
344.121 119.863 li
344.524 121.761 li
344.928 122.206 li
345.333 122.165 li
345.736 122.731 li
346.181 123.579 li
346.584 123.902 li
346.988 124.427 li
347.392 123.458 li
347.796 124.791 li
348.201 123.7 li
348.604 121.357 li
349.048 119.216 li
349.453 116.914 li
349.856 114.449 li
350.261 114.853 li
350.665 116.873 li
351.068 118.005 li
351.472 113.44 li
351.917 113.682 li
352.321 115.217 li
352.725 117.277 li
353.129 120.792 li
353.533 122.448 li
353.936 120.711 li
354.34 119.58 li
354.786 118.61 li
355.189 116.712 li
355.593 114.732 li
355.998 115.177 li
356.401 118.085 li
356.805 121.236 li
357.209 122.327 li
357.653 121.438 li
358.057 119.984 li
358.461 118.61 li
358.865 118.328 li
359.269 117.439 li
359.673 118.166 li
360.078 119.62 li
360.521 120.549 li
360.925 120.267 li
361.33 117.843 li
361.733 116.914 li
362.137 116.469 li
362.542 116.55 li
362.945 119.014 li
363.389 121.196 li
363.793 121.438 li
364.197 121.721 li
364.601 122.731 li
365.005 123.337 li
365.41 122.731 li
365.813 124.023 li
366.257 122.65 li
366.662 120.267 li
367.065 117.317 li
367.469 114.449 li
367.874 111.824 li
368.277 108.067 li
368.681 104.714 li
369.125 100.351 li
369.529 94.251 li
369.933 87.667 li
370.337 75.8711 li
370.742 59.147 li
371.145 64.9644 li
371.549 84.7583 li
371.994 93.1211 li
372.397 99.5029 li
372.802 101.199 li
373.207 104.229 li
373.609 105.158 li
374.013 104.108 li
374.417 103.623 li
374.862 101.563 li
375.266 102.29 li
375.67 104.916 li
376.074 107.542 li
376.477 109.602 li
376.881 112.672 li
377.287 113.036 li
377.73 112.551 li
378.134 112.51 li
378.539 110.167 li
378.941 108.026 li
379.346 106.411 li
379.75 108.552 li
380.154 111.056 li
380.557 112.914 li
381.002 111.945 li
381.406 112.349 li
381.81 111.38 li
382.214 110.208 li
382.619 113.48 li
383.022 115.298 li
383.425 117.035 li
383.871 118.408 li
384.274 119.337 li
384.678 122.367 li
385.083 123.337 li
385.486 124.67 li
385.89 125.558 li
386.294 126.487 li
386.738 126.285 li
387.142 125.155 li
387.546 126.285 li
387.951 127.659 li
388.354 127.174 li
388.758 127.942 li
389.163 127.942 li
389.606 127.821 li
390.01 127.699 li
390.415 128.063 li
390.818 127.538 li
391.222 128.103 li
391.626 128.669 li
392.03 129.315 li
392.474 128.952 li
392.878 128.952 li
393.283 128.346 li
393.686 129.113 li
394.09 128.507 li
394.495 128.224 li
394.898 129.033 li
395.342 129.275 li
395.748 129.235 li
396.15 128.992 li
396.554 128.467 li
396.958 129.235 li
397.362 128.75 li
397.766 129.073 li
398.211 129.194 li
398.615 129.517 li
399.018 129.235 li
399.422 129.194 li
399.827 129.315 li
400.231 129.719 li
400.634 129.76 li
401.08 130.608 li
401.482 129.154 li
401.887 129.719 li
402.292 128.83 li
402.695 130.123 li
403.098 129.437 li
403.502 129.113 li
403.947 129.235 li
404.351 129.719 li
404.755 128.588 li
405.16 128.669 li
405.563 129.113 li
405.966 128.871 li
406.371 128.79 li
406.815 128.709 li
407.219 128.79 li
407.624 129.275 li
408.027 130.123 li
408.431 130.164 li
408.835 130.487 li
409.24 129.8 li
409.683 129.962 li
410.087 130.204 li
410.492 129.881 li
410.895 130.123 li
411.299 130.365 li
411.704 130.365 li
412.107 130.971 li
412.551 129.881 li
412.956 130.527 li
413.359 130.527 li
413.763 129.84 li
414.167 131.295 li
414.571 130.527 li
414.975 130.971 li
415.419 130.608 li
415.824 130.487 li
416.227 131.335 li
416.631 130.729 li
417.036 130.971 li
417.439 130.608 li
417.843 130.083 li
418.289 130.325 li
418.691 129.76 li
419.095 130.608 li
419.5 129.962 li
419.903 130.446 li
420.307 129.84 li
420.711 129.921 li
421.156 129.638 li
421.559 130.325 li
421.963 130.325 li
422.368 130.971 li
422.772 130.527 li
423.175 129.679 li
423.58 130.244 li
424.023 129.679 li
424.427 129.8 li
424.833 129.558 li
425.236 129.154 li
425.64 129.598 li
426.043 128.952 li
426.447 130.164 li
426.892 130.608 li
427.296 130.042 li
427.701 129.517 li
428.104 130.042 li
428.507 129.638 li
428.912 129.881 li
429.316 129.719 li
429.76 130.891 li
430.165 130.325 li
430.568 129.638 li
430.972 130.971 li
431.376 130.164 li
431.78 130.729 li
432.184 130.446 li
432.628 130.891 li
433.033 130.891 li
433.436 130.567 li
433.84 130.567 li
434.245 129.719 li
434.648 130.244 li
435.052 130.769 li
435.497 130.688 li
435.9 130.487 li
435.94 130.487 li
@
304.816 154.511 mo
306.755 160.327 li
@
305.14 154.511 mo
306.755 159.521 li
@
308.695 154.511 mo
306.755 160.327 li
@
304.251 154.511 mo
305.947 154.511 li
@
307.642 154.511 mo
309.261 154.511 li
@
310.632 158.147 mo
313.947 158.147 li
313.947 157.581 li
313.703 157.017 li
313.46 156.774 li
312.894 156.45 li
312.007 156.45 li
311.199 156.774 li
310.632 157.339 li
310.39 158.147 li
310.39 158.714 li
310.632 159.521 li
311.199 160.085 li
312.007 160.327 li
312.572 160.327 li
313.46 160.085 li
313.947 159.521 li
@
313.703 158.147 mo
313.703 157.339 li
313.46 156.774 li
@
312.007 156.45 mo
311.523 156.774 li
310.957 157.339 li
310.632 158.147 li
310.632 158.714 li
310.957 159.521 li
311.523 160.085 li
312.007 160.327 li
@
316.208 154.511 mo
316.208 160.327 li
@
316.451 154.511 mo
316.451 160.327 li
@
315.4 154.511 mo
316.451 154.511 li
@
315.4 160.327 mo
317.339 160.327 li
@
320.33 156.45 mo
319.521 156.774 li
318.955 157.339 li
318.712 158.147 li
318.712 158.714 li
318.955 159.521 li
319.521 160.085 li
320.33 160.327 li
320.892 160.327 li
321.701 160.085 li
322.267 159.521 li
322.591 158.714 li
322.591 158.147 li
322.267 157.339 li
321.701 156.774 li
320.892 156.45 li
320.33 156.45 li
319.763 156.774 li
319.279 157.339 li
318.955 158.147 li
318.955 158.714 li
319.279 159.521 li
319.763 160.085 li
320.33 160.327 li
@
320.892 160.327 mo
321.458 160.085 li
322.025 159.521 li
322.267 158.714 li
322.267 158.147 li
322.025 157.339 li
321.458 156.774 li
320.892 156.45 li
@
327.519 157.339 mo
327.277 157.581 li
327.519 157.905 li
327.843 157.581 li
327.843 157.339 li
327.277 156.774 li
326.71 156.45 li
325.902 156.45 li
325.095 156.774 li
324.529 157.339 li
324.207 158.147 li
324.207 158.714 li
324.529 159.521 li
325.095 160.085 li
325.902 160.327 li
326.468 160.327 li
327.277 160.085 li
327.843 159.521 li
@
325.902 156.45 mo
325.337 156.774 li
324.773 157.339 li
324.529 158.147 li
324.529 158.714 li
324.773 159.521 li
325.337 160.085 li
325.902 160.327 li
@
330.023 154.511 mo
329.781 154.833 li
330.023 155.077 li
330.347 154.833 li
330.023 154.511 li
@
330.023 156.45 mo
330.023 160.327 li
@
330.347 156.45 mo
330.347 160.327 li
@
329.214 156.45 mo
330.347 156.45 li
@
329.214 160.327 mo
331.154 160.327 li
@
333.093 154.511 mo
333.093 159.278 li
333.337 160.085 li
333.9 160.327 li
334.466 160.327 li
335.033 160.085 li
335.275 159.521 li
@
333.337 154.511 mo
333.337 159.278 li
333.658 160.085 li
333.9 160.327 li
@
332.287 156.45 mo
334.466 156.45 li
@
336.972 156.45 mo
338.669 160.327 li
@
337.214 156.45 mo
338.669 159.843 li
@
340.285 156.45 mo
338.669 160.327 li
338.103 161.46 li
337.537 162.026 li
336.972 162.269 li
336.728 162.269 li
336.406 162.026 li
336.728 161.782 li
336.972 162.026 li
@
336.406 156.45 mo
338.103 156.45 li
@
339.152 156.45 mo
340.849 156.45 li
@
348.605 153.462 mo
348.041 153.945 li
347.474 154.833 li
346.908 155.966 li
346.667 157.339 li
346.667 158.39 li
346.908 159.843 li
347.474 160.894 li
348.041 161.782 li
348.605 162.269 li
@
348.041 153.945 mo
347.474 155.077 li
347.232 155.966 li
346.908 157.339 li
346.908 158.39 li
347.232 159.843 li
347.474 160.651 li
348.041 161.782 li
@
350.787 154.511 mo
350.787 160.327 li
@
351.111 154.511 mo
351.111 160.327 li
@
353.857 156.45 mo
351.111 159.278 li
@
352.482 158.147 mo
354.181 160.327 li
@
352.24 158.147 mo
353.857 160.327 li
@
349.978 154.511 mo
351.111 154.511 li
@
353.048 156.45 mo
354.666 156.45 li
@
349.978 160.327 mo
351.919 160.327 li
@
353.048 160.327 mo
354.666 160.327 li
@
356.605 156.45 mo
356.605 160.327 li
@
356.927 156.45 mo
356.927 160.327 li
@
356.927 157.339 mo
357.494 156.774 li
358.3 156.45 li
358.867 156.45 li
359.675 156.774 li
359.998 157.339 li
359.998 160.327 li
@
358.867 156.45 mo
359.433 156.774 li
359.675 157.339 li
359.675 160.327 li
@
359.998 157.339 mo
360.482 156.774 li
361.371 156.45 li
361.937 156.45 li
362.746 156.774 li
362.986 157.339 li
362.986 160.327 li
@
361.937 156.45 mo
362.421 156.774 li
362.746 157.339 li
362.746 160.327 li
@
355.796 156.45 mo
356.927 156.45 li
@
355.796 160.327 mo
357.734 160.327 li
@
358.867 160.327 mo
360.804 160.327 li
@
361.937 160.327 mo
363.875 160.327 li
@
369.935 153.462 mo
364.925 162.269 li
@
374.054 157.017 mo
374.378 156.45 li
374.378 157.581 li
374.054 157.017 li
373.812 156.774 li
373.248 156.45 li
372.117 156.45 li
371.55 156.774 li
371.308 157.017 li
371.308 157.581 li
371.55 157.905 li
372.117 158.147 li
373.57 158.714 li
374.054 158.956 li
374.378 159.278 li
@
371.308 157.339 mo
371.55 157.581 li
372.117 157.905 li
373.57 158.39 li
374.054 158.714 li
374.378 158.956 li
374.378 159.843 li
374.054 160.085 li
373.57 160.327 li
372.439 160.327 li
371.873 160.085 li
371.55 159.843 li
371.308 159.278 li
371.308 160.327 li
371.55 159.843 li
@
375.994 153.462 mo
376.558 153.945 li
377.125 154.833 li
377.691 155.966 li
377.933 157.339 li
377.933 158.39 li
377.691 159.843 li
377.125 160.894 li
376.558 161.782 li
375.994 162.269 li
@
376.558 153.945 mo
377.125 155.077 li
377.369 155.966 li
377.691 157.339 li
377.691 158.39 li
377.369 159.843 li
377.125 160.651 li
376.558 161.782 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 16.0.0%%For: (Hiroshi Imai) ()%%Title: (OH_spectra_Etoka.eps)%%CreationDate: 2015/02/05 20:27%%Canvassize: 16383%AI9_DataStream%Gb"-6flCT7dO+)mi&d$`W*.W=#F.n+71H)m1mM%:M3:sR9+jgYe384$7s'F1^2Wtl^2Z-Li@DOXJ$e&*9jbEtkcc/+r.k4f`fsR*%f#XP4rkIh]B2`?DDdc0^&r?`(-l1F'mu<*Kj)M3sqa0.^ns3nKD;EIkNftt/\*?JkNWL[*QKqsaa`h#0JXqsTr]#)CFr^[u<,UR-%^Xa=Z_fkXcf'07p?^gB-6@SloC*UJpI7-l2q2<tM9Cjh4[?p1WF0<$aD;S=X0==EYrEAUNFeba@U2Jbf^"6U4p>96GC@-_fiu+5#%hN0!Y4")\F/H1[Om`kGUU)_dr>uXpj+\JN>^3B*=/-ho8I)C/*%CMA^qQAf90>==\%f52]^@0bNa_sEDr&6k?p@!J0m=5*1kJ+sm%s8;UUs7X5*r:;"ZrqUK9VH>"qc.6[<rJYeas0I,8moc`B-ahRW9=7tK/2M[OAEPO36_D5>L.'Q=-lqhWceGUlpC)sD$Q*%DX^:nJ%6@Pt9IAjP&^K0+Fj8**p"*D`72#9e9*50,:g8BpV(R7\7,bHi.YPD"A@3kDmje_gp8rjSj4t5Ecg4$,G;>W:ZhRiGm@j1;,%]D[:%X+/XQ5m@Rr>2uE(7S5[R(jSp/o/`nNY3T-FePX:+P.m.39p=b=#G3h]S.&-q;KktO*hl+eB\+?lN<S--$0_Y2mEKhQ+_Y[.j[h[-%'hY(eT+CtLZD))X]<qhn3tejl4[EbgdbZ_'i8b3d?)(TD4@<ReH$Ko8B<?n\;Qb2D$[LM#4k(gnkL]^seiL@9LAmSfrcB.Xl216s%I3#8`M>s"kIVP>HWG0eYPmVu0^?%<kjZ*%%j'\,3@$K\N.ZgOr@uTkd$kc\b^[:n8jnfmK^YqtI>$o=Kol^2pqDs)2^5aq5$@Z0X%i/WitiocR6I>=,UQC!nmk")-(2rV;]k)/pIUMudn-V!&U5u$T">U00'0t9^J'A"0_6/TY(_OpT>XqCZO.8`:VP];]P-a#E-MlF3]%3)@[kRQj:#HJqYYWDkP\g'<t7nsFH[EX@6D2egNNl"SgbfkBf`jNpAHT`6\Qf+3AjP\:HQ>17,k`UI5n_Y&NsVHfh`iqhV0r!V,:%[Qjbe--$_tM,Cd3pli-1PnM5@RQo(0A,qr9j9OCtQB-&,UF>#M0=9lKoXNth>VofV1:.id^d!do[0+Oh[DQq3>19CZIeXSOW-mY%%;4c-YnL)?7g?"27g!Fpkk@b?)\j;':<^>AXaf2(4=b(r%D+aV!91QNfo;-iP-&37e]$[fn']`"fVsi*toH,YFm?pqBBq&&XckItj%+-k`V\'oPA7Hgj>cN696Z;7;9j?AYir,s2Md*mVJ"tg/JJ4g$8`,>n9J?hLe+^^ZjI8e`Tndkbs>#Ar4%"g_MrmH:@nA>3W^[tm9%B\Saar2'EuQi7KodXRiYIsW6tmBM/AX7T!QQi:2nUVDGroO"b'/lPC3Qi>alTYH,ooUj/';14JZ%Y)oMV8(t*rJTrR=R28Y.;Ngt%ZKfF-L]80fUL>VUOn:b\)ul+!BrTLhdnr\T96mi>j)6:-KPe51OTmf9G1kO+['_"sdjK(#24B!I-s%m9)>scNNTD%-e(;OQ5oCg,%9%dZfQqi_Ic!.NLdL^H\AM[@)@NGJ;GmcJ=QRt`;e('W?\)U@edj5^#[r5EUBZZsDL;j-m(`(M9A(AI:([;0<>F92D)?3LV6`;fd%_[`$)aqfFFs5e1*>ie#NVj-@jO?U$R1k-tiq5Kg+XpD#U\nRJS-aDLEm7QtVooep^3T-.Po_I7H3C)?b6%)$+/%j_MV):BNl:,m0%>h8hGQf6X#f8.o[WBf=)DKAqoA-;[p>R'iT$uuVgLU8/(QXM5a\696.G>JeAGEpcQ&'=pCQcgQ<(+pIgcAT?3JXf/qLiG#b)8`qA%^h]oC+Oung/S5i>V5%T/H3,Z%IDU;DT[tA\.$Y=QYSP_-dboOj2=qZK0$pU^8?0jT&u6Ym:r#r9oe>!"qZW/.U]tTL6'pR)piBV.%noggF9Bl7<>C[^JL2G;"#hh]//ha-K;q9r.Oef:'LijqRQMS,<1PPfH8.4KE;rW,Q%E`3#W\-P^6d%eh<!6p@"3j3u:m&pentu()%rtqBM=@G_TGXcH,!p=89-uWEMf$;WH"K;[fO)fp$.j-Ec`.2L5^T"fijg%>O%in:GXi`Mf<gN%Wm=e2.lN_^q)Bt1G3,-Usg.p(D%\3+U*NistlTAecL=H;^/T;^Ak3ms1t0r?/fQ3qROoNG([kW3L[_;AYEA\*T='Baan0?Yf%]n,kiO;1>K#4c%8\O&;Ms20"0r^OF`%HT(h>\=@<=^P#rbhG=[GF&MH6Q#0]oJ.KJG+:$>EW1O6^.JQ^;*H+.u>;>bLPe2I@6,!Qh@j4q>QQX'%[T;r/Pt4:gr>2og'h]o0%7JIppGLlegjp%>kG)0AFJ$PmDqHqD"6;'h6+oHML=UJQbnttG,OkpP/!\3_lKl$t`8tKqiGBaVu.^R3PNPmXe)g;Uc*/k(9"8\@n%"h1MRBHW913j\:#T<8I-!%XAhDImkklkU6k&D3YVOJ:P!<r'7V5DaO//0bu``?)bY"kJ1m2HV=`Db)D"K2VN(,C!]Mi%O11]Hu94%5mkGU:@'q!]S+fuoTX@=U:+3EU[`m5^@^0+o+en"45^]7Cc>^iO7X=i:7`HW]'h69hBp!Up6u=nDd\?ADP'&]D@U%1dA+s0o=_Qf%ptj4hY!+]2CAG3iICIn4s0_Q^5IgTAISAiN0+H0R`#k>#DP=iA2uM\UrR*>nbIKG<rR*AOK]I'<WqFqB@RcWLC:fe0&(-m--i?\g%]3P6iCqg1X;^sEN-7u0)ikN77;VSk6^[Vh4I.[.5J#pOl.'8KKDmbpDX-TqI*qE[<m8eOQ%UZ5qC-,5T;J@6eP5[QBpd<2aZSo?b%]Ck&X-<8QK)9PimG?Upca=@CfPUcbW4N`a_[JQ1qH`8kD3`;O+"]=6DI*,J]RTt0qa7jgIV4Ct/^NZ:?-dCe3:^#T777l3_'amC7%4A.=19:2N5PPo,oPXG".j.J]--E9>"ftni_]L+pdoierWG5"4WOs+pfWE+:q*riuURe>sh9Du,$D*?G<isN02nhYN>OEhXlXS#La%RVsj-n;l25k"EDZ.M_>EPbS2FjbVAMXL>b6qj6%,+.[<:27)r;2]h6tG`0tLM4!><<4hm#]CidZ[9]s^.QH5[hs67,Uf*61leNK*%!>tkh]J1U[r)@O`82[tS'nSR1$/.>Z*"WAQ\[c6DT][,=q?66kkl1*Mlf@1m24B#/O<=:P*8\g,TDnc[^\mo:J,Subs7,9Es70nS%5JLQRXlX2:o>gOU(1K@XCAELP-7mF-q=?'[*9FKmR%UXRYNB4;!W)<kqQY[er'7'mjE3&hQiD6*jW>'0r$Y&jGf\-nEA[\=Q_-cK%"StdVKU<>#.$ZB>eX%1hDGp>K],o+aZHn.Wir$!j[-\ukpUS1!?;)bA0?pq0mrY>Y.`;btlpjfmNBX(b'.<An0eu?l+iYeQapbm[%W%EBQ&&454iEu8)]NM&are(."o(1W"d3Qk+cZ:?dM=\@0`oDF=&TuZ:$[9cs!KT1kXL;op<FYpRBCi1kG4gp;Cg>;qo<.DRf8j[s%Qbt."2^7E4a^,gqHUQ/P>jo%+WdjA8gX#N.jNkU>\%#^`"91=@bC>i0;.hn+eF/k;W0\W54Q\#2hk;^e1b[AK=-"a5DZLJDE)_0E%Bcb[W8SJ[(SN8A]H"oTq4NkhDP0WZ*6`N+1\_TQ7ES%;#+&MF*^;"cBnpOo<PCOeBA#qfMgYGB-MI\&[jnIAn#'rCeZtR(#pYN#p%_G0NXP8HX_!p]carpnF=0d/6<&AV6BdJ]iZ(cOJ3khQ):D0J1:k(e*rTtaT7h>rQ!SJYU!BF=gcrj1e5?(L<de2&c`0bJPN.['$9%'%'&ZdXLN7BK"k-/Cs9dH2h,raAOr^%]T7/XM(3-qb6B\YMQtBZ3Yno9E'"tkR5.:mckYcGEu]C^&.P!\,#mpeRZEi%Mq0+Cr0X[%"K@E_iqU^o"Y.\[Tq_I?cq?IXs7/s12#]R\K?d-grh$eT[S4GHC5)aYF^/5P;LdmoASGQWr;3L%h(_O1ml>*iHE,L;T<dYhNr8e*%$_fmaWqC_9Y5%ao$kHo@WQcMfC,<L/<kfg`;o?+[gbl^b,1s#Gn%u^s]iO*9rX"P_7-u!RhqRl_&u,#B+9'Y1p%L)UCTUfh5h=;T%jmWL+a63Wsojj1;!B_=K>thCb>LeK6m`(qur`\\O.tZYm27j3qqGLsXBklQ,H>(i%9E?iiIIj;[$amR:?[_B$o1.>+[tY\rPpD2V%$OWJTDP.;Bo=^WCUb:d4BYDm5TjdaY]XW\5'*A(,<jbqCk<&@gGD&ASOS_11FPG>8Vc?1QFoM]hZi5L%J$$gJKQ1#SqoRaU#VbD<%1+^>$`T.J-12+^-k[V4/,*Rn$_Z\VsD:=M8l9YMLTgAcXZ+L(J@sTIlJm39/gA%f(3>VE=[,5<(eu?',X6!,l^N[f26M7M\;XaSc%m5JZn+nqb9Jr@OsDN8JA6%>q8?CK.4=g_,q4<Y"RGaaS(RE/jYH`$5,VM,H[][U4kYJ%Sbr8-NU#UDP3NO*r/:.p)lX`diq4l%K2%>F(jDmkljULc(j)\:-*1S2=G:&gHADr-''^LH<BP9>-#t'@6H&7ud>#H:B9Y`e"#2]CA_prO@%.CbR#OI6/s[n\>s_C!Ucj)S2QC%Z;F=;=*C0LA7K2QEM_O[UgulH0g6u:e[*g=(HGBnZV)(;ocSk*'2dg_':'k2_.jW(5PH,M09a/OU0$e.P^rO$$e.K6[p$Ctf1D>X%:4E()s5!_IJ,dE9pQ'h'kPt=lrV'CP'niN^O:"dMW0qNen:DRO<N&gMX*($/Qp_.6Hk<"[p8mo+_0`YF#,^I*-?Z5^Pr)pVIU:j5%]YD*E6-g+#&K3eA/)*Tl5H6kWcpheUdp(W,NbZg2otIlgG^Nq-dr6<d.G`6V=GTb?+I/1<&67LU?sSLuj_8^[iM^A,f5eRR%>;ob%a-3fcW[7b))'hP4\3i<(C>7\1EKL3B5294jHZj3C8\PG3l9-4Dj0<-dOUXq8,[jV%08c:_>"R(8fsjRLe=<;BkBhLV0Z`(+6(MsN%gMdQaY'`2\Tm0$hMmi*j^h.(LE#e)H>lkOUlY&$WOqaB8"s/\'EDj,ms5'`S-FojHOmW'EDq+>`A6ib6G.R)'F0-)[3s)qGkgo@H%qQFpP+"HK&Zi*^I#gYC!oD?e8oGCbP(F`-^7bo\LU;&Mn][+Tk>;%!+[U.rf0#(a"\eLblO@KtA">qi6!)Gdta]EK(q&D[?Mb&0[%fH=@1#18QH&;?b^N,-IR>a%u3]G95;U8AJ_Nm,tcV>2u[XH]@_TqS_-Np6A!_rL)7_r)6#d1ioANFGhs-GuS27PW#4$g)ntAmeNt%lO@=liZ/#-*j`Ko-DsCV^uG1*B/BR_Gun`\+)>Ojq5@g<K&OAB0/(GGc?$[ALT:,#O#&8e>skIWe8Xs3a[e7DHf6=9AD!n[nM'e)%TgnNDYV*^<I^g\IRWj!D=<;NB';M=CCH]BqQdEC[p<`a:^%C0\+mWkPs6M.K2"VD@BEl4>4`S\H.G:.)q[1Y>HmNet=9:!-gM<UR%d`.VMbrX[IdKA<V6J)UhRF5".222W(6<W/Z4hRN009+20C-?*&S1^6#2khS'eS6mBI-qihEbD8#Dau]$_?l,8HoFk=-2RU`0+M"&%V]_72OF<3"fkiKo'g?sm&_RZ"pG>#N.gb%X5Q@dVJ,TsCs89>js7UrhX]7Ucr7=15p9/rEq-W'Ps2dM'j8]$as'Pg'^J8YbS9@8!%ro*54'jen46rkW[eW_YP\AT(`8/)>e\EoBDgdA2BIr%N_r$#.l*HQNSV+?-]n+E#N#$eQW=7<k(>FCbXe/[FN^U-YDQR3sFRgh1Y%FKs:QTe72(LW)?&C)@n&NC\0gTnKLRI*u-4b;eF(A.Ld[gOEe*+9pA*]C:toJ`QZ08eaIDq+^?L7&)ef<X!36idOP'A*:T!ErSYB%Y+h<\L?^6d1#;\akcp/I+)7^?C+Ghc%$se616C$)GU(*nI-Cs;K=Am5P$A'dg,nL8=l)FghlV*J=2N#7`=9OPnRIJRejTo=5RQYf%h/&oQYk_<i(.noB]1p\s.A^Cu9X3@MY1i=9A8MGO:W=4Gplc<I:=7k&]bD/."1Tk#3=RJQ,>';t2nGi@QXobZ0s10DAg9nA@9D^k%%f3%?eQs7qdGJ[F7QEfjeZl6Fd-.#uU\7e!2I+:Qn;ILp`B)*RKQ1\hBdBVLU>sb'gt`OdpeIg[KMOe5-#a0CC0`snDkOCU7RX+#%UYI8gs*Ldlq11+L.T;"8[hVuE&Vka5OYJgR+pOX#W:gX=e.7_$6pk3gQIno0Q0-=G^h2mr6,O7!-_\Kci8G^=+t9+(jiq=O"&8GL%nk]pVqYo?]:Cn(p@=AFmP*GKf]MiZ(@-'CpRS?Umo7m-D_.oFoWOAf9HH9eA8X>CNU1s*ab,jtF)0CJ\(M-&[%%_["Mf)B/=Qd2D%r?G`'0*%KtVmNus[5-:h+O@Mui>#e@/NR5)?jYr!rd4%oYh&e["/*#56@D_#mHOd3#Y>jf>sq7f2PDek@].LdS%_;AIFX\FS>\rT%f<"1?l$78-;9/dqW2a&36BJ,-?af51@F*VHos`WrR\JA;0==g1!>9Ef"Q<L('G.DNN=NfOLM+/C9G]/1;6kM\^:ipejVjFkSEe=]%II#00TA@b-o.t`71WrR"'7Vg>`Qno=J+/kU,7cu*b9u,RnooTTH#*'9A$u5?]3+&gNL>htc;S/OYc&@1,@A)gYqZ(I_^WgSO*:t1%MgLqIWS?m<_T_noEFF%Z]NgiQp'bfp3hAa9fm2,G=78%<60uJbe,`:+A?S^eTt.@Md9cjeH!+64\3;pT/8eQSaO=B+'k"N"DB#-]%@HQn::17c+D5f5bTTok*a3/+L3H%[1"Z\$UX^,&_r5X^eT$(cI@s%E@p>oq&q;?G<>k:Y8q<GVA?(AO/1u0g^p->53MWD=VF]2L_%\!IKkCU\ZZH`LArrP??qUHZA*GP>.\?Rod0/+[&KZ>aq_DYgi_F/u*Og;E\SR:k5_h#;P,d7UQ!48\(XC)=m.>Tp.QfB1DO>m3X+%gqKk=ZV'A_pHGpj=Vq[L;4?ruS&Y?Em2c&6q8..^')g0;cP>29;rp0bH!HT,C?XKAYL\N70TBDg)aZoR9Wq3^EbqWHBCiYSA1H3m%6g(n+p!u9ca`RL,3NC@BOdUC*07$m#>Gtj*ip(T,>o-#N3tl,K<`Gs`pY4-KjPAJ9AQ5O179a(,1.Aa0ffGm<hM:QKFJdX.V,fTZ%q]&bfO\0D_GYm9ZMTQW)o&aV,2l<b'ketcL[27GpVsVZS@g?X-'kZpU(UIe!-dZX01KP!mlGD0dbOfa_6>9Hc`8,eaRBlf@ApW"A%3kIJ2au!0fmk3DJV[nj[,[3.Tla`5XfM(,sn&H*hR4]8Pg7<qc%`oF.Qr;O'pY%ZXg7=5GZnnt/TuU\Y5>=kReMa0X7K!Ctl@i:/%[J`W#O&R1VZ(kC\+=^<lEckB=aj_1[4u`2d8Z'%-W34]?<SO%W4c@U-;d5fk9tD.'m-ThY0!e5)jsG^SF%+MoQM7MBQaEn7Qd6Bq%e$"\`XuiQA9W(7GDUk3&;r*aCe(nqLX!CV+^.?q?]"62uQ0YqRbM(hFPolR]p=mI,O7rR8Ot"P-A:+5__MkKFan/O!f[O@crALPo%hb9"tBDQ>C[f>a\e0O=E;0>$kBKX:HHMmE'l/.:j2motfX[OO7PRG`Zf.<Lo<YdnhBA2&WM9Y\ZAojaeQg'(pAbd!'8hI?OHV5;:%f:T7L+u?nnGi"J*oZ)[a:f0"0,I2IVBigjl\`c`]J$`MmI*[bqoO`HQ&Y!LHGW\nI2G@(U02Ap7qWgmeVV_=-87CUpD?FI]n>:At%pD`j]AU7uaO\A>!Coj'$\m(^PR2Q`3P?Uq^Qb1u=oYN*'F>bu(h#)C9f6;+-:o5>hU#E+6rXnfqRVd7o7]C/(%J3RUe$TR3>?6Ha%mEXro!G>RCl_No.W9JVpA;Wi2T'aaWXV$>#\u^CM;cM^lbM']WR@7Unl_!63a4fqG>m"`>WASOrf$O0no".gsorn=(@?"j0n@>>'%jWi%(m0OfiC=O7n0%/>8piUX$GcH_Dp=@2qrUh`0m3cc:[eLp@'Iho0GgoZd/Q!IGc`@r9o,fhkBd(OGDkPmVB2<s0GT&T'IHhkk%03mXsZ-PRCqWKj:ku78$,519$1&gi0GT*krG%V`:7dSmAG6d"i`'-=$\\HmVHHO6onZBdZ%Xn>)iltQ]5+S[&pq`Qe,7Eec]:ItO%m*i<3b]=^_(@h;qnSZ&Ps7EV0n1jY$D=Q=#$_E)4p7lueg5:=Uq92t<*;fC$\[$;top!T9WmKo>G21ik*Q)&AO*u?3\3&Q,HTGIM%hnGV@kLfRLlJ>eup?@UB4JKkZ>qHn';[]iMZa[<$O4-qkKujkJe!ZEGSRqM:]sO_#4h9C=?B'8'3+bBLO"GuE*.Id!HMQmLJb[``%4^p32F6rMBqV:_Sp+Z#RSS>:^ieocRX5)@#/VA>8TEU>C(_X.;otoLEImGHKkbEfFQ,7A5BH;SM6)r3Pj"kAK@9A!/UU=LbDiY_K%*tRPeGb>kl0k+kHS02lDd]`/i9^#4BHX:1`9dJ'Ba^bY<pO/1e2`b=GGW1=ugW0T)@*s(/:/]\QVDF.Mj6)e'S^Gj6f#tPd9Wa5V%6)J2J(UHP_cjr8t;m#V=s#;o84CI#9AP0)p#I1G_nX,E;\%d);AGRuD4rRtc)1AM*nOuZ2]h<9RYMXqOJ+H+/ldS@>VMMo-NS$qH%bTSH72SS+[__oqDan4RB^8<-?NYS08SiI):^8We'cQ/UO1L2PrOttjaLrtrbj2<-u@5&TkO[X:7[;*sAm)_3;&6%n%+'t^]\Y=to%IXc41VW`uQ?#Q5TUuL_g,'R.M0n$<]C43WR_`^CRf0r;AneH6/88snI<SlJ(\VqW6-p<$n5.WEeI,p/XXiZ>32V#iO$+"cR27;)r%.8H$OQMdki+/B<<roU[F;I%`]S?jXn-Ck%_7Zi,CmPRT,HnGU@"Q_pLqq.WSOPG4Ol)i2pe]L>[E?n`BZB#KHb;>P[Z,3t3b>@9K%6hGF>X1J%>i"!0jR5u*uE&]I+:uj^d0KXH?IUJ<9P$BE2NW&6t,2Kn-+OT#72("WsmD*'r4X>VpO>,M#H=-Q6`cV-p$;]jG&bVVA%&."\*L2%RTO*iV^M/U/hOlZ5ZOiA@%24T\II8Zb*VXJ5km2,QoBF?^S8Z9G+G[Y:Ndq_/t,UjRm'?*+k=Wcd8,qEAK/t6Bg?G<91%S9VcSGpVQ716'!XV<9[p[BKR)^j!=p;OJi3SuJsZ\_`DeeeH.&*a<.7Ek<nYOGf"7^i?B#id0_Z#%t/:*jIQ.)mf0hnW#Y9_n<UK%;gY@>\>+Bsn`E8@m:%?OC,r\B;,oE=cVF0HW^]015E4]D+%6ni=%#J+cbp;`6EP!XV/b)_+^s7n\XYNe/!MPR[8p7\n5Sm^-j/pm%U7C+9NMF@]Q^)1B13PD,d]6jk>D"U6ZUKd]$b"(F3;q?sq$=:D-(28rU(c#9L\ut(E8QupPPa0X\DL::;>i,Xf3oUFU9rI5oCkZ3%*7\[toi_4_D+7WC#`/`5Mj#*PR%9bsT_JUHB]-f=b6Fu=U'&B1%ab!f$RM#GeYTkq=gFmK]1uTW=0u0*F?ZqGK%:Ys-9'%?\4I`"%e&Jm7e\cG7i6P^WG$n3a`[Ha"!$c:A>8Lg$Amid8^71K;>KPGpXr(_7L"l?1;qBD0bh?h:_lcl_@4&^F?)0P:KfV2&V9)gbfq=PL%9&=eq#*3CRb>0rGdVOB3"WPEK_]hbNTt4'4D'$D$S/<Mogea.Hg83uNj8gR+>i<.b8F.OG'%7f?;XCu$.XBJa,0+5Rehb?MU7g>R%mEieZ]+hH%U1R]L\qm_R[sFGL7LmebgA+Yj7?7`ZG''qS/rpFC=0A+/NV,2,NnDQBAS_`-\Ej^FSVrX#f[:'!=<_sT3db%)FX)PK%6`<Y2>3NA^Q9)hr:FSi;R%Yp)O;'8X?P%*ZihAuPAT'\^JqU_K^p0iKiCqH,osf]]fACnA)(rSl=V>dr*sF)3=.Qsdi6FgL[^!bh%oT0)pC4pF@A.'0!;BM%5]kEPDm,35nZ5"j`8>@%:5d$KnYe'*8PDA66"X%LXm9UJlEr@>LqJhPgcL`qd6',6\M]g<2s07QM"MY@M%5HOZ.b?]PVWjA,Df,6Xt8$`/*7L90dnb(&+kUmq._-rs6,dVg`iY&TY%\>2>A,c)4gr4Ke/fm#E9D:%^R2sE3+\D5Nm&2O>[5?g)%`A<Dd$iY9=[btXB`CV[bd/9h_'8*kfG4;)X]r7qSlQY0$!<q/%Q\X\HmL?Gi,<:!)#-X+LV@#N>3%nQ:1Z>1hMk9i1&`X7.9U`.\%;$A]R)U'-JP9^O95k6bQVY&$CC.]^2&B7&Y6P>kSN%+]s25T>XQRaBge\^KYZ7oh^0-C_1I-OJ&qe]7_@9PO")!n<</:=&S;pGP<%rY-:M;SCId3H'=Da$&;UR67!jm)VP#('PiLK>g0kHs3l^<</YUJW>cf;2e)UAJ'-NJM(g[aqY"o2Kl%:McCGMrXE*_7*?b_Ut<`#%#=DKu8*)2=qn07,`;).5-/3[23ng,H'7XePrfY+TMA(p4Hp-\(gh?t!U`ccT%!f'YTtb^1M.Cu`<5oR!l+%$gV33>=]M_&D8KRVH%R7BH0R']2IGn=O*7Ws^MJ:cHGg"os]Rp>hq@?=q3=CUUPTaWk>.APDa)IG$GJ(1?Z=db1%5SH"YkBSPQd5oT&bBLLuQGbgnbfX.^%)D)fFc;04nd7tF9-LQ]R=ehO"eS%O?')"s/6)1,Sb6:<U.%On.QHPlF!#c=/a<[=m2&](5C,LfoiF^[gq)ZfKAC$AW/85<:n2XT1%'RU^[Q,5G*_(J,4k6^t(0s-cGfRuChGS.SFW+EDtHMKic=6rl1L(cX!A6Ig9U1Q4JIY^lXim(ufS^1bXe!WpEdVA?MVH=:kSkdqF%O%i(6_(+[XYQ[?e"\kpOXLtI/PIg94V`L1Y''n(L/aXWY7RL.m)0Ic([(3:3IFM@IbkTc:N;b5KMa1>?r_(aC.*q[oO+q"NmJEie%0\H\h'C42_&%Cfb)kQL/3Z@!Y9-+JINFFl<XS.(j-q;W&fY/`47#Zg3Hf7lO8_=so1D[uFR*2t17`4;l&@]jF9mEKOdsBl2'OCTi%8M(bIS!#[*"kt_?Q-`5eei^ck&XaM8J$BNTpMT68qY<ut^%Ca2^3u#_aj@Z+W9p'tC^6#'HVL"BTscL`Z?`:se'O$aEV+'2Rm^d:%&s3I9F(JtI?La49e@F^._pWjF^/of)ga(-H4+E(BSk""-jhfm.f_Ve<i`?/D4'.ZUkH6VBh6o9l]QOt?/j4'M7u<XD+$T'%_aB#8%k4WCrn<JR/,d3crA?kc@@POGP6J3lcqI$/UN7#f`8s-DM6nY'6[-IqVfoj&#Ln%VP2P;G(4;R&tT5P(CB@e)V\Q/5>a3AJ^MSk:E%99,[_FW!XW?#g&gb%2tUFNG,:TkM8+A*B(#kj[7G_hb"U8W9=;P!!st?#g&gN><KrL+Xt)+G)3i>-P1I]&X,XLdiICL+YK</r6_N%/;>c;JhG^11KY&kEWdDj`qtXeP;X[6_uUlR<9+eNW+iGKf>U6f-#[qJoh_ToNSDpe`jrU;!4?#Wo;9u)(K3?\ktU8<SGi>e/<BMp%9p`0*=&rU#^$nUXA/n`1/I?73::$"*PF7$lIalZ;MA3hFQ]tVC5-/`%@U_gT,Ngi60BB\/O6O/Fo>sGDoh_StcW,"8kqd"U-XB+6%Nc&C`%$KPu\X;d(W`Hj"P\i3IZJ.@iBe7Jj`>GqtrDaYT_KO7Y>rSb!DV;LN`6S*SS+knsNbb[2)%tA18SQ"YnIoXlmPU7a2mM\[%RAV35P-[VkA_D[3X"-(R_TmC!g[p_!4]Er:PMT\RR;pr-B9$M9#URDG2ND]/A(4quis`1B=%l`@cJUZ\(=A_eQJs5Wn"-t/K82@i%E#<,/`Aor>GZ7kT33]b1`kB=\]k<<a8W<e`98e9;Q(1nFTkX$_0OjrQ[R*-:`jO\r<.JRY*+-i0prr%N&"Bj01FhNMEu^h(:5as[%U]R`B;I]SnLdje0TYt;lA9tGT,4U;*/1k>.-]Y$XM>"e@jY2AE&lW7Pf$5r2UiUibXA<<t9K$*5jR\@e(^`<N9"\E?[YS'&6V0Bf%T-Z7-g`"d*rjY\Pc<KR3#A-WY51g:-]uR7VP<H_e)bNFt&BRL3,nSp%&Dtq+@::U9EbYu9p@MhWXd4)J(>ZlIJ6R?W:M#<eT0Jka%Wc(!`8hO_#MmHYbKn<VPG<UsJ]h5LR(HS7lr0-6F_X^N^Q#&t1LIJ&n).G>rBu!U)7m4D,iZk2/UI2?-[\J.r:o%@$LE?J*4*-IL%pE?Lk[b[^*-R!MH?C=ll\3KhNN.W>9;N@-\KeduEa@$f#plo_#>1W,3<[91I_CdX:HLo3+ZR"3K;[Rk^??c8<aJ^l&1UopZfth1@%4>&t<A=GKE@gf.'X<&8KNlJ#cS\[HE."TKnh&SY3Tr!$F17Y7qg3c_X%,#j0o02[++WQ&F`Nhopj"?TOnK+*_i#H=C,nAAH(7p^u%QNY#J6mK^W&n@1DLRQIi2O@3P7[6%/*g>7QeGE!qQp"MaONA1tRXT,kWnP=#b+@H@<QhUX0:+#ZbGW=(mo%a+0p52Ha^LUtl4Q&#%#1c4X>hoC,f@_R,)<:A"5t'[,PRB<GP%0+0e8=N,iH8*n90KI3e!a_fnSh?HZ1I!aa28ALr3<VR\83oYBKR8qZ]HBjqMqn<M21D>%LMD>/E1tr89kVQ;E/Dto6]6^mh$jPV$ks4BcaZUSeJL7e:>>pn7)TNr*\O^'L)(:9]uHCU=U3!P%3AZ5LUZ7/M.C,X^aE:kEGQ56%,(&bTSS,9Q1Ea%<1;#oIYF$]%b%t8IB1s[G*!o2jYO=uZ1PA:O]TYXL,tX"O4mdJ@_0'a8DflS<[N3[-DptC#cP(6'C%I[Mh=.Ml%)78b>gq7;0D/1n!MKcq=H7ZKD?F5m)->0X(0u)c3Mcg4#8>cLK!5EQ%pW5OE-0b'VIABE:N;FRB9;<O7S9gW)gc"KfOh_:$Tn+:4%_(Rr/)tm_!i3OIOe;4d:qT'3bL^t7B>"!+Jj<d'H[+C,`lH#O]1<;-U<?kDV$mQthnng>uWApGW7&8geZ,%Y_E@Sk^8B'g=*<RnG%aVj*I^*FbgR^1%kE_P_PEtR6tHk=&YUg\3rgb/tfM\sE^5q$!hZ_.O2Ki<?[q(E&.)fT,O0bfYo.q;QDE'iN.ga`NFrK9u:SdP\=%%Ckd8#<mhN_dF:3(s8:r,5cb#K1+.En@>pJ/uiI)Zm`hLNPMem-Zu7IOE"0uF0]^'-?R=Jdc*U3W>]L_>F&!k8]LrY<K;:%`XdC[%_9H_W/gHFpTt>1tmm.D/0>9;]2C^rB!p"sWV1Y\jQa>sOY#l`nGi,Ip@k6/rPGQ0VQ20jdHKA\j]dSB4>b%%nDR<JG\"&YQosN6H%qYJqD-[Z6:E=2uGieu#Lk&HPoZ#[g:\?j/k\+mHhn+4Di-slIeE?FTZp7sjb@^c!ZFE+S4N/KbZ:C;8lR#fK+[6D<*>P*26d9-0I%m:on'[gAI?cM:AA<26]6Ai`%Q2:r@F29g%s<!'j)-5.Tig@)M^G\=(Il-/.Bf=2)JB6<djH,#<M0()q1KH4OkCJogkoAh/Te+)8J%dmJM9>qP;)^<c!4R;VA@gPf_4=Mt&U'71hY`TL'uU@-10-f:;]04`"L+SYB&,H]/FCq-H3MIT$:Xs82MN)8-.]YCD:Q6b@-b*Ld1%$[/BZ=sH'JD[mE6,Mlpq[R4'fR`+)noqiEPA^=@C86ss3<+XD+ODg;?.MB%NLO>:j<7CO$L&4or]L=T$5>4)TN?aU;R;eEoY]?.V%moq,aC8Pm?`d=koh><L]fgp/^\-F&kWYaVf.T6++,?^G+\n*pDJ(^oG1\+-,Gt,d$iE^39NM_VkV<cG<P8$_-2%Lh$hP!Ef79(r"%q(Os"dm[7g2tUdpfKG*ZNM]@-j;M2Y?&I6[8C;NVZ#kDa&<[Z#(DTTpkD5W>9c(346[IijUZl53\;)%u(U^4bnpJW3U?U*87YVRN%(DTRZ)u&'11gO'3?,EUTT@%aXK+YjAGA,BG;+1g^Esrs]-aXuIp2N%RoH-dDeUG'gYbUHWP*/mkLCm5s'h]>^1X^J(h-_5G)GQQT%@fo6M7E*^J`Nd?p\u8`B`#,PhU?SC'cfj$H6)*V<@d2D<rnu1G;6)"RoPKUO7ajdPTUlEMGVi]*4/]0=oFXe6DP8$BjN/Q5dj<6h%A(f7N1gQId2lVr4]gpO?<@E5!;2eA`295nscsmY<Y!9@A41ZjnN/m=^8@kZRF5YMOI,Jh*FYVNsFkNjS61:i^plrb/aMt.GbX;Yl%aJJ^GE(jlD@?Dl<e5"lGE"d)sVMi0e/nq53_X2AX=3rEcMMk.oL$IpVjeO*Ze[ON,.G=TdM]"hA):>b(dns^Fk*Y$u\_'"m+dlE/%?$&#-bhBD<S[]agZUpa3c!Ag^,B<)=s-c$cG7f>P>n<'KdF[1H\3IOMC[NC@35ZQgp#MrQMR_fO099SgfA)LPNm]PklRu:1n-TbC%4RJlTr\o224q6J@.s(Mcca*L'9:Wu!JPYSAf#:gb12HtdXkLgppq7"t>YlePhYlfK-@p7@*5g+?kgUWtd5t?+0;sfc`6hL_)NHM1%hfdYi-8Nda@R-haElN?uXkV5024b'qR4=g<Pr-u:XS6NP^1IZ;9&6%uKIS:<U5.Q$.'ZJ6oaJI+:f>tiF=2!C-CSj$OcP.P0hG8'%CSnIf`cNsFH+@C!3^*2PW)VDD'7Im+LPljp[U@)of[[dkj7&oP6lY!^J2jg*_nKT(FJI8r;.eh?(!B4\?5\5hA+W/E.?It!4J+i&%V5p>CT+-;e$&9.]U7Q_e6Qe`qm+ZC^ooU\b@=%UN0R2J>c"b"k76^EZ:+3(en*8,gc7i!"T]u)p>BRmP%['Tbj]]@b<BZ=DiU%eQ%+efq$7!->QYQqngDV3,AG=h=ipl;uF`"S9(.RVor&V%](:Y'dJ2r'*2+,A5Q6T<fnIoBZ,nO/3mjn7L?`DfY]9L#/!(cU5i%?p1@%S3Cl$bBg0KNdg9nBW==Y?+pb"YSJN2RlM'n%qZ<Q]mS!aX%p7l)=`(3>LIM=iSJBgi,c%l3[oA2bFU5Ic9Uoi<0*/`iWIVTWE!I[%/=Z2&GbZ(h/h_[1.NHApoN5Q]>aV#jFi/pTP_N!q@FDi-$/Mi++=7_0GF`b;=D4k.&>U*+4-e.XbI5:m-^H2JSPS"F:6#cn>+!O^%.l.;_&WS_(*3#33??mSRJWHC(`[J!ZG+V&oO^<b5`;+WGL1,puQ*P+K0r4U_)F*nf<t651HIk`KB8eqX4t.\WYG8'@gZ;mhf0*H%%"k`J"l7=j;>poGqWnqX9S'MZ+)RX]R4M;ncW,Y$VY!J1*7m/6=\2"R+DMVRW3ksTZ*ZX^Yp$njUXKShPmsHRFeom(sb;70d+.K_q%%f3VZ87VPB0.RRQ`6q2E%Qq\;/,5.X2^o#NIi1A+;%[f=dBe`ud8_LM_mZfKm33kuDCRCIO.84(mU9>H`O[NXc=taS0pt(tA+%ao%<Ep*l--9,jqW-;DQ5Q=Zk31FGfM![$mn/X5BH"<e=]F!P6>5)H*?PgDR;g3!HN[%h`c5a6q:eORNNQT0Q[%Oq2*US,X*e)5<&,bJ%+/0aWrUOf1m,(N(VOM'jI&<C*8&#D&.l@`2$E[8`4\CV0qfJ]G8ouhLrS'<6aK7LXT?d"G/-PQmqVurMS@Pdo)C>rnh+fW)Ak6oR%U"S6-L.PA-$S/m%K.khE%%Z\jdjI?+-#T1d:HUmY[AW*YT^m%S+Wu45@rc6]a?pR^r=cNBMVhm/q3J5W?;?>i$XF?'ZQ,!LL9m4/%E9G6ub`^M?<)112-.iNl_PcG$],NLqV=h:).NndCZpQY?FOP'seAEo@UqJo:lE6I`pg]4Megu.$Vj.s=(Um%1[)]I,4oW6d*rASd%@@n;c9k\IH4LIYt>ac.e<H.Q]&>g'gmHr!V_Oc.Zf,K-![j!eT0pf0\-L86ci*II8Q03H<lUeGirir.:(q7=^Gm7M!^>?rh=jCT9%!Z^hD>'c@gOCg*'Zf5L[9SULH9d:6CXOTpZb\V29VD?(MEj[[(_bP3e?#U-Fo$KqkNW@#!KVS#I5-sk$&tO3O=2fInD'4)sg<'%Z%Y*\@\oCu80ZCDLMK`\,gM9d/4VU!*b#X@n?cT)9DZ$9lC>,W_(EN1lK=\@"hr+>og:r%&I4ccGYmq3.79Y9mcBKt3XigH&QW09Xe%Ls:toMn.NNGKG`R77Y(!XI$ki;.VGAV8i)u_Qeb'"?fgA]Q-"4a*+T.Qu[ntKr#O@Stc:l:1g9h9$87ZQo,(%r`"k.;1MeZ!$gr&%c5["T2$Ql<,p7@<'UqM1(r4dHYtS#F=^qH<glWKs"dh.O0Q+'\[OAqm0nALC<_6/=4jB,dNWREC"%_RqnPOfeZom;Nol_eA?oPB&%D7YtdZA*HM+$LXDdu?L+?q?XTEA-*#]p(0JNt)%c5&m2mT-BBU;EibApT#q.$V'2aGq!+XpK.'1.:9sg4t`(`?osS#Un%rp@bPi^%p\MuuWo!$mB-^RB?GC$;F2HU,4l,FjW2FfnEAeNFf5L/,8m1TTbA]Ah&FT3a^==n6fhffbqXkD,3NQ>=d&hb:P2,B:I_7M"\,*'[%Mgk-flTNCfT6pO2,m%uWMr(G]qn7I#<Qf?2AYshQdeoEK\^rM1<^5PdL4SdcbI0c\d!P_93+?EoXLK'aOF-qhH`oP)lMk2*jFJr3%*p_im^PFI6_QA8p?1]0*cL1AKi9)3!]ma+.5nA.B*tLl#][a3hqtPII^l>mcDpYP$Q!=2"mnN$)?GGRgA?"b`B=uhLGsOmg.L^F&%?h-mMmBtLL^"6%0=6N]"R(1b>n+B=[Vo]D4?GC/`3Ujp3`][kHf.S^*D.mo"$+KcQ[Ukc7LZj*`HLCZYh<V!,m$DY`)sBK"q!7!e%]8nW:]me)4q@+[<"5iD\5Kh$H\iDB3KAGj[]Wi4F.]@=t^#&(AI%H+>02K@WqC*Rh8gfRR)!^En^T;`tY^?>sXRY9)l^,7UUUU-q%qX$K3I=+Dl(,Os?jaKsC#k-86\;H@/17W^i,%_/HM)n#6f.Zr#^YqSWSYr!Y-1$F)k[)#71FF/Fhqu+rag_*UE$&Et;7K3lnI6WY%T&&ZjPl(5RUN"]V>XdH6f5iWni):Q\?GH"+P'F%"ONTo`qMF#^I&im<`s0*+06s=V@)3=pY@$k-?/jM`@\2(RrHe-@arJS]GL&%J%b]p<unu[?d!b)H0q?9<FP).3.k52[?08Q]%Ntq'^?G@mg&.Bom,B?TSqB`H\gLJ.2f8ju(157[I;=*m\^V4QPT'l8E%[\Ll<^XCK%00(.Ugi#3o]me(UKA[bML55R1)sqFhi,EWRH\AA/_^oXgKhbSm[!:2?o#?"^>9n8E*4RE='BMgD_cloh''=#SA7Jb:8h;AJ"1Dn7%#;o$@>jY1*dG7R0D02?VBNWq:b^A.ee)nuK>meF<</%TjV<sF(fdP)%Iqr2!qe;t6oQ'&C5+S:8H_$U-HX"t-*qr`+hqltT_I`B@%=afN2mE1gjiI,3`n)3TSIXAg(k1V-IhV5*$QTg\g"abIB\m7CD5$`UshK-CnS^dB#\$O31pTZBP;c`_7aN;i-kCo8Ao4DibZLN+u%^(oBQ%;3HFAUeu7badI1ElI&4Dqj#Fmn]_9XQF)2JM\s8ls)S73BesXB!,2B`oGh,bb@,&U/fc.X_F'hpH.*+1OdhkhtiQ(Nq[+s%1OAHDFmQ_YLHH.;AEMqMgm=27l]30KZ*:\ZoBjh7o)kkM7dCViO%:-PI,2L+=78A_n6jGCJAh1R^>J4pl.)'T*PsAEWa%8d(1@HJ%E-JtN2TH0#Y&Q=IR]K96%S+jZSh,jYg@LSL_g6\PI<d5'i(29:#RrAucaKqR>;GX82+UDM@C:,r;Ui^$%u>D]PWb3^V>Hpc*Nfbn%F2?;=:c5'"Jlu!e$0Q&<riUROqs!(]\_P[&%o;ZfVX`6JZSu82]bYZeT6YU"LuQDHb(ne>S!8'g[CP$prUf3pc-42\q%isahE?68%O^(@gl#_?q^1`]JOZ)*f`4HFq\l?SmgSG5OVG@hc0WM,,5X4(='$Z=Ka`\'jr&@>uU9Wre)uX"p_4(/3?(%m4(jd;rG"\;RcPGCg%P?ZerqWu/L%2AH`Pk`&_<r%@cn\OY;4b#.%4M]\Ag9'm8oAVj6ogf!H(ERCq^#>o@rFqC;3dCtgrE8[,U\0^!njauG/G,r\NNHkr%eW8s!Eto?Qd#j&s53lFr8,27[1$uTn)9gd[ZP7FEjt8?YKG5CARPk%mm\<Nfm.3?ai-oqjZgBPApAXY48J[)]/rjCicet1!1>Ig+%;f`__l;%Q&(fSU.+)ihSn1s^bg.U[MHM-e,qeiQ=rj5rj%KqbQqq'p9WH&X2RPD3M=c>s-.QuqW:J:6LmRNl.Rb^+HX)20koc@1q%hoG"$?QTb8>Uqt!?fUGMH=acrS_(:FMef+?6+frDU$C`NQOD!'3Pn%Vr-9<DCgZ<jm(]4#n#l/NCL;0q`nFe@W7f,H9`E;Rm=LPS%q!dPk_H3&_broe9YOh8W=,h\CU^_6dX[?g:Rc8tjo@V(]o:)r.5Q@s?\pU@+Anp&LR&:fTa2O$@IgU=7m;,I<_;%ekPu:eZi.LjU%R29b_^+,!<`>kL2^hg\N*uA92nMd"g1BO@4^@u;LRMA\gc^!7kMtQY"2cZhnm%&E<XR*[T>4$4DTc0e=N\)m?<c4eKI8(ZHfhfD;%XL4H*AlsQf%Ffl?o#o&%kG?/L/*l2B@l.9"hON<rn8bngf$o<V=@;Gf1)5O96+^oTA7pdA++Tlp@=^"=hI.1)G4<t+/om;S/oI.l%5n]5P!f&'RG\iMLn`8bj25n2D7fpTuk&Fopc(6X9><?pCWG28.FQ&^:l7?9Qq0p"tWO=:*JG&&PKZ]gYg(K9j`>%plqA_-HUiFqq%HX;%:BiJ&KM+#-BgKM@??@>)&`mu'o=dodtR-At9X?t_4FNQ\@,<aOkNsAWS'#fORUWrET;1E(+BJ*?B=_qh$SHB<;@*0Jdn@/g>%T,O)OGrMLOI]n[Y0Jp'A<gYdJqS94:*a^@"@9ocb[K"c1bhSOcnAe^@eu7raT2U[F$\d9?lg;REr5;H@k4?YRIX57d>;_c:a$X9Y%msM/ieS`\KAdc']fShm*k*=uVbu[")3.hIh,)uEU\?*>_K9)t8Q&Y(r`q)g_D>n_?CuXYfp#O#Oan#-aB*W.XacVk-j[tB!3H'Jr%L%gZCS$VZr+`jOHou_Luj`g^4dbJSE<,Q<W7TU*A(O&qVb19\jqrc6:kruXeVf4LjefK^.EkD;?lR4J$N:Qq`Edp*!/q4s]N@pUa%jZ?H3q\rF=eGADE7b)@_;2WD[3bQ?.KU6d.kc"^O@"u?!mWrr*-:7*oFio]OK>WtT9%gXkZa(Ki^@X5BbcEuSDp>f,R9o].q/fOf%*Sn0U^OL(T`A0T6jlU<i:fd<rr-B5b3k^s<;!*j5>AfVYeotHR;&>K:iUV,4bqhLqFCFoWARV?7?[JB7r4K:W=P$X2<p*Q-gTU9F%V>R'kOe,*]a"Guk^i\)F]lKiXD6:M^daD"J7Up!FIP3@%-52N0V>'LHmhJ?&AM7&EWHal)"h2Sa:XF@*QTm$\o/SQEA@;6ugRMH=%XD2j'@W\k/qpsK?C317fH9\).F)A!@Nsi9m.qgP9R$q?N/^/K]f7g4#$W=-ec^4ED%E"NPTuNnE5FVr">s29U[BoTPHs";5][(=C%B:hA*=)PSsKoK="i$i_[mp![<=gp*n2B/^'<u25_^@C$+-PLpXqU:Lrd'gRc)EG7Olia>be$H<"n%C;g?cs/h<pLWf3aG8DD%uGe%$n#[T%=^W?9U6_iYs,53qFg:Ym]!d6Pp]&Jeg?,]W$RC39$a71C1%p;[+G0'.kNMt&m)-/*-pjc--b*;Z?ELf3nr(`<pr9A=3A]B%p<Mr>F((g@[F2`lh/[E-=2(<65&@U0mLJTM]Bc`mHhHl9A\Qt@>J&]MN[t+-]i=OBNZM$#]\47ZqXFKo1qQeog1SFDo(8g=$\JPl%k/kG?e6`=,_cnt4G"+P41\IqIX!_Oeg)k'Yq\dqunDq<#*UR`DWtVH)2nhJ74;#jHD,>%TX^_aT5a,/q>B4%^c$=+6fb&.h\-6d>%.(4SQRE_8cm'BX2HHd-sZLc$`QV*0CO@I"5=$Gt5+8(_pBLKdB:MB__W8X,[HK(imrIU^o:c$aUV=mhPr6EH%U+Q8N)2D`O%;?B-%RJ<HK6aH@b-g;)Z=H:q8aQ=RPBZWFO7g3iB!tDm72YO^D@)IcpSij`cfmi>:#Ctt64cClOR*H_>VL1L(#;tiP,)7%h@c)i=T_@rO%]5Vo&kG,l2=[=-fCM9@Xh'YE'([&AfBE[#D70Cm+m`Kp$q:"VpI9JtTc.OiJWDs_RS)o@pk_#Z/P49hm!MFU-<k/*&<u#kI/,#WT%qp(V;$d6/i^:s;'dC:`ogkeeUcl,!MrkCP/7#u0.lH@K<*ib,T9P\I!mT!YppQmpNq"THjqHROUH\qD(oUc#::LiM0o&f)TB0<nm%c*s9J\p"epC]7Y\fA8rdhYT2V2csnATd\2n,&KljHKeaa<]=$>%3T.HFj^!49D@_XF3/_ZCErT-\MD9/d(T;B>c>F,mY."^0#Tn\%nci"_ib\G3^b3>!_T^WRQ,:b'<@Q/K4RD!u'8>,;+'7*I[u]-85%*"!6"0'P4.9=1-'\pu1^e@drl$O1r?4<^A8cgZEK_?QT42b(%J%q1ik3!h*VV:2QGlU&t<5h]e)(`or-Sa[5k^M?kRBu@u#MZ`Bs5VK<r*pTi*j:EUo,_AYP@dU]]d?N$I\@91IJ-//A#N$pDY<07%CUDf\P@a'M9LpZ4aLeLs<MF(T5qZ=;q8D??^$okglQ@G?l^M%Y4($XCNUpnoO#a7);<tAL\Q?0Q+)IV+hIbCm4T"fp\!->l]L-+Y%D>`bR`)o3l^;MdMqVsW#+\07HD@5U^LKWma&tGUddRI!Y<Q0BoEqB2a?!2TTrlEHuaZ#I,9Vk\_GQjR8X)Gl*$=p'WYAAGq>Q3W:%(KPg1@De:@8)qdrD0XLqGhi=q%8WF`S^mQ%)P/cIS\P*>L*qu*,.W/._in]Y'n:5@X5hAW)kIr@h;oN1H&pWE`HU5"?.Zs4)F=n1%,Z2uoibQm>[(=`C<bE#\mUgb51E#4b4s"W)J73gi/nROAd`#!hJs"Pb5In,=fP3_nI<49>+GnjIR`,*ZiL=5-Ndip0KGkD*iT%m-%T:MQ'p[XD(^C]5;j*%c'-=LeA$^*KH_SAKp&4ah(2nD/`E\h,t]rnn*FC5_qrlsb!%84PPUK69L)=;][#4KgCq9H[/cia[,RG:TV%0B/C+q(c5%@Y#Sbn@%5l-InFSNZKXh@<RfVh%-\ZdTo#_Va%hamc/nZi!1(h/P2-l]:9\+o,DXU;L@fj)t0%fPBUM,Q[3emg;LVp%AZ\pH!ls.*37@q?V:GB"%fM8ic/aoiV3,7WmYiJH@DrqJ:g>R,!Y_Y\_?=26BAq'?Elec%6+M'\=`?qp,b,20h[VUZPcLNj'dc>R%^g-[t3QYB">s;(SA9+=jd3_eY!>AS!`%XL4SYPXqR-_"NIGug1\gi^;3$g,s'a%$`Oop#j)&6WTi0c=9Gh5A"g`Pn%ah\,T/nheT%a3W/-PaI+HMb+65;(O%#H5Y'0AY9i]J.9t'O2.652eTF^JaA'u,pA.V?e(h4895[.2h1Ks%BO\E4dCTj(GQ5;b^Z3+7&ZiU&p#UN%&sIFmO6GEAI9S[2@oAQ7*g-dA&>cZs%5SmCV49phM4d&/8Pq*MP7Yp1Z8.NaW9/cI^V''kJ0_"MC(c,'p*84Rj>>d9j\eYoONLZh%TXlBYH@]=9>NOm,Id^K.`_?WRVc?LCGZc]&<#M1J,\%.gRYoXCZA^(V&L1dgjIFBF<$5]Lp%YLsbm-"iS:i"prH-X?;9&I67\#EC%atf8^M@:_M@A8/FR3c6_Y2oe`jUo$F:.tmjR9Tq[,)8f'X8B2g5ou0cl1*5*Ulqc11*WcVCV&C8R7t,*5AJjKgmS[a'4_gC4Q/_k%YBW4k.p`D4.a/r-c'$1)Nc0E?0fX8Ma)>+6C%Mgn\!^RS5HqA[apelK4D^0GYoF45eRosGQcQ7m7<(MPPfVTM9OGCkE+Y[G-e54U%PO.%b)@h8PR\KV+T6S6ejfKEoF(#]NP$9cc%A+9;CU#/!T.Y4/^1gg3nYK=@<jh8"JhFT4_#pqH9-7f"#M$*PO76P*/lrH&)/EST%Qf6?cI.0C[,$I%Sq1EJFp"K='*RM`p2qM]a"-a1=,ilYL?,AojKCm=J%#ItNlJ]cFH>o\/d&#jQ!r@2P&u9qC%a%,F$Aj,K6<m_>%L,PY!HZY;7+h9^K,LF7hc<qE!n2?#MSs!W^C#dDZIP^0]Nh>j[k%$r;m!KX'Tt0=)mMsRF(31Q^S?I`Yjn\3$pqgNNij?#$@JpI+%_Dfe*MarlE3@(g[\a-"'2V*KpUXGp+5BD^FT4r&\qs8[!Q'I3[8U:3l@t=s``OX9H2JK[0Y/hef?Z&?$G[49#?M1<H??ZW"VJVXD%[I6lRRFpDfC\llTp([As9kQbAGLsit^Puieo641JT:Scl5?K0;f!Nan,fMca9F1K?50r)7rhdN@lTj1lN/?ZP-!$Jt#?,kd>qg3d%Su\i/T8_O<[j&b6^,j-jDXDc8qtcLT3EUXu7QnSEZ;c+!+mp9T'SI!C?j<.(U<Ro.91"-=B>W*1f(;[bAJ0EllL=2W#]N>X*MN=P%IorDmf\NmVo[M:opM=_XYB%6VoSK0VZ(a/t=52Du_'+8/%eEVhCNOi#?>Gp93c!7jo>N/7Y<6VV/tP:+[>)90Fbf7]qT.VTaosV%%#F%l<:3'H,ZRonmTe<R$IkJt/>@Tm`W7L'MRco_e*7qc%+t$aU_oYR4UaCN]](D8$bH:T-F18S7*j%OWS>!?$j,hXUd[NG$2/[]h%j>?Q'bcVadXM@IZ6l"&ffJ/_TimR2*:O&l%;b7Hjf3!!fWkrqF=o0C+#5-`C+l/67Lne]m`Oo"?>>CL=qIXLD%mBg]4GpJ"[+@[#%BWiQG5_[$tmEWIKb.4*^k<2<oo(,B?0=CL>]DboNjC`NUEq??d\pi@XBNEipg.C]+DRk&mr`X)Zo*bBie`6>iD9jidm[F_E"NPo'%Fh.46A!LG2/Y;)J3=T]@GPSkcq7JS2oW_U!Y$ETX)\](UMgD'RnqHEfGl$A5k2s^rKrN&)9tUS%<1%r<36&d)jhdOrB@,\-Y^[qh%XB<:FX^/<c^MdEo<Y)?/<,G-doVgc_%m,K5c*sOdjF^J_bT/@/iNZY*"Z\$UX^,%Rgm3tUi^(dN(-*k#3EN"bbTAL0:-XcOBci$O%AfgmZ*pkUkN]S[\d)Paq,1A^\[0Di0oB/-oB'WlkKQiPR7dSnXU=j3j/s:gK&kNkgpZM`?5*GOk)Tg5#(Hp)qMR'oN7t4ifC@n/(%*nL8r>6ib1_''1q6'X&I4BO9-P86?=-S<Q6l4<eY8Nu1nn`+g:C,pNODJ]3,T?T(/6BZO_p`U:IiZSr5#Ouj9p?0@!XTa%I_EJLm%hq-LH&'h?6V^2mc#N39U_mKW%0Q(O-"JX>f%G_YQZ3,cbDFg'YPT>972I&ltapnu,R171LLp@-PR_s(rJLES[>LV4;83ZeQ<_+"c%"p1gif;Ee]-gRZlNu-Nhq!4Vsp/lbh42qCf$<q/<%=qJ3[5Tur=,Ds-L5pW9@LsODb"fFN-A0capjk78A8'#iTc%Sc9T^ALcA+$@%-)M#N$<O#hn_@uI9GibipVlOqqK]P</Va,g_@/H[!mOY%G+oI/_tR#um=/#;'gF`j7nb=p-R.2Vh?6:H`6MUQMA"P&;_[]*"LBF+%a\05a2a<OZD]F4V__eP=2Qn`7_>IE-V)3RC.@D@,GnDgQIZQoBn;0(t>Dd,"#N'&PLC7,sPLgK$3q0p8MTP1@\KS('-EedhlWOCl%-ml,F;ZG>+.uMI7M>aTLW%3bIl\T.XCBuGJam4e"m<%8$`QW*-"0EsuY:&Ii_c]i1Q345/L9[J?luL!-e7#F,-Eed,[]1d&eW]hs%d]-n4.uMI7M>d9IeJ6'aDB6'`3T/&>\t6uE2$[A`9MRiYea.KK0mPpEEbt4[`U'XoK<-IJY:%>nCA,*1R(T$3<](+g;,!:u/1XIu%<YUaQ4Af;mZD*`!SerV\IB=nE-QoR,%^Mgr]UkL=<HF88'Ppcji"a5lou'P)RMf-?doJ>]Z_BG+Wb1B.`T6^1_,`E^WU+Pq;/[tB%am4esNlZ2jMTP1@oH`nA<tpkM'*UW!5V%`6l\T_CDX\C[jRkp,bJ5Wcam4fU'MMq(&^S4i#!!iM-K9DT(0<?2'4M2+caANA@\_Ap%%K1t4W:OHF*-oUQ`($:.MfK^+$*d@j_rCI4iLUT"FZq@BZ/M8c)`f(lfQI4D?f+(X?f/V#b'cNiF^*I92B!+cWaW&47$Q_8pUu7]%p<?e.Z/4-8r_[IooK<)ELAlrm>sGM3?J_o'oY\\uh7MJ'cThHScbKFZT7<U8s80GmQ/?H>MDt.-m;BI`hlSgVeb1*\"\^u7gHF@F%k83^;.lZ[W&,Adr2XL^^KFh(,iUR2<pElg"=4)N\J'#C!5=[`9j;Yh6]6UO>\\=!EK"h#KmQ9WjlheD/PJX%qn9[4op]FN-#Q=RO%@!;N&H!SV^jhG)8q$3Gd;9n[EP+hbjhD3lLn)[nt\n74$*IVL`?'4-5FC4VOm5V$0?:d(-:O"[gLcA<dq7^_P\:>d_/A'tGNel^0%;_)">ku!u<QX%e^"^F;)drWcsD0mHZTSPSR/QoY2iW>!f1GldU#^h6]@bD1G/nppE$`JS"VIauuhpOnt5S8"%JK!,PE</MHfhTYo%%A>?TMGubU8V-#\\:>d#kFiZ89G&(;6sN9/"A0BRG3kB+TI(E7N72r=RT7dQbEF5HHon!X8<>A7):1bsaHhVjBEi2[_jBIZ6j>J&%9oq"?):1bs8=52ABEF>gR=O<3To<7!6sMtjdfVTDOTA0EJu"7EJ0lI+ejO%6'?^^1-6`P\QmTnDL^[r@1.&DP>#lp#G+qs*:<D!B%.b?TEG<h@S89Aq_4iU%%Ulc]%1`:"s-/V2:/0]Wl,8'*$a;p@-PEE"SEn&lq-6k[L%3Tkn&^V5f?SWVGQ-of(N'q#>FU+AZGKhT4%W'?/1:6Uf2G[9'jlHX*!d]e>7ZPmhPN&48Y_3E`+-6nY?)f"e+PEE:[dMuJk4/XMu5?rE*&Y0K]LJ_QdJ.n^lZ+B""VBJTFJ./5P%fBeZ;lD?,'!A]b^!%CNQJ./505`3u-+9Uj:OJ6h$a?Ve=)Mulk+LuRuBo:=V+9Uj:OJ6h$Hk3$:,:2R_OF_KX85VDMA0@GU7Zqit%a?Ve=1e$X;OF_KX85VDMA0@ED;NsoWl%eRW8gbBabZbI7VRg3i#`,;/ZE_r6/.Bil0C7hK#CU[Wi:$Q?91_Y\gPFpU*,Md8,e)k!%](DRmZA>X"'/ra%/>"0t76i+sF*1+G%,6k7I`X=$-,a0?2%>rt^*+b_8X<pk65]n=0<+GQ:a*nFW&>=lR'Rao(TESXgSXV;^d>tW%SW\*4pD"H!mYEE),gJaU?5*c1="Zf`=-(7HIDs_pIEdm\'j(n_pun3J0UcuXA2GM7omui]faOs5+s_1MQ!UAFH0DHl?le2FW+c^j%[%:.C4Y6KEM>E-*#eoae!l[TeoQ5__A0OJ0H3EB?LiKU!8]%_PJVIR2@sQ^sQXCm%Uc_`,M+h"&K,e"Jg-YU<O$U/ub0W'mP)C1=%ft-sQl_.Y0KS$(]8mrSaZo9F$:b]aSbE,8^qmn/h8=Rj[K]Hj6_0c\!&^Z-8#-SA6JfKH$6TKfh;)uX,fJ99>"XYEb0VCLP^;<:X%=-8>u@f[8%`CM>eQ6he>Ofuf6cI.1&+dj-R'poFJi;VX_XCg7S=O#J:e;1dTc"LJpPTc1`7'+KqJ9j$2!"i9hCn!=/+a%;R2Z\Sr%J7]abU:H_jJ2iB2[4<TlS!<S.EPsH\-V<9WM_0BGZ8LI8rRCBMP=-&OCkhj3)Ip%]7SMZ*'+n:u""+8+k:bO8_t6'[UPG#/"1Lpm%N0h]hKn<<TB-@UK4-hDJ&8;oPC.unWK/XVpl-QTRiAqU*U,e[Fe<*a8X<Xol:e+icTT8A-Z&UBUKK:/I'gUL$VBS<A.9;;1+s:=U%C079tLr'M8.O:0Z;-E0n$h:Ta_\p*Z)*h![[1l1`"#3S/K7JVs^$Q.2&G@:R9nF+4iCH[p'oHctr$U&*Po`b1!f9JZIh,8X:!3dL%6W+H;b0(@GL^\g:7)Bu$1rU9aOR%eg1ODW.?\u_D._H[!M<>FLS<kJaPq'hirpZ^"Gr5[I7Lr5<;OGQ#,;PCF(_c^l&PNTYMO,KC%YK((s1)icN7@(8(aFMnuQHF!_7$6)k"BFH"7^+p]%kg?apSj(o1c9(LRb1^.&/U\P7V>,q*=(nBh(n5^J]hgBD1G2+>AW#ehX-GF%7%iMd`mMb,FWY=DK9@>^*KOKl9k[?97+5DYA2I)k/X_?j8=HBun%,H;Hs=ku<E%LT\L<sp'H,aBWs3j**.Y<pVfj;p8*f:u[NiO;%E7Dfn.&@fMAuI8W>a@?A8O>#ebnuI%VWUPt8`oS`"J9$-%nmMg"QJ/;ms-NVkUabRH-^^bnXe-]b/(\E]]ZqZZ6ZmaWX8+`[Onj5%WX3jFpc]F!bB-9L7%EZa(8KQ[AZ.R`K+\CW"sj]K#YKndW*H2F*N3I_VPgIOcb^H0n?.=h^>k&Q@$7@M\Jd,Y6t=aQ?:?osTR$aA%"5C9j9gb\F>e6Sfn9!%(I6o`+e!FgMA#%J9\UrnXo/'gN"d0V#mjk**6!`H7^]U:IZm&CrJ](cP^F@^"jdK</A%C)WU0kkX$ag)^%Lbu<rqR/'M&72hr`X<f/R\8JgjGkH?H'L/d(!*Eqd)8V2I+:mnRZA/;6X.[ZbS!Of&R3B(OHD1T&gj<Wb)om2[=m[G@^d+dSCPHf%JXYM"Lh2=(LfHh=cLZ.GAts@jFldi7&h9h4B47-ScW5q?BgRs@?*S.+LWBNF9@/1+gnQ^DFA8$K^el`DG]IAA.RtAC-&saL`)6AK%1e5*T5tR6MHlTuc=$lLpdoQ:gH-^Q:O^)>HP0A9m;i17--Lm\A)oI$J/1=/3Hf2ji<+d#%&=]g[0bUITBlG&ta5CeiHOXZQ8E.VX%R:c'tDeoecS?>E#DklId9J]62Porf=nC2iIQ==TjB7il;b6N+4-.TGdg@AY,,VE@r63\pl2QeRZE!qb1$@e<t'^87Q"4G2t`FqHe%0ViZBm?Q%7a-(.M@):+nkuFOMI+K-TE0,)q\bOTn">lgbn>]SDa?lsl'F!-r)s/+dR=Pih/ZH#u)jDWiPo#:JPf"+m.7mtqI5@=]%Np4^j8`]A\"HQmr"#S?u<$$+po1](FNF*:@_YGVpRF<FqdoU&Sc5?dS8T"pEB].o7D%\YLLP747#"T,G?psW]fN]Uu!+e66mE2gV%S\ZQai#L(mjb5@Q#"[@^,JWIUs4M1T"?=`6kY`=+:/YeVoGsDuOXas6R7<<`fps]/4-%Qd<$W+7aInQ,[V!;nNC3i<6&L;r:re2g%+,L+[e(#j^OUs4:6irlil\8;$M$,fm`HF7fg$ng[O@TEmgLu2R=AV8N#"[?'.2t+5-RmLEl!YeG&UhuZ,UF)]aJ;q@ZUCNILH9H0%d<7*o/]Ysi5jG5e,gUO>.8m#Dd_Gr'Ic']j85lAd'$ZnK*H_n@P\GZT*0'Y9hh@>$M$,fN,cVPV+p#tD$sf0;Pm0dnJF$J]e4-;9%P'W!?'q#[C.FS:]>HB2TNWG'216!K?+<*5n>_+8TY7WTVU=lF!CD7E>a8das\P*$gWVO-\1+E`pQAOed-5K]&16uX)ZusrfCs-?S%M$,g'QPVN:8ctli)nml:.LhI\<nFkF^(8bV8:^;S>NMSIU,Xu-R1@]K(=TcC%?S0h)KH4c1l`i>(:`EPX,T^R,[uKU=%B*,,`FpI%DaEeH%?NI]IZOr*![pQK6terA"?9pblV`448:^:g/&WHr`fZjlD!k,6'T'hFc15GA9&iIJ"]6\E63<[N\T2=Z8/t.dE`";c)B^WV%QhuA$i](:$e.cI4+Dnak+nZ#(#"ZedI9Ckq)B`=Pod-c_<>luChibUQ638,^_^IIbXT(/07Zb39$Gn>7-tS2=8DOI8JFZSa!=meT%SnS#",f#g#)hEV5,SK#d7iYrK!aoiW\1\=_+W;IDLNOgYB0nF?\t3Vl;QGr\k;fVffUg'$&d`N)jFP;Yd3t1FO:g#QL^$D@n0/]U%<>+3uL\2,o1IEuaRU@7jD&o>OdW.341(6N,5h_N"RpYo;85lAddP3U^VhA`6FDXD11+ETLA9*X7Trr$r!#Qeo(Q_%=6u`DLGutP'%b>TPb::IJe:lks:"?=;@A6g.K!Re>\fff_i!,40/(?RA%$#hdY\.'j[5QHaQl+1%^R0H460P%4A6j'5t0f'*"I#%tthdDu\FBF>g%O_.1k@+8W=4%'1HDD9mTdp6rC$#hTbn:%3q!,!4O&&F2K6j"\RFolNTO8ro4^7loQ)B^&+o@-se1dJXLm]31KBn5iCS]Fs:O>tMj%,K#29,ne1"W'Qi2_&96#37>:4O]j%3cHpFMYZ==8#MZ(@_A*^A/2j7+_bDFs*&6RYAZ(UiB7$)Mel\dM'$ZDi/[MVm1lh2:VV,ds%8MW[9,ViLN.s06!(fI5NUh<U&!p1.>)F`Y6]$rG.*&_me,`_I9=[abb^_r/*\Y4?g,Uh+ABmOUPbA3m$!,4G7)bi08B1SEp8=Ojl%9^M*7!@cItl+!2!+dE7&f2n3/63<\?RW:>d8:^;[99CB_7Zlml)"XCB.O;fl-j5Bj.LhJolR9>2V#f#O)3pOdV#f"bAOB7j!/g-L%,asJ4ejD8Z3`II5/Yg_okrQC!%f\9f:nGX<]j)a])BaH`=lf\!,ne0?Q!gkgjQN\j.LhKNj2cD&63<ZcYuraKL+3XoaFKB81*IPY%/IVCfe6AaMdPdJ"#t?S%"?;2%`1X(E'&["n&TEF,37!oR_(#b1^<,6oArfQZ8.UQ]V<AVY#"TY+.*`N+)BehU`;-@[!,7m:T2B<Q%"S(MN!/1P8g[ld&Ue1]Y@qZ4)<#Qlb$cX;cj=1V#StX:*[1Ee/3*'"eqG\A%qBaBoegbS[Pm0cbZguO473M]W0H=YAW6tZ[C6%Wu%$IJj1$s(?M;/(QViJjRJW&0P,f]8CBRn<dYX0YY/4Ph5"7l'c%C,T$s+p$!@_'a$f;T^hVoM*;3T[F+ocq;A-PbfTmj%/'jCc[ga%3)d:4Rnb8L*/gD@b,?T$=g"RM'FLLLT5i(b@8S0d+<=7Ac0#WIO<dRm6-;$EoN8;PhADtaUgDJ+_jAQGdQ#[Mh#qP#Pls)&Z/k^f%L^$DfF(G;;L^$E!@6RgP2c`M#ZTM=_)2)[RZlM%90b((E!9\TC+G-1%U&i\bj[l"8!ZW/:ONh4f^`SsK80:;[hMNeB+q5BI!hiRa%JC@dsiK$S5Ug[K57Ld`FC#\L`;V!#q:h5';KG#_aZ;",oYt>+o@l%>WZWj7,d^:o!9iInidW77ub7LBK&t.:a,WuKkilmS*r&7lK%.3u^nQ96Xr,et:P/^9qg'&ZHAq-q/O#giWd)%I=+k1g6i!,5C'>=-Ih5a#u&U:(T[!9r4Cb*=E+nk@#t'VYVkO$6g<WAKL>8t'Hd%?9+8R3'R&OQlVn%dP+hmi3cErJE4TYN7f?m+AoTn>uNO][o#\HZZThr,=DX0@l!cjDafoq8Cp\h%RW(5oR2"V(nq&Z2\]&)LdmMM%8^es*N^<a\hH(n$7NhfXcn'HR,=DX0Bs<Gu6#@^/"?;>5@pq>rBcQ@tZ>V?`"!j$Vg"m1c30JD2Y#c;Mi&k:DoVkIC8>#N%@:W2K%'T!2!4sW&^%+.&_BDX-f"K=4ClE7,=.k2!iL2Y1LVBHj#:"PM];BZ($CdaG.V+LicmAcqF8ctmLqhCQM9EV*V1+s9a*^V\KZB7[E%atuB[*h+BoBif!_M4K`_/4U$RE4X*d$EoL_"/OmXZDFF[!,$Tfor-NS#q="R5[&9E;W'qPd/[lbNaf&g1dF*<J-4E%8ckMua_i\q%"?=`X'H'e_JFm^@ET0@!8u"qih[X8dN0=STE&ug_K\2'>aO^\9+:Zq%7W=Us8<[mpJglmW!L.0<l\I"sE45/Vo>D1LO:LV[i\LY$%#"[A>Uig76"?=_<it-,qPm0e:dH!a#&<.n4P,:3k<"e-Q:_ZT"AI>(=bE@)@KP5mH"-K7+<#Ql2MtrLNmh_]!dPb5-!%Ci;J9/O%%b.4:q!9qA]1!!NB!R?<<9AC:ZBn5hM2Y7AKau"],28h+Qp.^9TJCI<4<>M;0da/G;B;A-$S>kja;FuDFfTmhF*gOZ`^*DA`+W;ID%FVdu4`fWIW-+65s6j'6_K;7!#TL@d!?^W!kBG@G4?mcQl.O;go5ilQVBcQBB`C&!b+W;It[EF;<*9kRO-'\Tm>>o]LKP2@i.;L.O%)B`<[m^+I#j#lhN1#HMt#"Uo^JL`BA"!g%b:6[Z%7ZdlaVO$MBdK$9DL2?74BRhp)6bis>U&i^7D+Rm1,f!QeD[C#D+W;J?hj&@B%W$K/=FPB]$LP0>kFD^.O,c@-E7aM/"\\:1)%ab:@4-J-e:ajI;BqB.eW?f:DY]kqF8#677n<b.$G-6O4J2A9Xk=(128BXp)YD6eA%ZsiutOJY\RUgm8?'&3,^:]TT<o%&8T"?=_*>i6bD+FTT96NU/_;5AoWL*dk1+W;L!35f#kV#_2<regDLBn3!HOWZmr$#l3Tq?WEY%Pm0buG18jn;+Q4YCff"8.LhKBl$@)]A/ZT4fbR1/AJu\>'?26Cr$m[Mm1T#,^tPhU!L.IN3rq]*5T6l'<_-)b!Re>Kfde#9!R`_S%H(H"M!RfQOSChrJX<9n5Ugpp_J1"7qj_E<4A@R_i8-+rfJGg7J:Sn0@LM]^=Nt9Vd&iHTG9:gHp"?;t?@M62LdPqm5e+1mUV#caL%]I$ZL+`SLV:<NlQK`j@RZY'LAaUjFV@5fdiOX^g%Y0P$0Qq<'H*9k*+rdk[jOM7lBE'lI>FCk&:prT,&i<T)*Z?\fn#"V*kCET:e%'b\R'G$7)@W\cu(1Ls)C>9#*@37:`Q[ilY4*DN-sW[*Vr>a^-M$#hN`V\O_;%?R1EbBAb0!ZW/-!j>ga7Ze`a?Bb+5KP5nc?"Imn%U&i^3AWNob!h@B@0QH\e+T]l_>AAd&>9O$mG$uF#A#;j#Ugl26/bgtd1dJWo#?0Q0&((CA_6-sZ"fO7CqT>+/PsfUU4_I;fT28+0%e*5.]_5^=GJ4/*[o$"'Y^mVF1Q5<Dp!Rc#@%L_dWKP5nCl+U=@>iS1#AJu[3ZAf.sNMSq(&d`N[7JoY,;"QVs#"XgCXS(gD"0W:n%5l)8\:5CP]_hf(ZZ8<DGE+f@p$UZa9lF'/tkd&0\&.O^*fiMs'ge%n#!/V4*_aNY\;CI($9\`&f1bHYKn^e$b+Di(l&IZjX*85<t%1dF)K*doTPm1PSH8:Yd'*[](*!V<K,1dH@6Q@'WGANX9kR0H2()o":k5BHoSOXNsXBk.m@UEc2#)F$UlUeZ(f3=]?CHB"QudNH/h%>Qa:H85lAddPT%%GhDtp"&busdNZ;=4ZkgTFG?#oJ@*EN-I5*eZ1_%/J9:;S>$p=48gOM`-+fNUeSlC"U]AQT7qgmECr:e7a>?0Y%A-\<R#@ZG!8=;r0"rt_N5`Cari]+6Mf!G/1Z6:,/%C1K*_im6Q!@8B!iGS!*J^t9\#o#XeUrdnO2EgCP7,phDYL^T=]Kj1D$#kob%H]j:-\d%4Hdl7u4mmYN,e2VM[)Be8MjPo8jC,q&_JFpq(io6&<L(c"dU*TBTp7]nIM;h3.#i%LpK98MXN[26'*'=e;p/>[U1c=&M%*5"ql@6f[fEFeO$K=;q$1E]'f,]Rmu5mU1)),?t-$BKCuA6Bm!OT:/L5kp"GRi,ig$#mi(a#_6%3/Ibtil8;ENUF6&NM$<83'&YG%,A5H=L.N(l;9+l3j+phf?j[3Z`8&?.;KqB.UC[lrjST9&:Vp3]:e6*]91tXEJgatNBRmJ2Sg?cN+XsT,1dKc*duo\d;U?O\R0H3;%lrq9(W3@.RL^$E%`r7/UFa,oX)Bd-f.>[3a-GtZS5`nfU@mT4u8L02"fsl[W:%m/Q7aM.741K4e,@)jLM24h-,TV(?f.>+#1h@RJ%9o"[g\>QZ19;MZPSf)$"1cXPRJd+d#6!]/6\R@4_8-'Db-6%dtfmrc7-39,D5e)I1*j^l+)Be9u.ZVec>Tj-n-i95!gDUc&,#K>K%<rG7A^!!hN336ZVb-g.9OlFuJlD5Nl^\_%3#SI:7Xa7[E1Li(0'`S4:o%iR9-.(oRK2JVV\d_m@S][-nWAjfihMCVie>\3p_l"LR%i.7h*="N.:NGJVm=!_PEf5EP$osbj(9qmqWeVLL!%n<BT5b_o9^$msV7\soAQI[pljSOR,3FD1(7p=5e+OtVj`#$SlBOjabdBjpn%KZ6n2N(R6gA!EG<`rF,YP`HG4SunVI&9V`Gp)>0[L\fh_3a'W)\iSXkr;L)'2R0',Aaf#u#Z\0p`'ra^h=h.Y8f<*SX'`'E58]Zk%:r<C$;5l\2;T]"3UJKjf&#?e18#Pjjl>(fhA4pW5;Rq06U/"o`QQW3p,"jd&k#-K\P>Nd`@e/\Xk:`EC.CGIb%>O`Y?rX0%R@j.?%7\q$e2)r_4>E"M5Z.d-$W&FY9JZ+c?]/J.an[jqKIf6WA/"nd@9j)Hj.b2qqYE'l38r6S`N<W6=UJdDATTWUEqh%aK,[.2+)hm]g%?&VD/\7tEWLD1;B9qmp,.u+&\NMu0FVK6Jh)3mR`Po;h"ADZ@gW14K)oV:GP(I+<9lbcR*gX/(L],6f)ir*'4d/*2A7V/a>*ds"q%TLR2ccX/aOQ(";<22O^!DFC&lGN&@Di\-m^b#VlO!O"+S,,26Tml]/$(Sc#dA@CIp>2qC\LcT'`#eC,;manpJCEX<WoDQM(PcYj<%+dVKU@T9At4ruHC(jdteAb-P2efP506sYp7g*Xih9m7`FYYTpa,Q[5gNMpVq@7f9cSl!sqZjhCfC4,$);5m,?E7<?ZSkq9j8dXU:%@+t&[VTSgP@T`7$rd%c'gVp*b&ju!)Ko8fro/mr78Z6q]K!sXBYW[&<<(c]_hrA"$asn"15:YX=h]IeL9ek'<$-E'^6sWT%)fF5J%0e.t>jOdCbLo;!1^s7l/^XiFMR+[K7?0)`i9U3AL:QhLb=HM`!k/EWa@V.\KWn'Q_UXIRK29s8eU96VAiFME)?&Zp`_XBj%4MDb3%f:H'HdX.n[5YEKB%JFIO\+='.9$.8&dR_a+pBOnp)/oAPiBQ3A9U3?r-^pc'e9&hFdF&J<(K9=D^Dg%J4c>h+2OPpc,uI7JGDM2M%2>q<UCU]+u.h\%fkRL"ORf<7HX(G]Y/k0E9La9I`\JUUsqWHU]A5pE[ePDb\U2K\%6`1n<q>Od%XQKE3@"b5[XG]rDqU!dMI'$b7%N(WdA6biY'>DS6\=(7?jTFi',CA`iiRVr*p6s[2>C1b-j&Tt4h3qopSLPVnp`?oZV[_FIbj_4<l0jfl3)g?JR\;R?W2pH1pmUS=4%qV?t=UiSO5p=N%_1+HiXX-dtobWd<:hMOdS9gN(+6q!TWrkTR3;0O/JC/)9baM"O1;5p^Jpd]dXM^P:*@gQ&ORoUOE/k2\ire[iG%qT/h:2^KXSAWg(SSkPF*I/i]Cp9Fdp/kJGDC7">d?]<,Y&P8p-qU%)ClI>FOIC-R&Q0#E%f_%(`;5r<NA\IGo:t<]73tQOLqM,j_%9KpV@W#QG0jE?S;7cfkJ,]pKm78Hl?IRB1_^K0kpqJJ],66m2$X4rg@7%Ms8\8C8^W-]g+a_bp&N67<ZESu2,p%=GEBaH/F\pAdS%0Ig:!\ki7):AiA#/Z"Cj.#cUM5UW=I,]+U!np*?#.L\M>9Q`MBJQ2@_iKH-Y<T&ukV8OROIC;8:4;a>Dp!?K&[Zp@=aZ'7@W)Ur)%1ss]EGTc:O'\Mc+5Nfi182Lr/lJ/[t;5jl60gt2kc[<$pP^"I?R.Oie:5MKX-\djfi[7r&M+>Dc:H'UE&fim`,sE*&Tqn`[Mc#lR%OG%aY/Z/,m.Wt[,`9l*tF"o.O#tOjJcBEB/F"o/pnIK^5Tfp`@W2pVmKG@(-WB;&`X^chdX57Lfk/jR?f,VROM&%>0C*7!h[LR,_%1Eu++gqbn2]toW+&o#E4>[m7+;af-g\F\oTp&2_*bZJ92cYM&Kb/L=Wbq6:J`,,,DK2F)2oqQa)?%f4-S\h-(bBG2reG0WE5O2/V%6sZ-UV"=R\7]#t\@=tQi.SiO1I-*aea@tdoK;gVqmpAA^RVr%1N(VS2r&O,5^Pbo7>r:KdeS%A#WTtY75p'C/>`;;N\;.]\_l@3W%<3#DZYE+fCfkSs@@)C`X;5q9Zf_R55bl^fjBhV@5rS^HlLq5%?8A:BYVTMt%/@g_B>9fjpBdaSq(d!F!UJ_;7Tuj<FA5p\s/c=bQ%W%@MiU@`pn=bqkp.>t?%]^I%D[>Y<A:IY6@c^g"e*I[E#DnQ"eP>Nc7APetW8f`?L1$u5L&Xb,,G3LC_8XK#H_5J(65?,Cd.6J/a%o&1YA_'J0T&Ts8p(KZ_fkk><d8oajJ2gX5j]bm"i!CJQq4*C7:Z)*[e,_RLHSIC<8Bl&</`W,nQQ;SVVQKO5g8#VkJ,5?VP`c@eZ%Caj!sg/@'3T1kOC?V4&9,#=bn?>M&:aoT<Z(.E@#.b4>*L%.ua+R3:$g\DJCN(R4sj4cXg4<WpX`$=6cg:,:a/YtH,JQ`c<`Maah%OG*+dp@9h3[Zglh&5(ThhHZ"3)hhVS>PnD-Wben%QOCoAcZ^W!`;\)tn:7I\UMDI>'J1HmeGISD[E,9t")D(nX4_^CMc!X31cbu/%-_jQTgd-3@.^@u&@B>J3+R4\LaVOj;nD/m]=W6397p6(<10+=b6B./Im[LnYaJb=,nkk^8;(7DX4JO09q>Oc$g,S/.ARnbL*JanG%)cGRQW)Ed`KHAgT_8W?h/QmA_(PmmG;u])>[mW^ION8]#A\O?SF>><lQq%'=%K>M3<&r2&&+<um\!N"MM0Ks'CFu2@,3m\X%h3*=%bS.#5dR237N(WdBo<0Jr.VfpUcf2R\G9cAkNk\,gB^m5^UJdZ_&9=&ee!u@h=gmb&mm*h?&grUll+Fn9W=F1b90O;(A5oF:D+QWu%^HWR#Z>hAeh?l@flJC%QnL+E8-Q?7q>O.]g"&Yspjo*7JTk]QO((V2nFZisP./!i6@T;(F"/k3g_?3Xojl7XVBDVaT0i@Z%Pl%_/%_/]'U<$k!DllljkW[okrq[OiS3f-BoNO-EcMc!V&+pk[0@V.7$PS0.4O?RI*(Sakl2#%s5`KjCAs*"9tLcX3IEg+b(Q>YjGB1NV3%Vf%!%ic?hSrg(V<PCt<jR&c-BWIB>Q41'P,Mc#lg-4-AZ8P]CnN(S*fEsnh#W%5:bj`3:(lDjW=,(Q\)$;X-&P;q7edO1fqj!Xu3%`&Q\5;/%9$cu`@H+,n?LO(s"EWO%7QVTSi&cH@XFLcPii`?!(=rqh=FR@ETQ8A_+i%n<BVrulP:(Fi3MASGGBP%Stk7\r0Gq/VOT%8i_&>$TQsSN/0MSs.NcP#HC%fP0b@:_Hi*m#m!<oS[S350ibq+UaE-HgI8joPnI\^.i#*O!E#c/J%fQPN(QM#*8Od`e;<Q7-FL$P%V';X/JkGqhE\T&ooa_9QB',pc7\p5?q;+4Vl@ss<q,&Cm.VH2@ZHbl"a])CgRK/&XM.&g%,t,qf0fpTE,htnEX/.lhFV6ebX/Ds*%Wf'aM]+ob2DD@CmUJa9Cqo-^sW3fFc:nEV<S=.@n8r;0nKW8IeEs\i@DFC%K#@Ph_X\&_l\nZ\D3"finR2;VR^$iKm]GQnog%mYh%cJLb;;Ms?R%YaSlh`MdA3(!fsBf*RD/Y0g/'qFi`96`-?,s2ucPY1&ZQ;Z_,E&-d*pcKq!;?GeTMW&#D:5Mre>C.GUq8nq#U1Nlh%DruJ>9U3A1k0[aZlLsEB/`#>7=Q;4_U@*GGNc)2nLmDr2/eciL(Sak0L&=-g`KjCgPu(h0+#Y>.RRG<XPh'XAcH)rk5OK:+'F7\s%!Yl/)q>Oc$cC'`q^5,b?3W?P:M2]TQZb6#S48aW-P>J-O'8VT>8V?C'Os6X'FDE$U<sh_mV7QW!Kfmq$,,;GdCE\M-qeefmRf/qP%X,4T91+FU#]\bHR(mXC[GF$Ut<;E$AN;)\=!hq;=W"MkbG23bC(mXC]LYdb!J]OdSct*'fKSP#+0IkWC&'&[fXU-2HZF6pLVZ^(M%IkWA&o+-VQTCqCqUJg7S8^8i6&Pt8/<!dbI];Z9.h3=:04Q"@6a-3KCrd1[4)QfSn1+JIjc!l1%gQX0C.cgrTnJ3@EnjV34)a7%a%PoSU>qW>ktPf#7BGqpjd%,*jO5h,c#G+=OR1+I,DEhdG]<6A(/@n_hTPiGWY5Fa^:g7:]$SK*uY)E"HT&9U""lN^3TV7QWAgd"rr%&Q)W8Zk&sVe=QSI<3"]FCC(fPZ=R_l^SSQ]ZsSba[8`Q7%,nf(<TB>kJs1nZ^NVF_B1c2?l/b("Cal9iVIEDt(K9Gad3N2Cc2B9'%PS16S2Y(Up\JUSb@[?q-$u"l:[,_TM+R5uF/AZeOc6Ze5.E1Q_();!Ni*oZ/M-5EbLRmhBfM^!LNk,u;Flr=OUq2Q&PGo0Q$2S]"%TjrI<9.+>$P>ehRW6112OR6cud*`A=+HN("\/:K?45`8!0".">.SY)Pmp]6s$(s_LNRrggU97Y@dLe5YlI<=Vl?TDu7b!E3-0p$L%A5p\p$?;35'.=YqjnkOOM0n,^/fkh(19'Rc6KCi'#us%_pem'0b#]3*9Kff]h2",`pd9r,_E0jtQ*m+)cFQA=W%s,m=#Q1<ft4pL%H>d)Jas$:IkJNgK8osbHCDLkD<Pg:1*A-D!<11Y]>g@%"UGB;[TCK0"itnK=*<)fV[/9i1<0h,6>)$q;77:FHms6\%ZH\Ae;5k%T%Y':#BY$2QGD'gCjbi960`f''k7,=s(6\]^LK?np#<Pg1.Bu\tDhpO/IV&\4Z/k["U1;D8#qAs5mU[giUNk`hhW%2f:LO@>@j'l!Q%kQCQ74$dj@.bi^!r6:F&WM9u]\.fStLq<*dIE"-R7n2T6ejdfgmdangKO9>f3[`5c;3rPGaVSN!<1;KIs#8O_*f.Bd>AI.&SNs.-%5(@auj'l!=Cd)Ct;,0TW)Z?dumf:jZ$!2`5?SD>bP>O?3Oj87lfhr%;^PGjEi2h4t'*0]@HnLs[e7FJ:nmb!s90'Cgg+k8lWf"_E%Tc?$6N,0qUCfc`r=hArgdPUi1<46M4R.&8sc')!Ra7dgL3=p=CRNj.b&MHVM]`^FrI0.q-20h5dBk0jsXBG&l!i"!,rS2W/)3sZ8%a4]l*UXK)=gcLIRauXA"TsNOnW)SC6f44rWY)e^*C).A'6h?V('g6Xn.a?ks[DBp`M/_*-c<_\M.a?quc$U_110^Zj-A;It-OtX?%$Oqp'dS#J7P>S:hIk/ER+B5ad=]X`;HSI"^`$kHWBOk)B^Rq\EO\n.!A0rGH_;)15j(]]9V.O3I$i=C4MCk;N`J[Uh[]Jq)$mNDM%(mUqb%m'YT01Mdt4?K%U`MdTARu$lI"[^`XHe=*\N65#!.FI&P@T6)WcZ=NM`Dd.F(sB9QLY7S_.E9'LQL*u:`Mcag5Nb(R0e-O'%0Zlcr&Q,GIJ#G*>l;2"j8t%%j+heeYlLO+-Y_u@-.3Di6*YEN^6Btg!\_'f[UTCL`Of8u6JJ?NT3?mb<kKarUA5q]-3?r3kI5*5%%kg*8eJ>aud)'dAYpL7+QkIhr"A4qaj>%d1@&Tq@qK<?IE>KUCMN0nqM@T6+YP$+P^6q\m^[(aS<9U0R*SC>e;,$MQlXi.<t,GOV6%AETID8$mBeEfmNU*>t.-p35<NJZ,Wu=pTP.01KMW=\HrLacfTTB8]Q6+R6o2cT)M+7,88EUkhuOeAh.u7j=^+^&EE*)]=odA>N1M%h]IeLp%ia9abs#!`d?!?01MeJrOF5"7+AWlU@(:rok#e4Hd3G&EYQ\56/2'j;)t--Mf;I510)n4GKk5<l7<JYFfANP#jtJoN65tk%Aa?l/U/',i83Jj%K8WSU#2[(T%#?q`K3\4?7\qC,p?qDdUXB@?[H`^,3jEf<:NJ9@V_,Z+dWkoE=99X1)?rT8.aPZN^)3.#o]O8t%aJaJZ$@PNW<3Gb(Q$6b<f#%?2Q?_M#<5LThB\EJa-^E?OqF!a-i%333q]o.?e)0uF-W;;q`\Gd5*#Y%,p#g\9aJd>O;7d?(%28]C%5pd`>Ur,0(>`hm_:4L!V,GS-`Z[Tsa@T:KLqNqpd[Zk%9X>)=_.VI1_&_u)rB^'=Nl5ojgWj<fAjW+nTlLX1N-im0mP7X.9R6Sj5%W%=H=b(G.mYbdTJ=fh/c$XZ<O2-K"NM0M9Y2_;QJZO^?#b/)<"CQ0+_;N;gL5EVqn2Z/Vu4gLn(eiq[W,;L`cm+FO45h+oBOe.4U%FntXT&fHst)WR4<7n0?Or4.6.Mbtp[IZB80A5ma7?!Y-gA5nH:T<%$#Tka9B#4'@'r)J)bqV/FUAlMC4S==l\N(S6hgT0n7;(8,]%h.6Fq<;q>rq@W70</TMhIQ\LA:;S%,)o!8UlM.jO82m;a1i#sk1f$U&PSi-QOm6PY9YZ>3O7D@E<;oL5So6#4.P4Mue[A#IH7Q>K%CT`nk;/%9&g3p[QQ*m3Ye'4gr,E]C*Ro(V%Psc>ql-aK>V(<'\]=8`D(^\upab<]\o`_jRMjmSC*e8U^E\f3:C[5Bo/T4+TRK33X%',d(34S*s`O\o7u_50;1,ZI?SoC9gFUU"N]"(BB4N(S3noQ;B6.OG#`]ZC8TmPPYCs)oT];?@fn(k+7jZZT&"FjkV&Q%U["*P\(@%.A?*Gn,6ik3UK8f*;*oC8uS66?+JWdEg9Pq!8l&"PiKSGH*X9:mHiO.;OngQG.ZKf>KUY)P4!?qLq7qlMN#^%3TOpbO\r)QJA2"P%7V+`L@M`3/qcL2)7R5Jra$q:H,BgDie=<@*8Y1l5o`EoirgQbF2/[,F"l2k;G*pm0bd\OUaZ?]WWs1stDLS#o#utH/i1"1@e<OqK%H`PbZN6415&#mgODan=((0N@BYC.PYe-XLrPEA^&H9E3k5h*p70)=hEIdpsK[,[fs/Trp"'C4PE@midtm^@tZAkeCb.>KMLY3:S<%ZVbD\d;MKcD>EOK!i!u[+kH``7\q)g3QC.$W0BR)@p0`fQ"":^CLoc2Z_M_^7<UI:`>$Z0nc;USD/$8TGsKlm>UnF0aN^Y7Q2@qY%K1/8+H33p]'H*0V]Zc^<5h'qr0'1\qSkp_^J:?,\Lq4I5R;Slo1J.-h4!<hLBTB:R!E#b4J:9?i)3lkMQ<)l_)3lLN6X$lP1+Fe=%A*N0p$W5Mr:1r[FN6;.P2\=e*]b#=,o_)tMO\n+\X/2jeMbKE-=68`;%I@\+VW[_,EhT>iSiDMXJ>eY6grJ2,ZDAQ7Xa'O6O\tpY%9'(+RN,0r2\(!=ZDFUIi>6O'0QI960<b2Yp\s_hd0`kOi)98Sp7%)7#c1fO#UJd+7]=&OgFdW8(m&)I*jZAl[^1olO0e+&mC*Q(g%<&FmMEDX7!;DO'MqMU0.lciJJ]#A_6lGhaWm9Fj[1+Hoe=6Z5KQ1.DLa-[kZFlEb<56kPO\idtm&mpU?\'<qPr6;1In]*i[I"*h"%`D"Rdfo&_,^4>[p>^\CXHagFo)tl4c;QKn)pD4EaZ_+Me2cF;e<DT+OX>_1<Q0JhBAptPk1=ptC6/@LB2%jmIE\T$q:ks2W!7]M]%K#eV*`!k\)'p2AHb8^;BaJ`'F^qFq'&TtFEF/F:=<LW`ahg`3SQ)SFPD/Q:@6s\ra/<1kiU[ht)':0.EUU&s+Hpt^dQ'GdcF$7g"%W,(i6EH*/ee.p?^`lP(umi*A25h+$mp672,9!bI^pAS5e7Rj6N!r@'W)3nY=lt/Kp;>2F*+73DtfhsT.G4d>I;99Q.%E<rqeK3JA%jXf>!<;)j.&N1cs`Y7*.A5nFd[%D&>9U/V;DdA%Tc'FNT[C.4i&Tr%opWN;eQB$O(R6Tj@<FW#qk@YT88k(FQ9BTb`[e-)jJVu,A%I#^1qRo.l9\SW5sF^s,DGkG!t;)oLq4#IhqbuFM.1/4g![[N,13ctRQmBb^E#GX%M41Ah"O`!Xb=LQDd5;m7H7O=*%E@WO`lDd<-%X]%kOUU%#c>2*2o(mTO1,7s]`</u.)N$G'7Nq_1QMF_mb"DbWUHKO9Te0Q'+f<c_El>l3!XGMnY2$0oZ3AN'W46$<Z7V+0[41dtE%aJ`qR3VOaO7V**qpEW_SIm-!=JZ,'G*%U'*<&`#5d#Ub\;407aBgqOKN69A;g9hEIN67L79CD'mUU%Pq-d%7DWsiE?Z^&V1CrQ)h%/DBc/<2qmMT9i#:j^8MGl6dgO;V_A%rJaL9#dS^$DlsnO10G1;=saGA>qXo!ZDnZOF`4^eg1m0c5h)&6<4dVJ5h+=(2E3<YAU>uR%;^8Iu6ldLV=!7c9h2!^<+R8*),7qW.>YLA"a-4]W!IV/K>XOVHHkB4'l"Bq%0=I+oQGF@&E\f1JosjFJB^)Vaia<`<Fco/2cU'6R%AUj'J.EB>a/`knndp8+aUN/,MaZ]C?Q?'2Ug"tN'<2nQNNs?#*l%Z<lfi)18b4i0K/SC4_>KUAeOObA3N(S3s`-b)HB]"ck3k.[q%"6d_&Cb(b7?-8@.fm1;6%s_H:]$W)6ct:90;)`-T^L'["0L)i2L3hSL6I_iGit/C6&9YO)"3F#fMc"2`coM2W1Fc$^8#D*@ZVfot%SrCfMT$Xr77V-LHfCiZQNfcZs&fHt@fkOVE^OL_e<PE2YkW6/9:mDqp/),C2@T9?j+D03tjY*3ab.#dU+PD+#N69!s-J"i?W2hu*%>@EONUTtVm($,,VMc&0bZNiT!<MS\tcg>1@W^5Q)2=:>9#?)oWlZlB#]b,-OV)ebUSg?-AZUQZD``M&Vb4i=:bj$l+UU!FPm9\d?%6sX@<PP`=_;(2f!`BQcHghoSm0B-9LS83"3jcE$f@\I\s+,if`cj4BMrJ4Ec8ZTg'B3;-'7\pM_\=mU_'G,Cic9H,HTpnnn(4jY%%mUfFa/C&_qGJ_V'1loF`s*-=L>9;8hOBmZ'F0(Q*ZL8u124\qk!7]5'[[Iimp&2^mP4jE%C&Gf2W=jrjn*nVA2d8llL:/bbc)?#R%3EiuN4P<Vi7GoWeLq9%0^&Pg"-X01L@+tTI2l"eP!gc4$c)BtA_$"\S;0hhu;/%)&&"Rf\VFo)Bm@2^!Q:_PeQYG'*W66*oUg_I(%NL"J3I(mM>W)RuVjnEj?lH6=EgY>lA(mX4m\@g.*7\uPg]&F3U3\^ke\>D=g2.NM*p.pfJ3IB&s46f/4q^kdJ3JX]`,;L`IIm^o+%N(P+=[Y*A[W-iqR43)lM/%'`A[0oi5]="B`/Or9AX"tjr>sQo-1Z7gp]G[!0fuSfQi89Nm1LEC+^."nkbr4reJm=*m1Bq)*a>]kL%9AC08G<%=9N655]Q<'<A$W1Q^J<gcm&uo]O,SQL,j(;8Z.q#2>rlqAMB!)rEc?oXoEg)ti3GZc7Gqr7283nXuM&@lt6sZgYqhW"3%0e2e<]I\1S:IaH8bXL>mh/>boH-qkfV?d-=6sWNQ?q^X7^-<I"9nJ^40"MEff-NUmB4\^nQ/f:=#82=RrP>G&&jhRO"dqT#+OqbW%Guest$W37rR]'GbTaO_q6dO$nEAK*%/.H,MoA>L!FTurqr*iXVCh^d<TuP?UClbtOF-OGm;Tao"M8(Z2h2p9cm5f[%V4<js`@SB7%VFm4+=?[PPTR`>',&4S[lclBP'"R)X=Cb&bbtHk4m;GIj(^-/A<0J,mY"7p-c@C$n.b,]hQV_3l[V<;J/F1X,W&0Q#k"rT"F[KW)%G#l&@;5mL;A]&s?e\*jLXjfoYU+QmJJ7M4XDFUI^6EXCJN66?H4'=^9A5j<NW@dM0D>Haj>oh?c)ACr`N69`DY9c^6G9cB0REX%!%S*rhrN@o'Y,t5?^Q0Js;9W."6:S(7F^M5.D9.PYUKr@WpcY:s%e]"K2h=A*Y2OKt2.2IKRU-cU6;-1?jF)feq)3qU5Q57ZBEAK)p%+V74ff<l,W?'iVYABLJ/Bhh-o3Wtbj*6gF;;HA&nl"_QEWbN(.0,tOG8YVPdd\O;.+,n>nd7_R$Y%c.!7cc-t[D0Ip1\'HPUU!Gg%dZ7!]g@#PAA^-N>42!\3^)3-;FFfTDot(fY4mTm:R6&)%;)cYIEm&Ca&"\a&q**IZZ+cVU)i#R`2SK`Fl*WWE*5M]N:431fm\lUP%q7`-rpU-n/LcTYco^spo.dPi2p=?,6]9,tDP-q.7*\'soPg_Aj97Ydk#GZ<1r6eH*#?n]QD9;?*hb9:@5kWgG,G@`C!g,(H=K`>T%Po6.cd;C/'ns/tr?[j8(8r9V)$,LOLAX3%e1,V)hpBOnp$"2IIYAZmA7gP<Nbm(Os'#WeN]#^h?'#dhSV)%j/-X4ah.(*m92cD"h%0K9V<M$AoPl)(<.:9V[7?&VApLTihI]8V]kGD9-6&9Tl@\^<#b.dLpH(hj)HY4\ZQpl*4"4;jET\UP2Ss4rLBd>-"BB"#,b)3mlr%=#`\Y89G3A9)=3Vfb><hl5@)eI:%fA4Pimb,,8$V"8tq`7V*HK7chajXGpBZfE4T4V0E31`q2q@U9:tfcF4W.Q0K63roD2"SGgjc%iPW&rA>7"SY@\)WCZkY*<$mH2E`^!mQ!Bd3KIIJ4?3Jlkjq&,IV:nINH2DJKAX1nO2p>Wfb(btqke4M_EA8rT"P6\6Q2YYhh5G!^%(%]l!a#P$&Z7u2Bamf8b89IKoU9$rL^Pbq]Hi>:?/!70q+,ihb$N/_g"Km0&0Ikt32WC>T1+J4#f%*o3d_6Yt<t!^pMX5&S3tQNd%2gIg5pAEa&3cte2aDq#PGVUa=*]j/KO][VkUJf.*C@UHD+&%s7>JX8V<$KW&58]YH#eBL4Lq;IX!JOB.&bu)*UJgF[Ik]tr3_u\(%YK[%(25@c#PuV:\We>DB(Ki3o@&gEM'RkNc._A)&eT\LRaHf``C<td")3qKj;_93m]@#&$rSp(EfUf#Kc3fW@Nb#sN(SgO+[3S5h%I@Z9JV8UkappfS4lXEhZa4cYDm=0ViV&\&:8>?"M%n:,WC:qdn/KLno;5(:EoS\O:nT6@Bg`)mJA4nq;5,3e8It'.%VsFP\s-T@l%GqrC:a`.MrA5qjXj'->1<6A&OF<\g2L4H4L&[6g=[TI/\&9VQM'SRp0Z:[qHXtq#^-_jSQ!pd0NJM'E'Qg?2(bLF`K3Z44J(5Pu5%;lDerPqj;[G4+b0Om8rL#.f*M`McHC_;obm/k0E<#c;?,#erS@Q0K7N<]Cnj;N:g5X.P>CoaLK!L<-=3\K]fA-cZfrVl#$qc7aWr%0Il0DN:b6<i3c?MV&[DSII+l)`DkO73=rRNeK^he![CPQ>ILdk1+KhfIJ_qu*f)i`H,`c,T(BQ+F[]bUrV.BNPnO)YfA7==ZG!]5%['+m#l?]k/UbsBQN6:ZKV3sJDA5qi5KQDenF$MUtWVeic`,$WC&uoang@NR>W;Fh7ZjbNA',d)#)d)2-nTPSF8jV4a3Nm?jV&Ws+%rNP/SM^P8tC]g^Zci#I_PoM)0k2MM#WLe[kc6Rmh0IeB1mAMn)WH+A=+Ni]oYAb;Q;M%14:?TTpZjOS)bXn+8Sk\;l<(V$R?G7DG%r;L(s.1rt:)A!dO9d5pQ,BRddb*+ER6nVJ$JG&lWW0EAR2ig)C;U$8@k!7G@50hP(+P"`o!,=*![F!!ne<.f=.:8$+Z-#0)LWGcZ%ib>G6RK!1n<6AVSs0;`1\l&Ii=S)bbSU(H?4e_`.LcROGN-A*!nJm?Goa17@^<!7;K?p32OS/L'M%X$k'"(^+&DQpaUG>Ccl<GS<%65<a<)OCB?6k3$<TfAm^)MRk__5NT;37)ES";dh2*<I1W=Hgmk;(2fE9<4Keo)"&:W=FIgG"ee)KIZ&(/^:#`^)Kosk((_9o"H'B%/no&t>iX@>_)J,e_UJ%&c-Eq,N(OC&a5:MkrGXJ@j^9;#l*4paMbtohe[SM_@k8Fk;RUB[@PKZm#GM]@M"&GR%kIlNPoSAjqetUP%E%rgg/0;1ipH5-A7iYkT,?&1)JFhY,;%J\7IkW?p`+]K(doF9(W5M7]J*iFrV7qJ)"9#(aA5l0Q*Rqc=;3;Zi;UX`of)<!P7]#q_%[\=@Nh]IeL8KA;0m@;A=W)R->L1PMjePAX\Z@`*_S&WNu2cAII^46YIJbk!";>2Sn/6u/_DZ4*E8oe`Q7ugo)J$>c6#hin2J%e,a%PnH'7.h+SbH8-o2o7"U6W&=!nW'a=*>Xm"%I5dlqI/t9r0HWL'af$2b&UZe:af(H"ZgoI.]#g-fV8Ub^4#-O/_,OPoI.fL(XF6(d%/`fg]*ZMZlU/&QT6'M,\>\kj#'QSh25h&@j2u^CX;oZeBE_8E5[4O-`-"Qg"Tu`O?8io=Vl%dT+1+L6a&=nZGejMos,XXfmo#Od5%boO$"%>+WZ?rTbPFAOupo_lV)<-Q-4W,:"/6</<4Q,q@mmgljk,AF,'FWH<p3XI'O0Dd"oa[$]X1n)Mr7%LmjmS2SpW#MK\A;%q@%W)Q^24YMabF\NBplnrQ$<$baNEA8OIF^e!rZ#UVDGs[c!g%m[jMc!WWID+j0f0'[f[3o7bLtTcA#GY2A!:`.-_?3ZeqlB<jIcnH_%Q(qBj9^fV_:T0FbVlDJiG7dht%G-ltQD&Xj(SamQ!*rG,6sZs*`*YVEQ*8-O<\p9Bra8\tE(B]JP>S=63.(NO,3mYcd&l+V7V+6]%#dWnm&Q,H9Na(sWN(OD1`TnH82;s*c2uYrQ46tX-A5jnDfAY"k[N6!&\toJ_RS)CeW)G'/5Pdi=AWcb`QLpj&pBRHkSH,-"QMpej%<&P%[6@ZRqnj(^(%q*;!5<[2<0e*DpPl)(,&9VFbLaC][*rA4&Ri9EoF$K9d\ep^<blqhis+lt9U1Tmcp&"_r<5(Dk_rbPiiIR:i%5#aC-VSCW+7%I#\4'%W;^NUgce-3'\aSY]:UJa9,Pccb+hi4Ru&>%<)CT40md*bM(D"%4_p%sAunlI]@#Q$k5lfRj6#?sfWR76iF%?C14j<6E3-16"Na-P*S+#W!r$_/*n?Mc!Uig'88EQ>48=/KG<b'Vm"_ouY1O<#7eFWKumQ(SXZV8at?o'c.I)l2ZY;[ebD,.M2u@%^RhJ?4eYLHs$g-4LDNm#da)!>#EkPDqh%b6,V!Lj)Q<H0_5L?5^L(8\\nN,rFn44Zo]CYnA5jc8VZ6K&4(T!0<O/lb9)i(:r5GU6%&&:*SRe:,hG)8h3/*;ae3SLO)JfM;rra8^*$Xgl=Va9Fd<13DXce`.=KIXo7@Ti]oEP=]:aqBcbm(DER#GY0\!M\=poYY?1eB''t%]S0UmCa,WPNqJX>&\Hq[W0>PWV%4"ns8HD*asU*:d;!):(Sak4SmgO4^Dg$/CXp/Z[>Eq_<;G7hK7(VG^:P5IWFG'W_UM)N9J/f2%"==rGS@%lE(SgQ'BHbI=BtHMEUJa:+i^.g]0-]\]hN'5&^5Gh<,U*Po`^f1;SW$/u!(<"1U(`EB;(8+oE8PpUc[i#ns1^QqPjcRj%q&:LhP#UE"rRb>5N(U1_.\*C&TR9/W_#U_!N*=U4BLL?Apr.1>/,LjSNMmKq^l!82Xo-#!;(:K%($h3LW&tr_Z2gnl+BsmG&9[Pp%#*@`W/k./\*\)=C/3"iJV>IA_!6#$4]92BYL1jPf%d_uf`Kh.3&#_(h,,-]"I9J@BH`H<?Zul(r,_'VPX=ctR_>Y#&!b3u<7V2P3%eY:`@^'L#/T1:@TM/<lQ0e2:k:rVD,<;;(n>=ugY<>``WT0*[-Ec@biKXg5`aMjGX?!r*/MJ]nk.[uZ:62&d1-Uo=a3eS_$s1?qs%6q!S,s,D6Iao\=*PushGG#'1tQ0S7%afNKe7mpXJ8>OhfhUBHB<7elsmU+inN(U?RE(e6-W"\2UHsa.@j!7SqaGN4\E%t@9>t2sS%1NW)r(mP^LLLBX\PDOggbFL"Om8VWTW0B_/.!rUWW%/X[?J`V)4:lYCfu`Qr),t-G2K==!H,VLFN6:#<kk4Y#\/:Jln2Lf5MbuL(%6l%rR\IYLIU#QV*o=eLhb1)lI.S.k!mmbeYb<NW.8Z7e[;t!J'0e/)L+$"i;Mc!WFbER0t(Se8N1]=*CiPha#3NgWZ.jF8_8)p_Z%,,3@fs0gP7`DeiT&/ieBi<.sZN6:daRC$m%V>:*BpWeSnHXCi52Wr&8W%4/lLrP>b;(%u_]OBa;W&3,@m8AEg.XSFjoW.+D7ch^7%:X"T50e0(haPt".q0u[DPl94=B$10j8!5*k:55CmZ9s+#U+YVpN`pld.c8:J1AT]AU[m"kBPGhNrF/aWa4rElqa>]a.U0>D'$TQ\%0e.NrZoAVBoA+*E/-,gQGsp0,A-lA*OPsYAWLeU*mJ?^4WUdNC86'A!3k<#X;U2;M@+soQLq5N&I73L<>\ki8ma[Ru5h$NAI4elO%^Dg#t*t4]W?:7FFT!Me7(mVB@ffaU'9/WdsZ,L$CQ20>/=AF0c(Dg:J"=)lMYo.7G6lj!qH+X*4W6<(^'#!9X7]!Zom@NTP<6CN0%[#_3"b/L;9^VAg>:I_/`J,%g!(Sd.MDOK0),3kKS+30+o;)rc(gHA_*WdF")\,D:>7V1j2oI>u#RB,EPUT+42W-iqV.rR]&Po<t(%5h+I8['I=$N(Woa;/k1%2?)[YW*H*Zjc#"O\mGWj%R`W(^HWR#;^,bu]0)K2$d?r)>3Vo&+B518cO0tGSN?`FhEE\EhdRIRpOs,G%Sbi9[d46t%X3A=a^5.\EWCDC#Dk;n[b;Er>=\_6,d+n7akb&mS(Sc"ObL3]-k/^M)2=/Q3]-<tE^&He-#"2aG/T3O[1`)obSc4!U%N/UAV-h7Ap8Z5OZ^[oSqUU%QhoFm?afs>6JOtbna%n>ZBpfQ0*oKqZ]W1;Nr)m/p8A?'H"=.2Y(%>_T[bLo;f6sY7V.&"_\PQ7#E%<C]NTKTeF:oSAf.a.N;C"/;q]_e(0.rSYe`dO^uX<\#BZj:_`8]/DjqJX12.I+oH9jmV@Y)T`NXOY*Ct,J?/`m_u,(^HXq$7Rgs\%Q:-<?n/%it%0(]^)A%$[U646C$&CY8qf>EPMc&0)A_a'Zi5MXZn6t5S"@Se!rjfHK&9W%r960L`A?,PZVOOD?Z;B//W(RbbjCTJ7%;(&'O7t29lQ1(rC["%U2e<OX@cWXC<7\u).DI!hlQ*$%P:C2igY%+UT83$].UW4,`)3o"(=d,Gu<&lhop?87qUGCA$]8phA)Af/(%MgM.)q*[^6>AO/Y"&UFXJ*mK3KW83mmE=0`5h)d\T.B;ZW9\SZ4sDa3e`Y8&HBD&bgCr^)Obn+o'B'of,GIr7r`h78Lq6hB@i-0C%`Mcb65;sooN65%u?P`o5Q+HmaO)d!*>Ht:V-D.gcPtXNcC)[b-,MBrcnk2G?h0`.]5Bnq`-B:3h1.FZ;H>U,>ALm5jW0@haY"t(6%](a_Y/Q;:16sWCOB`&Go*V5Q!)A*jP/_PS(pF7i)P]N?N\;O3EP-p?Nb9C._buhPi7i,)MJp>Q]UkksBV!LZ+[Zof8V_]-ann%.J%)W5't.FC`>pNr7R,O4P-Eb8Zp.7ZIHQ&AMmT5tSUdF+#"m]g&V8p0t$FX&XkkHss$(oW@lo)4P5l!,06N63uFmFV'%/k0F?[OKD9%k$h:6]'QB4!Duq0m2L'5F"o01Zme&&$l>\EFk`2C%ai7o[#o%r6NL%CH>Ga,;/,(;n_bcn-/9*XD:OH@9?^_bSh2)MngMP7*"d=s%6n%kW*Z:5s\P$!5MN#^3g9H,L&TqRSGK;n?WjcKL(C4%+n@*Uh,GK(!CE9I!8#Am<,1pd1Yu=gBUJ`]CI'&Be8dUCG$^uuN.40Ok%;&T^?V:K.*((k]Sn$i$T,,253Cm(uVO\sfhIdXgSN678B^U)JI`Mf:[G@NXf7&J+=6]c)6!E#2@22sK/7n0=9r5$<m=?D=tb#`Z:%'t%!9ra8]kbT-9KJb*>MWl(I$?pmIqbP`Er!hrEur`jM(#ur3Gs#i@RWb-Qt/FJ_$&oIu<"3f;faJ_c][[G48bcd!hCYXl-9#PrW%iIR<?L)uZ*8Z8YgSbo`0>KUZLZ)a0Z7V,A])10U=,?r=D6X,A*b*d),iS5e'eV,>p[D$(0IVr[&Lq:f5h4!h$[Zoe]od2FDbO_=_%L+g!"_cd4j]RZqrO&"$Q]JZ@Y)uY9aJi"\:eBQ=S\]C]hKDVnHS`sT_WgfXHj9&:#g^n:kB[t&BW([gSlh59N7V/1[;/&cle_A8M%#m6o>%6FCkGVL[`Dde<UN(P%5g_r+,.XUXI50CjC*-KL#RjXuZdZnlh2@r_[GTiU3d1K6RDLQPq[UZf`UG=c4q!qQ?7]!]l]fU/s%`Mb?T4kDG*UJ_R"gc,+g;;'[V^*9:H6=g$'pgR4&UYi\u.U7qT=m#7n-R.(eoCI%(UPi!;Wiaq)j$ZA53r87C-R.j4Wi_+NnVF,B%8&%1nNek9hkbNX_"&[ZV)g=7I?B!$ug,Xet(mX,mk_/Wh(Sc!t[O(8:/uD6#,KO5iVS-[d<2FC5&ALD6N65CGGj`YOHo(M+D6A"9%.W#=BF-MS[=`Xnq*>t,OlK;&n7RUNpdb`Lm,,9045)J=i`Mf<dQaa_m7&7CqO'29EnR>-Ojr"MF0e+usP?,F6fi$,b+p4RB,fU1s%s,1\BB/s#o(Se:4HL<7fCag6pZl41"<-Blqf:._Xb/*nE]DBXJ,ihic,1XLI_4pg-%iEttC2W,j.?94qpTYJ&efAGg7_Wsc;.nq9%g.dT`\iT+Zd/p%;#GKtESqO+-C]mqL0et4KZ^i;cCbA3=*9.GS]9k(1e;Bk'XY13@\hp&N9Cg'#bjfZSU/$^Ggn)O)W%@m1^NWtB%b0'LT<C2gFfbg@"H0iMK<%gJF*k3&PU\D)Z%>_UG2!kBK7&k%bkN@#d01KMf[K>StcGc_]:Hq&KMN#]efa=)[mYaqF@ariFW2pc0%[(:d<W,&6$6WcV'F[jZZ0f_!=8*T49rPb_*.rr)"Mk<\.^ZfsI%G<U+NJu#EB4sGj;9>K3<C-^`a/C2[3tQQ"mH98/aJc1Y\UO*[%<6>Zn.aD:C/k0E%gO$B7aJ^)XSRFGnUN/t]/#;kfM,up0.Zk46\+AmI/`dsED=nh[FQk5h@..9pYjeb%9MG([57^Z&"f%=qW"&(0%X@e,E&'NZ5"k(lfH^4o6jsk_29i&/1m&SkF$8Z?<DY_t`)^%"*=^rV:g7B;!V$8;_`u[dR9QmTCVQM4lbm>^,-$t4E,ag4]24HUe%m(EER2&Y(',I#D<+P'bJM8?rr@tGGEgR*.a]ZLq<9mo6Rkr)77jjp27,G-OgD"<L:[A3A99a^!.82*%)m9`5I7"E"!]3/tF8*FQ^%Ym4#X[EVhH&u`Jme:qjI(qqi=*];eA-BL2lpfe\\H?f1,?trp)T5'`\`GY3RC.@/80m<GuE<qN>.X_/&DA)BBLA=<K(HBV_ik,dV%F?Z/@<%I7T7Qp(TP[eT$O\[hP5G!>hM-,7G;gjIR9O/H^O\\-\H5+FW1Bh-:Vjp[KhV^5OK\cO%oU$SLqml?dn%l`MoU*P4mR;Rq%]aPBNBtabJa8?6Kqacc.&\,92*qLB(-2Bo\TBYu0(si]Kj&/M3(uX[`9&`2()rM7+'nC(9#mhirnPKH`&,<cn/1&P'iAO$=,_puT%%S=sm*\SZ_EB7Bt)ZV3H$l3#I9@CL2$)Apbh6U`OhENW[m5Ui@].*%XGW.+Jr/^_'RD5T]g<\[)'C>]mANM!tC3.O@0&>-Qf1u:T%Wgd<TD!iX85\qD*[Cgg=h"U4#A_Yj[iRJUka,>H?"F.Fik?aGN\WLpFh_C20#q7$-A]a,['g2T`hc4YdhR&aQRN*TTI#B"UgYEOi%S7f5ZH<N@7Z9Ke1Dl2_1BX`QoZ]es9SgeKGYmDjZ4#")Y.Y;ILZKb,kK?<T9$O"p7aSlOsNZ7F?.q!\/GjfI"ko&LP:APCLX6S)?%s0@a@^4\7UG2CiaXergda3?J'`9Vm_cL,PhTAqp3^=9#dNIK5Kc&UQT8&0E1P^R>eFPhhp<H'p+S`b")R)-PX]GrKU\p\]:SVLM,%gZgoRl=tV%7p+AC3tJC[7alW4F['U?`te"lNm8;$?=ema>otiq0qD>(K*OhN7m;(u=ndYU8b"BkGh*OAT:MBLXlGo=:=a]X<IopO%LE:AQr0g/;-ZEejS>CQ>Qmn8@&=E@ejJo:[/T1OB,gC`]E]r(1B-11U^`\!JZ_6GEd)_V-fK;@4!_k;K<mN^M+E7qFq;GJ;>lnE?%*1^)YpA#0`XFOnI/s%/:,e3-fO47mQAhbQ=lf9.7f)5#*`Q?-1_Z)dH4smO`0<J`1lnpRmprbZorRa/Ya,rJ3*j])2APPA#YQsQc%G]I]PYakD!3PMYdlnmMc8:G5k(WjDMJPESMoj!p0A/AP6Yr-_ME"=F24j;U)UA;PT23Rfrl]SBqI,6LH]0&+=<]!"p_iKWfS1fuU%6L7u@6;iTFL&@%'jBA,0&+)/Wch^9rT!`23q;#KJNiaO-X%'iBcgIgpbG/%>2S?YMXGTu%5&*fjEnS]i/N&lCl=jOum.S8]qI=i;%Bmgm'>/ur]/*FbO9('745)R9U"DlA)m)m;Q\bdbTR^mk@bILf@[_"f4D!\mLeK&q;G)8IQhl:HrE.pH9c@NC$T7&'=QtM,O%#B)W%X7@NrX6+8S3HL8aRsCMmdWgelrEeN@)0a9K%`c)BCHMj^C0fk^QfI8qE6Id\G)g-Xl++'a*,HWk=bYWgkI3+0c9iuI'&E,']8il^%,g!?W!7T`YDL.]/1YP1Ae2?9pRgE\oLRtiDg_ifOb2bLY=+9OE,9Ap3Q8]$^ZL\GcfSXr[okrEUM`m"-4($qbf[sgc<Xg!12rT)O%_'mf=eHaDe\AoNbe,q'#H2\31dQfq<^d2o0d"8=KPE!N2Oia@(HiB;n5'F^sRQOqrg]rlQ\A'$=I9CE5>5Dg.HQUG<m,%>pXmers%_&"/Gq:LXQT+s0(?LrmB@m(/%BXY7.potTY?bkggMumURN2rQURUO-^;iI+L>1)m+f?tB=%i-DHKoL05!hZD=/G$\IR.7rU?[p@&%#fJ-5cK9Rl2%`TkIV_H=YB%dO52KWjmq?^TfJd$k?!#S6Cf,Dgf"Kb"l+1lpbr`#]g<uHB6a#_bhJ@JkhfTP7bbDCK"iujTh)4fu%[6X'6<P@j]WF#>hmeCMa28/GgQ!QoM\tE_Pks&4Z$0-+9G.,ZO+0g@%?(#"'0t[2LmNAdRIRAF0cCXJV]901M.*1Bd.VH"eiejPu%i2p!uKb;6"4d6tJ[2uC8-t%6&:%<Z2gktH(ot(._f/$V7ianF[(PW"O-Df0o"R[=:;&$R2UF+jRA##n]`.0RmQAqkIX=V+OK32CF%nQV4S0H>Z6J9`1lBKVpT_miodQE](%#C(p9k7sF4U%Sref=Y$FkAt%dU0KRY0pH=3U1!UY=U!E#Gg:UmrTo+3%Kg9lNfmh`2/@-f%Tq/4bG)"2AYRt:g9Ik)qm5YDAT[CZ*Z$dU.KiYK[G.*GpK7`V-j!@bi)O>$a5M'"7OR)FlArlR)l`f0`Y+Z=u#jE;_Y]Rg$HAA$H%\dPiWb=Kt(D9CD%a1i2ORuh^'fgd9V[NiD-8]Sku0FJ\%,;M#dF.^nZg5Z0?M$C7nlTQUY5"tsG`_R#f#c,NCpa5At_(8Q(o(+u2%7HI6SXn`R)V:Od[ST\jR83j;.G!e(*.FXYFr(lVuOBELlF%?P<FVcL&,uP4BDGt@S^bdMN3H`ll(JFqh,U4UHRa2c6hpc]d9Oleb%_`aA6!GlMu"dCPX5TGD(RHF6rl(?L?,\E?j(qAPKQb$8"Z*p&PR&5n_Gq;[g"]f1VAltWhAJ-AF#ZIc`G])2iR?C'5M+2q'9BW3H%^SE)j?8IHaj>rT4(`Zi.cP8^N;2J47kp=diXl[VP#k)kKc=/(<FbO=QopK?r:Pkj(R=D/d<&hFi#,8s[#Qmg&cajX(+n3QtZs3J`%%>06;82HuJ3C"s&!1(\QnRcNoaW:jagPS/DCB7)4\kA#R[U<KC=g^[C;6T=b_RoM!,'hu%U0ACrjIre6[N=[g1clY(U)27*TK>(C%Qt9O?_Eb;,F>b?]7^Q=7;H.^_@L6-cPL(AH]pMjUKc)pQ_Hno*f0S7+[9!O<[$sL4'pWJ=%WW38E/.E"RS<>'cU,c"Y%Ath#+:bj%g9R4qjH7u?R"b>F^bdNQB.+"k4I<gL>UFS3l%7tObo08erlV+-r5p:4"W7<IImXQE"KK8#;_8u>2#ZK1Es-(]^="Lgb$87EFub--%:>."`1WiaEY535q]tgCT6&K"%J.^O\W\j2I(U+\Il^)2[A`k9?e(fqeVI_.MHXtfZJM1ake7hBA=Au)P](p)`QF":j?)Q2tbZpNO%;2PP4+Hmrc9kJQacJ9*ZMK9YH1;-%j_c0Kqk!"Ia<71[dWBoLr!p_3!Nk,^6pd81G)3aapF/`#]!?$N/bqeQndQi,A2([,$cRO1@%qH?l>Ra_X=O2Y;?pnr&(s&1Fj+k'7?Q%(1q,EY-[\uK>pFgji.V>kUBaO&Qp>d^EERq#d>?YuW5PC*h.TdQYEm&/r+=I-'?5C1-%%_$k$0JK*66[9)\PheMR'Qqb>\f?jG@.uP(&-7)he0S!2-][`QI9/QjqAI]e9;eT>lLQ*$>!i^#>'3X_9ORQ+*_I+nK$?_N7Y5csU%*WU,f(Z@cJJWAtOJ7N+4fBhglXjTmM#6A@?eEh1egI?M.gA],=W<8T-5>b</@^)T;-c%@[)c?u<Z<ZcSR"IVjbj`Q'runZnD=U!;%&>gm/R0\md?=Ui=&91(X:XuB5P*Sed/H.pl>7GKDOjs(2W<Hkj"`DSn&VW>.Z9.;c3>)PYH+\`Faj&a\h<^S5I<^1b6FoD7S:pKQ%[cdQGA$K6g.qYo<1^f`;6BJ5Y-46o0@nm3BK[)g1oO76ub$&Rh<%dkLnBbo2_ZQ*.8JiZuHZcLqKYbu+4!Wh-P>#>$>(scsG7Sb^%DGU)oQ_%:XY\Su'6..A>fs!IYZIqAr;(9)Q?q_ICgua?Oi#(JCcD6*@4oe,OCV``R&S]LODk&)Yhr8!hZ%0&Z3=[3hQYa,N8-?_P%r_>.A.,m]&=L?83Ujp?Po7XV;#32d)XiI'Jp8?G-_Vgl$lUE-JPN26'gjcH/<=9+#rI,CZp6G"\?g"JDKV<nDGrFe0p1qo:P%,uj%?L<Ye9Lj!&@Qg#gEWmDaSg,WL[C(!brNle&lSIY43V$57.NJ%-mBI3M;CU)M:?[28a2U6V>38%DTa%;)@?Nd1W6.,>a`TK:@i>r6%IqZ8NY[/oRfPg?O)O#u]SN[i\dnJ\SP20?OO>'qrT!V_a#aCY"Z]XKFG$@us1*@#3F))O:ms8ghl)p[X`j20M+2fh.!F_-bDt3rs%p0-7A'FD0XYD&C=',"QlL*UMk0'SKC$QC[\$I4*MBPJVJ+%>0>c(Vi6[s/k6dQEH,^To=.-9Gcn=HauJOplD0V[WbfU?NT37Og#J%Rh.E;SbXjGI[TO;XS\P(%>NKe13H_pnG5(.28d6"R]",WXi,`TRRYT.E!mMK:f7?XPY!J-R2>%Qf@5%!Urf]2-P$/36ViR5.na#:%.BR)B-HWP0M'4//.++-X=Yk:58TkW=nR1R_?7h6\HY'AaWDg.s(RXH1S(u3e<*#ong9q\,@%,(=6fkXr=@qjYnfS%49/27WS.F*7%HMZJGA13TSUL:YK_=UnMa2<!A@$8VQ1.aC!9N.cq#4N?+S5e<7IoT(*2udQL:o#gSR%(27=!RP4[ko?=1S$SJbT2.I<s"\%"HOQN%SRs*`c`\<26h%)gWNncVa#\<VZI'j&c#jF[efEFW_7Xk(?9glpI(A37Gg[On3hT/6_D(^9r&N7.\_Xu;=-=C?L%K-YOhVl(8U"@B%hq#oFaU1[AEj%KpT/oQOnXGI9ZR1^8^Bfp@8r4f."KVKp9%sRd;<+KJC0k<%5-PZGm-0GZADB^IP>#H&:iMlo"%\`tpsY@_+nZ#Z%g7kdce<hqkN,;UPN%L+'LYq;T[3ks<XVS"YXlPAR,p5kS,>?tZ.u>O:bTo8V^QRhBTR^`cLf^o8K>H6Jl&B5]V\UW&opp1*CaF8'%&!7cAqtmL]Xo[#<6(.RVn!"C#1^+!D"GKNdXg--t?N/`AP@1n1><Q@4X)6qJ.23U3Pud]ZR?K%^W%e7Q^E-ShDZ(D6V.N#%^6i<Z%M.(DeLB+Aqlj@PC1)X=!_r-Ck=g,DN"p4.KA0$%O:[[ps/6>9WXA?;MMe8GZ-H"tcG?otE>ZHe%.'lD&MQY-QKpO#?*(:b]L4'gV%[]uWFa_jQ1l,\0J;Q(5a*0IM*pJ0S%H65M@XCE.a(5A`S\i`60$LG<rEnX8@QFX:AM)R/K]Q2fJ5O,JG0`MPKZU[V7P.)?-kBg/h%gH%TG#hb6VmS6rPOF_B>m:%G.p*3XBPD&21*3/P4CRQ,(=BeHGLHBtlO?1Ut$V]6Y")0n3BufKl\Jg:k8KidS[T?:A7>57Yg--'k%3Xe_cZ_=)HM@'Y$*d\!*DFer$eb-X2A2TJ9QMk;YZJ0sTZTSR>.ZiI%'Wpb/JB;[:[_M0W,5Hb*\%!I]9]En^RmJmQP`AKLB]eCQ%'k@W4m7>ic@,WBc/\%bHkJ6q$[Ni&FAimUh-HY5orQ>%5R=p4'&HnRn2WA^er1PS`K@n.WR7s0jcTd\*g\=ujGf"0%>K>*c0$<=t%2JaaHQ,#R*qiN7h9h5,OFP+`VZUok@lqjQ6@G!]bKhO8=qbIm0ZnGk#`0OSr=su:CK2$dE;R2Pp[`;so`O-mlccaNSS"DU(J]k]B%\6s-[.5?#>WkFrY.+=83?R&n1ni/,JWtAe(0/ZHQODHKC\rV9Vf*8bBoS%cEHS<)?^R?qOW;Edo9k,u(>)ar9_T%S>1P>9[FsL?d%Ku\ME2NekS@q^fN2=nk;5GT+_[SI-do\@JA%_rKYgW75#_%9D-')uuSG:^pb7C&4KhcoL$X+c2b.us#Y_5$pVcX@3)jN5Eahh$_H%%0sd`S3EkbO%OdsBn_o#E3Oq423U^^-h3IueAYtY"WqcVLR1gj8_9BJpKMfIn7;"*bA'!RFK[i2P74rV]BOC1_;S;do<>"]=I3j[%0@6qk%#:G2FPk$_Q,$qn"_FF78*h,8L*XLS][lc7'=\\0.tL'2\*cmI*0e^9O-peXYI/qkqrkWe.H?ta;)_Q_s/*Ep=8Fobgo7p!%L7'Q[7YBYW4SB]Oct]bX4g-"<#"/'`M6\k-F3KAOFF1lq%*8a#e/RJ:HM&5WCi_,UGVE)02X-o^VpNPoTJDK3_\^>GH&:7dejE(O%$)R`3pe:OclUpW:ACFf"OI[3c=RCjm/f*'/<cZY?pj<7:Acdm)9V9h6Xe($FWSXe\`D,0h5H="uD[V,!'A9eZ2jhAR*nG+tCa#qn%:Alg(>8M+2Z[K=6F<X!@EC%`\&ER.LR7;hf486W7.p:^1cAcNAL)I43^:4f2m;MFh9mt_J1)tc)e,,@ME[Bb2f<A/EJ^'GG7PnPB%Y\ERGbg7$IG\-Wgoj;+4qh"R8$!tEcQ-DNpdTA2QDop5SnBp#TFb*+8(r"n^%eiM+TSB*?gU7?V@iWIP(^l'#NOj^qQ*!4841#"j%%1QIE:2(g_l'm]"aqb>=GQunT+'H?Zqp5PO;3`I)'Eo:Ufpfp^NRq"5Rq3]^S7.o$R)e@]Y^i9f[n^PdPuGGkJGk4CM-3+%MT$(@%^fA;@YZGDSCa\&@Tr4iHnj4)t[dqFheSa=flc1Odm'r&3mAUrb".*![g,cBEEF<96BNUn8FM*:D33]q[QXFL\?G5W6+(aD:Wc;EF%5;Xf>bmkS(b&*e$lR7GRfIR$bUCmcSgdehT]&#b^+;dl"(.5E#][=l>Qf&RXd9Ktl-n:FA'0abHm[rcTfQUPM,=dST=7ki;6BW^a%R1Z/4:AiT7p)J3e0SjVV(`KU>R90p+dPMNTHhMOU'WtMF^C'j3[9mruf,+q9>Za8RW5R%)3+"im64Y-(g#A"H"Z-p0<N\gGULdL:%2P-&VU23mV(q_5gH+s+"5VS6EebE"^]>]>D%Rs!/SBTZ7F_"#u&RS2/S)'+/7@*a`_0G,=$"aZir^OmIB0[BJ*:49=2@ke33Skdj%J_LRjD[f0e\JgJJ%IZ8`n^q_@l`m[dB<?e@<,b9j0JN56Yh<^hLFf5eCRhXf:Z,rc;./ft:&<\U(I&cBjuO*%"j^g_2U+_9eN`D!%Q5#atU[]lZbQE2T,9gP0.,-Ag(S%ijF&2i%dmJ>10W]:O4uiBrCDsii"D3pHp'l!*CKV`c^;)6L`<(l6!XRu&CcP@;ec7%D7:1\$%lG-,Tc%ED?^3R]S%-+*kOd@YH$"#OEn-\"@/1M:HGM2hDCnHYpEL3%g_.!RVB1KiD$X\[1S_@ukVABIn4-SKU_N7ME[<Am-p"Wc4%joCH&c0_uI"PE(79^j'4*\jNGM-D<.]K:KI\+"N0e&(ls-/IlT,r9l'!]f6$p:T!'e:)/QEPeC9Tr7Iq3O>")dH,=QHd(^2)@hii%7Cg!^GW%VsD2fWNg5E1;jn\n&mE@/o<M4%2n()9&C#7p#XA4*ON:qp[ffG'nf$F#3J9tR$4dL7f-k+26n1fh*1`hpscm$S39mdMu%b2an7RI/Dik26Y+_V'@IJ;IXX*bXI,2-ND26dDOr!F&Sm$p',O=0piXFbNG7TbU?bm3oFS@@l"#KA9HY`nVX@T,+BkCL#\U5O1f*%d&W49Ss<#\%<0e5Pf"65NO.@/9fng&Rhi_m5NeCpm9,H-K/SfXF_JC<XP9"m8b7H0)$7<<ja+X?.oeMCJKY`>YB@Gq$g+XL7MZKb%:]'<P]AuJ0fkP@g>(Tb*U\D#:iOE%V-iMP2=s&*5U?47T1a>`UlfS7Hk=3Klm19-n>,U\u#3um!ELLU$baFt-PH@Cb;S%OM3_)@0%hP"hnrlE*d(""c2^uD2GiPOa18)'T'1\Bl<-C`&YE:[EH<R<)Vi<"]<[oXA_1$3r;Sl6/)*1a8Zb!)ioe6"D+^:$"Bc1G)o((7PY%(b@7##42]31_sngZs^1[FPSTPC%cSKEIg\<fR=+!`j=FnY[A@[[Q>8/dHp81gRGK1\JHdlJ^I+Tg&p!r7d'Ral(9!rZXO"3/M=+)%oQUA'[?<CY"fq<4-"*d=fW,#<eY`"L81b%0DYto-h<Aq.L#4-@]t6!@/28f<%0^/8[IM\F*LJj@\T`TXj3Kh0=1<[&>m-;'e`1)s%pJTH8(2[^P-ii#<o0;tQ@$lELgN%?e(+`\GdBqdRZA[up?XU1!m,lI-VEKS)LL@Cuje`U+3#Gb<4#$Ik);/h=Fg;ODDMBZX>"d82%!79OuljMkDEbp+#-r0_#FM&Rk+FZGfD8<ac35Y;=hJmTT*4Gb1s8J[`Yc6A4CT`gBq\\RppgD5/fW(S?X_mg;+S(rU^IA$;GLUd4%:>u%TYh![]5:cb5,K>+*e8L5b]='@ODPigDqf(`<+gAoU>^Z\5"Dp?/qAoIa[V(@\eoFgk$s%X/Rl.+Kl+!bB[\M\oYYB=+NukOQ%;K!ABI=?3(&X\62q.AHLV;<][DII%%g&P/'-_'Im\qQ.>,3a4"o/G+.0p>rh&i8YhE2TPh)V"@g;(hjE%U//bd^="Ia&k+\W4+61%=@r3q<jDVghJ(mUA<qPE5^ocWa&W4%>m)oQ4nh^,`bHJnC!ol)PpL6SN`CV&1X@t@=mEO=Ea%+_YLA]$HEM*Z$QIj,-Etc_h4E<V%bUTK(SpKhp@0.+28@%/"?Wl@L2NPfo;!-=;Wt!;.GcKL.3eMEVd:t\CgUIp:(';M#)127"F)*[qlGNhH/G42ZJt6*riB@l+p%GS'%pmbPs!h#mVHVet&b[X?UAdr:=m!tM%hL:/tF/sIjeP;ZeFWTeU\M]aBNk+ui6aqO4+D3[FYp3B^Rk8a+F^OW[UT#;M5<RcS9%Y0"%e#aWZP0J-tPAR>?Vp@2jFJWLkMf(M0UDj_cZboHP!U6LAE-*UcE>VO7l@r:\Q>YKJ@=Jb[2d2a+RL6-:o5^ua/5n]IK?7RcO(*I&%WLg`;9OTiC$@VTuU)6Q+a8F[AgKDi`Oou^@c=XNOjmM61&*7.]a2*GtjYk_$K8+q]c=[eY,,P'L$D$j5Djr4^-eD[n0Q(7O+J%e<%f&P\X.[p]*pf-LY\,.F)m`TQ9!r"Sok["d<Z-#RTUES;\4/t-gF4J:)J&.udlXs>29e/4COHKcOb@5AA>A^au>@0h7,Zr`Jk5s\q%%aK8rUUf7X:]f5!#,]XL;kpn[SlI+qI6R,F]_1tK`$3UkRJKn`-s8oCc+_Y1cW/Q1>KEhGS^r,T5!"*>?/=tVf%]dU\@RC2m,kBn%>[SFFZBc#Z)Y4DKcrk;SAqO[_?*7L`croi4g[^qo2L)fQDe=,'fGpT3:pEM2(-:T)_Ei6+=6G=WNqq\)FP#8'*gjOlk0+aU-Je?<%0u4!Ik!<%]@*CZP:mn`JSd-N/^Y*e'mdpL!"4H#YL^uB-Xgcmlq4[QD/mkj56F:ptLXpdlT5*H>hQd,kZ#PlJH=#&Z9=VImkLdu_%l]6JYA(q&(r6i&mDK:*D>u`,igmfiAZds2aYiDathS?hlZ([;N*8%Jk,O8d%7?4&hd?CV=B!&Ps>df:NrpAlZep?Z"%FF=I;.fbT%/DXq%Q=9%/D(VVl7"NQaDuV+M1H9<XM@N.cg5aLq@&8p/!G`nb1N,EXlC%@0XuJ5Nois3p`7BZ:3=cPlC@%=g9eWXAG0^\#2r1'n%H59AG=mI[""0fZ0)&C=eCV@+l#M+e"ST,C6jfnPX_-U=2mGTDH5qI"`:bRV5=1?=*/c%II9V]XUN@=GMS(t%JHX@^8f'CpdMLL)+%XW)IsS4ns;8Q^QK7Y.PPh@A?A;[^`Wqc(_f?4U?Kg2UXbGUegu_sUV;^r`cS]+[7QmD;Z7/:)+9<Iq-ch@;%@Zgb47(C-fAHRnpu%aJ,rr2#1X?@N,.j2:j@e=_*Jr@o$g=CZ_e/K;XAo)qdM7@-Xn=l83hR5jGM-L[U_Sf$"Uq!OM!p(#K(imWs\^)3o\eiF<C.1NV.=%UAiDZ$Q`N'5sXS8V]2am7a:++ft#iX5m(Z[H@+cU6aq5nM1K@HT=`j\O^ka!!DmDl?Y+1e,\Ip)PMtY)/L4cTqdIKjrqD2UNu_""%-H:AG[LG*dgp'U>lDs(ul7hs(=0VrSa&]\gR+ggkQC8s)*-7*1O-R;$I38n;>N)GelDfX':%j80J>l^*op>lD7?1N`5)=OMmFZe?%M]8]*Ws/r/N^+@>[LNFjWMuJ!Y]G/t##\XF%6(b2k<YUh^H?O5(R$Z-/oV]0^fCs]"Z,]3C9k`<YF6,UWNG#<Ws$p`qdQ0-"&iF;%@_3Z'e9_h%iE9a6)TOnd"=1-rV=FHfOLC/iaUY2VH93/e9I%S_!Q2K#gVFj;WWs2A',U6kCfkAXT""f!?bII#.r<pJ"H1%>Y\m*W%)M(>?/TbgL1kM^/Sprc_B]B/k_'F9,'HTOB;IdCgp]X?Da3HbDA%d:'"3eX&G_,odNV3"M+Y`<V<_.7cSXZ&GfGP8Dp!qf:i*b,*%>\154l4SKifDh<4,]#OtAa6<$2ibqMoi:0HR!.PW1-N]4FLOW"g?S(3!alp1L;S@,a)]hCaWAYeD[)HWff_JR&#QLUqh,$<7#r);%&lb[0HKUpOC*sNCW#eX-a)Jt:rMdBniAfk&=4$0913qpo9EqJ=@PG^Cbmk/b5HO"I#B'`fU]JZE#D85RHLM^:Q#0,1-HsEC<ED>N%+hZMZ^LeO;^J1nTY1UgIWu`5bSsM[nZaOR..&TUQojCVdG08<]EZ[Ki@SJ7fKL[f(f[\ZS&2p"i!G)(P$CI4G(#'p5U_..OgmXYr%iD6B%9_1<,1PtL%Ct^%)fo/h+Y'S.5Ba!*QoU0:^d%?6@YF-ua\^aTW;H#aY*oI1mL(`_d6ai&qJuP^j>XnS$WlC.f,H5'[X69B$%DD>\9.<Y74K0.>F]Yp&q+8ai+Q;p-gafInZ%^W$6GF.Bs=gmU!m,s*AlhS"GfLT7O)J6)6R\AD+a?c6A.-iuNM/?op6dC#<=``R#%ndn`.QT!)lc]9@#_T::g=<P$&o1qS&MX:7$[FRF->#4u52DpAn1nH,s;K"_u>gpR2:7[j>m;l_S;bfK#e^dtC`bi!lj8N'\['T3m%0epXBV(6W26*%C+4$!OGAZ*s6@Ed$8jT]lZ2TfMF-TdSn[pg)O[iQMIC?HmRo_K^k&IXj&RD"+j-!$bkHI[0dQ"^NWG-V0JD`rRN%fYQ33Hp)T_Ut0k%[AOmWa8gg5ppKYo)F9*Vo(+#'B0@*;W-8c>2NdBJOE'DJ%X_@4-!$m;`8*sBCH]1M2!r)9HFX&"-]&JDf%\7A%_.o]ifHRU-ZX!jPe6/uhqu()a+?O_pbeB6$]*OkS3K.N0W:K.F8@F^)LM`42L)dT[-G,MH_0E?m_L2-`(LmpZ_M5aM3J+>+I.bdW%P6`oX;:`,h%OoM>Du<dW]Y]cjhV3/^CoW7pd<!fF`LQTrVX;:9_4oM,gR'/-WNoSUB!Fs1bZaIGl9:%hSW-<1aP`4l;\DdLoXsoZ%gCC)8AD>''9\h5cRh8K)-o0D6ar.l?+61)*7SPdS$lsmRZ'?n"2aH:(@C'k)rN1g:q0$)p@1O\[eraER=0.\.:;8Qlf\:"[@.GJX%q,LsI>I%B<egd)Ult(;U:r_Hj9KNrVaW:L^?UI8*.t)b]o[qon.ltMuAhX$Wc!o!VCO!`RAXO:0=ZaGI/HMCXHh,][M7&N&m</9k%V;39<9+j[-"ki.C[uR89ahG;ZNRT6\9]F-Z;$Vp2lhTDH>8UMNc^W),?dBP.YV7ifa#hDm@*_RCA<)%$_9aSc=,Oo^or<F+1FATU%^-rS(f7WlqRu>Aubk>BE;h)L:`sjco%C\(h3*XE[F$9QcVR6mm4dDeaArX+QqD@fcC7e+`WP+mMe>_l"IZ0^26<<c;T-AF0>95sn%)F3FTW(Ha*AY,)?6YrZ5%9PC/)B1o:>,]?4%\5Ak(JD6(p1e!@1$-WK^bg?G[MH==JOsB2gV[`p(T9L&s$H`A&3B,'4j"!TTju?U%\:>3_okY^HRHtbP_^mLp#o9R1gJ+"nC!M$cmAH[M(N\/#p720k(NJ$DL0c4D#EEZd#-s3\bbYZjX=&!=b(r&R\mik;HLcJ">Lo!:%/Uk%MdGnSKi7PIG">aDuU$%,padGW]Ka4K+A$+*/'$Qm=MLIffVL`5rC9bPf/@2SZ!k0%1PEsV$b4a#!f`X'C4o8?U9TH.4:EN:V%+\W=Ym7W0hZdsJF"'M%nR(&V9OF$4E]2'OY*/!u^H[#]Mf/p,bB+F#HlM<No8q]-jI)l@>B!2Hg.[pKi%7T:MTLf%SWdQ?R2U0g0%mAQDc?H#DTrT"J9\NbI%(%^$=mmR)6`Uh<f&>HMseXJ`(WQUm:_:>9ui$2dETU>Gp@IIf87[.VO(efsQ&N/6W%rJJ&a\hMa78#K`%q[2a_X*O%`h^]h/&DK!9Ge;'`DtM&X^rJZNmq$]TY]^std]>eV>f^`7i=HD2Y@='c/4S,rcYXb[q3T@gHfZ?L_-XNfr5piU%/NAf%rd*<N$qrFZ/gE7cBcG6+/Aot3Nd,JtBeTu+F#Vju>ORf5Q%Fr^[Y4ld2`]lGl?)U%V_YK!PMe,R%`-c!fZ7LE&\Kf3)K(pm$^mOS%`nRKh2MW/GqY)hj>Rs&7^%"qV8]Y&E_d^N2HQ6Y##HocWS1[!P8ZQ@h<cZ+5ohZZq9LH^*elD>e.pUl6lf-[<d*OJ*3qaF%->p-R%Jr\&aJP^nDiQ!]E'dVOsgWg@(c1RB(W?>?P^ej0=%8"SJZ]s=Gd`AY1>Kk7>>d*JUYp.H$$;V#bdf>P*8Y#@\eHe:mjErnH.qa9R%0\M`0EFQ?;"-XTE%b*[8VXBX-n7fQq#'7'$_a-^G.2F2l]5dbs"orbSZ7Cd,VfECS8BpgHqGNq"I@'<0huZrjkdtiIHaJ9Dh3j"O%NNsbS@-]/o/asOJ3n0ifQi.\iL:80Te.pZ$KKXq47knDoIS4TcL/!]q&.YH&H8(DbNFm0M[o&<`+"E]F\%%P6UKOAjXL^KEBk/'N%YOqTt`kWeq/Sk1a>IU@#Z]BQm6H*i?#r%_tX2I%u=*:`iPJ%`6a4-G?0-;]P=P@m%!`q=cf%]Vj@'[L6;-)FV5bgU)(q']NUum!@%<bPmE[141j["/OtDK<N38,UjH"AGpFE@B)G1LT^7"5Z!XB@@DK1A$k,;u7=VZU,gI&HSWoH8nea10#5.L/XOefH3fSol-@<h1p`=%c+/!W@I&[(QAV?ka.B?Q:f@sH@pagB\bSBr`MXi$L'3YcItcp;[Rn^0Yh;o/G19-PlsNnR%OI7ZQr28/>.#omBE7%t#.(DgcsAG_%g[ZBKfC]66?Xe`j1\LgKfQ:kX!J^:KAn)83YSd<g3if.k@0Ii)>HtuZ%J(8r!n[BiTD^obTuDce9`$>`8$2M"MrP53FS!Ni2HqX4%/s]1SgFE=oMp;dI:sJ9het*$,c'#u;d+M#&p0)D\fY1S-d7n)e<n79oFk22[#jZQ<O>-<l\iU9e[paI)SB8hb_<*<^18IT-N4UeQ%L2L;+'=1^87Us-FR>s2\D%Di8"7UAq<P^Hj!a<<ar47ItGGUk"eZ<Z&HHT"h8;pB9M-Lf<o;&""\X*Xb\!GA/m'(Pp`o0,/_p1u)%oq$<V60lYSbQ+Nn<[WlHJ6"ebqErH6\g()1k/LZ,X1'/Z#hs?)Y]D>d$poT;><$bX::Qn3<3UFj9u^QjoT@\0X]U`00[$o9"0CGD%QB!2R5jGAY"5)PpFs[k)Z<XFl8.:Mr9X`(dBNVi#g$1%[UdD?DA#M@Lh&ac)a!`*U\n*r[BqI1ikpGYN=*>d\Q"uWg%/9/P9H4;G%Eih+p\3E(,W`b(,WNVmT@=a@;bdFHRMZd1e3"$Q5DTNA&0[LeU>1+M9qjB1.8^+B*[$(\-o?!8u'1e,U>jOHf1DK@KOp-N@1f7EH%Hgo,$j<(O0X6Y4u=mN0s%)P]=I"QBVHgFQ`h`dE=>%OWa*8R'[gU'6YUG<Lb16`Z2DXBPE$"fT+=5"iP$O8br\l,[$TH>00GduYV%3ll]'Vi%UJ_pYY/$+hu5h3a:k]f@(gH3s6F7PJIi1,)G1l3d.]a4,V)).&YjfTq])FOT:+G2c]YC*OM%%SO9SAcN'7j%98l7BQ76%d;';uSb.D6Qtt7&ki.c-Y.q>KX00hak$$RqlYprUY#VC+'3KFJ!/>B;YS][j3q7p!)`'pdW`kg*F`frgFA$f*K>1H2VH*=,E5?1a%eb-)FAQmoLW:!'SmOp0>WdF>[-X*oW<+)#MGU9^!;dV]FgU*N0Qt=t#=3oKdB&8aN:7<'dq,c:oHud7A"-%bQ%aAh_G,d<+(<O_J%0JIFOoN.?]9@+*&=^g0Q/1&k^]q'FLpVB98](Ijb)49Mgh/UVWFR/=qKUmBhpG6og=l"]J<\2_F68=W3Nc'7dK+sVtbXK`"mlSYV%HA5k=M"aa`X8tdNH\.sgS4?9l9X<qpV-3[th>>j8Lfa=7bZ<'GgX,*!>]9[XWoma+fZdoK+k']hI&36C41VI(^slE2Ntp,AX<','%#'1;4GD]Do4d-aap[(^&=EX(\1;g,m>B=FZATn/.\'WC:bKZ&LZb3Ph/U%,JY6nTRbX9T8%PtRlrKma=2^VXL(U+=KqtpMsh"'-P%^rn=_3,-FW@,(CPZbT)b=bs34i7dnYFN&:rJZ7trY,6/THZ`0G_5NLGF4.a4+J-MUc^r?WcV<]?juE5d\@*]1$`f4!'<LV.7J9$m%kmF_YOg,CJK`nGa0u9lo@J1Z63<0G$-<T@X"3(JEX$5To9IdPYIbkB3fs9Puet7"a$TC!k=QS*Bgt\9LR%k8KgmDK7dhqkj0aTS(%"8pqd4j+Ks0K*QP0*4?s-<OhtNg3\Tfd,`.E-/-NY$3#)eT7qRAKu2]/`s(B]+I$6nN\.r;qW$hX_#AqN<rWe#oAq9PsnTp<R9K*%=nu&Vksqa_&504<k*p=2lh1rliDqb*gh@P?<d*"nP*MnjHXOY7MWGthi=9I;9Wi,Y&iS6G*`c#5IIks0AQF"meb)rm1D'$F#s3(L%Xh(N]qo=A\lV4dX>]mI3`oO-gK,^&CWF!sp#\A][Ydo"2S_M%r$la\#a]2ECBpN%IQ[,@*hWje'eb_@>%^9j"PM<6.\lhf)\'XB=%kF,UVbK5:9Fmq:M*VJ44p75E1Pu4HST'O`aF/ukrn$LU!]h!BFA#E@=,8`8dEui?SWE!#6%/T5U'dX\qX0Q>sQ!&6PN5IEOm_KB6%DJb%ZH>Gf//k=j]`mho-c#[Mu?%qtk_IZ6cbq-,hBUMk'(-#Doc4ZVYBlHWI-b%r!6^Tt*n/;ug%J<s:3,(?tkj28#B9BE=CZinV%?>daEpW^E"_TT(736;QDbH7<1i5'SK<U7!Lj]61!__j0]gtMR=k/5EC]C1E@>9;r3!6j6@iH:OHjd,/mAqL=H=K;m#lOq>!^NLWK%Q!8Zt0c$7dml?A\P8j7$p)e$Y<S+<[jHeNQ8&;V#mH6/XdnW$Ll3/Oo?$7SiX9rE[PC&UUXl#;Z<AXS#GLlpE\*#pO#4,"GEa;ZH%^t]5V\@1qcj!sY:&R_bM_R;%#$>>q%cdsqQ]&j/Sk.,f000Su5D0l6P'_m!YQ_&N+K"Vp#k5$>?\#"B\iaCP`=YKJ[raGP302;,"%^EqkV$gY5K(f,\H&^Jpb_RXO9gi9*#12.D!ppQ0.Q:S:SYcD$&H(HO]6ArtA7DQ?KN,t0g[V_#).]]_;mWkrtW[:[;=/Zntj[OUL%[e9B"]YM"94"T\m.fJs^D[>5Yh-nu"22p:95O2SQ[pG@PET#W\G$&Rl$L>,ibD*QL)XZXuNCF#`h7^\:/T.i/]$7Zcek9kK:=Zh9%AsnC%4)EY:Dj>XT>f3_^Km?n-H/n2e3aF)gX6BSnNO/&KDj/;&1uc\;P.ht/S5+N8`ZU33J5t@YhXg+W[(DlU)=VB>-fh!*$\erS%hTil)2MTWWE!QQT2#Ze'5:4\Pl/:b+K8e.I32,KNAOsQVW_u&rs"DOJjd=kRRZaWBs$+8T&'30XH6kc<@.lsb^\O<KNE6lQP;n9O%m!7ZjIM:\IT-X:u-e$.]8[6]`5in+:HTO@umdQ?Km[EuefO8BZd9&jFHlS8SC!R?KJIh\XDqF@crGMF\/AVlif&,=n41k"]gJutq%)Khluf_;\og2c3&PHAJ=J%LU"Gb_<MN^@$J[@ZG3XoJAKRnp@$8XS:92H;)5rYOV\4P3Lhp:%2@ei!H1Ab2P;Z/TNM@]'j>Gq>Ds%P3c.?<giZjnu/ieahLoR)V^n!M3"',/@^k]5->a%\WYHa+D48T03XCN\rtibQfS/#?'>(']-R-all(TF;Jd;3@:6Lk=b#1C#KpJ,%koTc9/EZAGrN1FTFU_CVm;Ab%q'hMuU9jWD'C-Elc\gg45%@+Qg#!jiVjI1nQJR+@Pi&D'4^P1EY5ISOrOg3$(O%Zn*T^p`H^(..%j8W;3s#CI:rq32_rrloRmRjsiX)jT4P%mf.lQ:C"qmZ9i8599O<VBY7c5du(@#r7]*.NjLQLR[Y2)`@A>\k55rnC`"lOs)#loWmC%*d`>^7:ZqkrfkatqqCAX5##`7LMG+)HV6NZj1aXRBU^$'Aq,.iRU+tRqJ?22]ta3?Y%NsB!3_F:bR!BSKpb<.Xf_R=h<l!op#WD[%\0([o;ebSpEn:5fnu1_E\Qbf^rR^h66`Ykn$q'M?['X&iT"%B/a%P9qk$Z%*L9V\unY_uWL\Rg?4huR8.d,(/Q/17=R9V6AYIjU+%NW8<,8">!g^;R7)Q$ie=Zq9QYS'-'SIo3X(#6t/`'Brj&?b`Ssi)l\g#1QPPW^f)K(<<3u^!,jb`VlkV;knK]E83`k6-%k8*E15X%h_X)<rib-`Y<+kh$jZPo>G!h,5EonpMYEYm3rCd<<LEibAJ=R#[>/O)i\W`5e>odmJNd\pi-GpSYRT7-q7#\'lt\_&9ZttRhTIOB%IF#N9s81iZ^[nV1V_CWq*q.hNk.#2:a'IHWrdECnPlAGQoma=g4m%!Yq3iiMUZ7m)D0@C;BJGS)bUHW:r(gTZX5*T@CQ#Bl`(Zc;%M=oh3UXH;d.'$n_s6DjsYH)i;l"HPq3[mStc5Og^gc_ICRa0RBh/@2mr_9SLe"YD1GP/q,;I[(0TqXboCUt\oM6.h_7I_ZdT+ITC%jn5bNs/7`GCkDLJQ"+$29A8aBQhZK2\HLJ$IrSc5rM$RW(ZVnf2<_+(b"=ecb$3/(l"8r=fmn?W-lVW,CZjM)G2,gi`D=25k.)Zu%Y2XoXf^XkV#6!jFqoZF&Y);2JA\W,']`b6L)H?@D4H1$R>$&7LXgg:2hSeiO`O>.NB`=c6c2XmDL!TSA\@8[[B?Jh5.XFU0cg^3k%o;p!t;cG!*0ED-NblZ8i,o55o_S9@IH?Xotkqq^uA(%o[U"OG5rLEmp@GeMn9p0#\"TLR59u5&m'R;lIg+W`K"rf`:1O#_37GHbe%2UuX`^V*QLP!Y%.[JP!J]coh;N/W]K@nFi/?T,jcFR$9e&Y4Y"d:mq@Ue[*od;<emHX0%W4m+H'lc7i5e4oO^<_Qt(pU.I&&YpIW%TJ?@tQ-4;E5KL]_aRbSWgq).KDqY_8!h46_qZ4qpZdq(9,`_D;aIgS/21N'CD'74rg(/igBg3.eQ\T%SqPdNmIR*JgCu$_@=];C[%/6O!1\^eD9+BEu@B['+O7kQs2P*`(IJWkMS6ToA$Q_WRiUqGGK1ZV'sV$i3;58MXc3`N:AiK37p:m?EG=)1WAfluZ+&!>;1Z<S[@%!_U-aPG?_6/Y6l7>:6'(]?qPHo/)5=j]Pd?bhJ8flku9nqh!EBOfN?/)tL=:Nfl%ge,@]_:+A3XTeCsL8Y!2&'eTC?&/Wf&=?8#P%1a<hd23\b=PVnHDld)&3l)i=u="Cr,\<mCQCE*hhU0Yu)80_bqhO7W@9NR",BprU]'j>6d\X8*OmYOrHe_<suPh;RJYoQVZAndLp%dF6D8k>=aU\G8NK/CScL+qe`[b47B@_h7n#l\++WYq3"n*G;ud5l#-q[`\i=Y,>iWhj%Q#JMtnK4p#Fnp0C9%+MXU@*CXYLl]2T_%d6oGYDHgF<'0grbZRilrd?ZF8)3X%5HV_m3YL^=7V+YSia#j#KqOD9SR[%K2[8W]!q&r5P4HNaM)@@.@RHIk7ClL?kfR.IH>=0[e%a/8KDYtBbXLM`Bbp,GD2>I3XV&tRGO:%p;CH(pj1)plqRJ!B\!j7>/;7Y@Zi[(Z((1^oZq/CA^D0XS+UGg+`$TOrWkdE=`KLsjh\%,f-j`'mA3qq"=13--Npu@"-Pc/59;<4)K8^D5/?_6,#7+/^^Uj#-hGhYb0MR87RI!c2+T[X-eTY=+ur/A$0$'#s;Pb9OXa,<&2uB%4q.h)&kc^SpWPZA4"JXbr_PY9r*4$_lhj^t6L+EW//*p#VT2,T;!@4.*gd)@mo)T'ZJ4KY&S==MT35<gCTuMk:!Ai\fF.+K1=H\'%Ai^W)Uc%clqiB#"r:lU#pJ:hYO$ETt^]+#c5NMfK.Ss6Sroir`Q-A6SjF7@(Q'!#s$G";/.1S6%4^&%6\N5k:n)[,I36h+-]S>M5%8JJ,'Z\$ejbS+-jmbi`LON`ogL\mA($RFK)^X0@_L@Z%@Y.%"%B9g%5Y9B=3C$<iQ?U?MDEaUFknpEf^I<*o?$B!b!,[^$2E8KM1%,kFFqYXqMYn/@I7j321-[P-!5d]nUg2U.r2^,!-B\r8J(EpJH3L_M?1-o2g.YNbX*1E2XJ5'&Kc@@?A$-Sl^-m#9V]QjHF;N;8[*%%EhG;6(-E1bk*o[R17>_qCKe5L?34I4Nbm&AZ!eLb\UBjZ<<BqAEUGG=JPG72;tO]-8,Ym>1Cc[S9"o^p?]=2=3JOLH(HW?'3bgO%_R)W=KkXY#H9.g;A4pp,R;sc@lYi>;9ue_^@N"mI&.PYP)l]Dac_-;B+c1$DdBS"1Ui>"lP]6q/RBjNZVPPseX%]L*+;'a(kuc!=%O`!&0)-CIQ&>%uV)H;!F!q/1.MZTqQ8]\2RFl\R*ZZeb0T5:?6]#"kk-@6OV?CU,Ye:X,?4O3,8j2F,fAac9XBka.t?CU,;R-/a(%`]R&@1s[,Ic1>OXT')*dk'=RNT')(No=P[a4E%m"kDbhjH/ce*D`6a'hX4(,kAeU!cPs48o>]#G]J8/'Dp1>i'/ScrfNI?^A&^WL%QV@"`n_-*D`&u?bZd&*]bk!sAhO*KNau[jMr-6V8'+tHJ-oQ?V(;5[n(ZZi^7F@@qeC.gAOQK9%\<H?c1KKu^3)0CpQX?EorQ8`R%^@,Fj1]rFm'.*l21jgRVh7XG?lJmDjr@!.P/#,ZS9jB`=3_V6rHkDD?>HEKX1eg_%l)o758)i'Uk+Ud&a(dEm6qPmX*Q<nSrV@\/%I2':jS>gba>`q/$9hLP-$$URL/KVB5guI@f0]Up"n.%cKNi;Y=no(&1c<MepWS.m)h6C]A\&,JA\q6o;V:$@3X-K!;rbD>Q*F,1P%F-T,[%1.\74`aaRYKgCXqp\;ZXegE]O<^dT_)tjQemq:jHj$RN"EA.!1$Ja*$R-eNmkl&nHgZ>#!d%5$SS"M?3`68KgT*];_Ye\$%:b:D>=<GMB>n2^sQdYZ`=D\IXXF\@HMPasdf'PD+r=kIAI>)eufJKmQ9#BX0H3)L=BO?$q%;R:p+6Ag-off1<VtL1iVXXkTqag\Z%I3_K11];=f73LD1q%BJ1a?1Jkfua!+f5hNI:NM<!=k25DSr>f)Oc0cSg=Z>n:6;Xf\YZJZ\VHrPh2WarUKnd<>X+33b\.OSi465;%<l]nMI;\qN?%$EN._[a@psRl:?cF@49>5K9B68*!mAklWl-Y2<gY%g1BJMTPico7^*UfR,;nfp]BrTc5/NL;o;M0*W!gG<!6&q4,%R)f)?(_`t1he,Omc%\TMrOi*F6H+V4IIuJe!d)3>P9/9&O5H>[O5EmP[f*<!iP(Gb.6hbFjgh&uG+p0dBe,lth:0*F(2)I>1^fen%1ZgVH\+L]2qnP"S/MSO()su(`m.t;kAk2X\MtjI"rQ]QE:7WI%;6'%@2\gNT<nqD+\NBKF,<^e=Hh]sUS0,]7j7%D;iX\sG-@D8@%%]oH^g2c)+Zcn`MF$DkU%41i7hUh(b?i#@gafDVf6^#`>4>JKuHF_IG6"6"a_%CKN5#QY/p"Of//5j-f[@LOd_fc+'4PMO1:V$@m%QNCHa(UZ+73QuKGGmgl1#Kfkl[IlhiA&k/4(Oj3UGH#F=-2$6#pM<LB1nd<O.gNBW<Vo<SF'GI.f8M#j3Ab14d+m1mRemB*KIn9d%M]UcVFZ0U*b;Uj*[!%)'MfOTIgUK[\?F`K_N,NX^LYS]t!\(7"QI_O9c7_+*0Y^2]D7N6ha1!uV^JL(l@g,PDop)XADt`bC]jtqC%lE>CLh0Ih:ToV<9h3KmoA)YLr006YG/Qeh[I=2f&!XX4e>oo>>5EF^h8F+1O]C\FhXtt8od/7-tMg+SG2\gN@QJ@>*e=ELM@Lc>N%p[Et535&-L+.M.d-h^Fd`l,P]7OKb_*c7nFPI'&1n*e:EQ35g5T(A7tb3ST8En9DY,&WIL/igu=.8!NCOakEW3rq@%h;9p=:0%eL%A83".DX*p(ac^>,/<2o1A7*5Vo?rt0VX[.eJX*KDgMb+.+f!;cm+aKgOnqTn9;Ao'hi@Cd=S(&>ZRoruf8g6K%FU_IZ?X^m=Wkhs%d_0aG:&M:3:Iu>qo1\%U"Bk+"LRVKjN&7r#H_%;]0AU//_j\,QSto5[3>SA3kMdS/0(*ni:#8R81S5B5)4#Z:r02Sa5/-RCBCoN%%:Ut'-B_%a?[!9p$A9%0>nm9Pnn%BNQAm/2D\P9CgQKgiDSs7RRH#3h'^HF/:CR[iRIH3EL[^<"L$XnX7%F$JQrQRL`D4']MqUI1O%j\bjHoB>"hZlT[J9/!.,\8^Rb\W?6;X1gFj(13NfMD*BN%t#8$a"7&;]q<]gq;k^!*);PIqurE]M&VRN%OW(5U[9-_hEBttI"*e5%H>nK\1K#cQ_PtjiQ+[S-:\$_CaK:[U5OHffp5U>L7aZ8t>iol7%^*BCQ/IPB$V[a*g29HPp6GN:$:FT!0+eE#ML_LuX30R+8b]B]%c5E*K;`D0k;2[GYU&0V?RZ]BI7Pp)k'EUuIa1b)IMf#NG\bcLrJJ1$j6^>kP=:$(@3i>YBA=Be!7OC93C&6dPC<W]/dWN(YJf(\P%,7V+JBscGH%6&V3DRc<R[)sVc3oCi[32U,Y37;&aZW,^V@9X[S`RJMgU>3/dgkU"Be5"5gD8[1\:86XNPCahPjYt<B_rW4^<gk5i%V!YkBH.G&$MiNH=/lI`BVdg0oRFRa$RZd.jooO$69CgF><!hlp9="]^[O5V;\I6Ni1K?dD9(k`t1bS5?O5DP2cYi25N(aELSaXFf%0u5fLX-<Di7j\$6bPnlGe=SJCglh,Sr#oBq'K`1@<[H'^0..D-(WW"8Zf;KEN^lJ)p[FC$nbp.O,S"aG2N]l7R`+lr`gZ4q/u0-Z%TF%T]Gn#[/7*?E^>X(6jbt'WkEghjK\6p9HgujudARXIh#Em[(/pG&rak19p#%\h9Tt;=Z^@kmNW0$)9H7_8D\*!CSo=7rs;)6Fj%lptn_4m>lqm.f/D+6)0JLVG(t4>h"?O$5BLqV(c#S=+eC;";*(Uco;:\K0SbLX-L5lRcg>g?&PrXOeb:8i"XtK.-#6>WjYm1TrYF%o26*-Ss18#[q_:c>-=k8:=sAcR8R6<-ALWsoqAd%p[[StQk,t"NOLpjG=l7;H^cD[r!$j]o#^<fD-kq0A+,SN'!K9/jXE'IpJG-1%c"p7t)a9)J`]2Ck':-XRD:<a)hs\S^WFjoQ-'(#T(QN3s(<Md\M!`T'A#gG_DU1teDe\r$p@?^>bcbm%'oQCmkHUA*`V*llidfWY%mup^,XF&/>2d5XkC/8V-e.%;'eJe8cdB9)nG!#99,^G='bD]$8`d+\'-*k,KNs%M(q_!U+Pg#,QBiNqV*kbd@TAJFG(`>qL<R6@X%@tncq^9.)JN_9!KQMkMlWBXma\L$/1pd;^lW"2]J,e$O?O'^*iDk#q7V:kGE(!g)WmeQ@:>OqaKq#$5`X[ro%H0ZhdH,LV&-K:CN%jTG@k4NX\8SU"'Hq<qI8i^qVBap']#$?&C+Oke&p@_(:;XP%=2mpX&>nm-:'@#1!Q^Ga0HT,RPhC=dC5\(T01PL-ITWXka,VVUiE%g[6JVR(G>8%7`92ph;:.h)o<<^YS,$?bhc;^%s7,BTl#l6Yif)+.@P6'+N,k[&2?2p-:H-^A$uLq"@SO3pL3Vr#NIA%+nmG$(!Q6%""KnOQJD)j.C\C8]-6(QDCL4"C+_XPF67YkB1mFF&BpQ/Q"eX1Z-N^78&(;,SCU"H0P;T#O!ci8#j1$en0()HrlKr5LLAE_DGMc8%q9:"53V2s--OU!I7h!V\I[XFUg1Q)/LGH*earUX`9$>u&Lq\5[RCa8.cm!'4_47JJn/\iE?qM:B9+AV=k4]p<k'Pk.3hdYtF8ohA%AC.r&fK70"#UAt@`=Kf#'Lg5pPRrc`Eo,r$!W;A-ORq>$-VO,.O+DR#f126q4m'rjF^hF;f0_7l/r*'HSnRsDQnu4pb1:9sfL%?*%?C.L!f7`c,_>H[UU,"Zq>8FTm6-_R[e^b#J1Aqd.5D*G*C=PbE&TZaBV9Jtc#W_A)">jF"iuo8,1K*pW)[FTT83rPRmsou"=@LfJ%$4`FZpLDq#\3%cWW"eL\pE,!<\Y:4HcBe]UBY^-`c-'FbgAqCtZenVor?!_+,12gVB7C3Lhc/M-$Xu:V;u&ebq"hR,3Cn+>SEG#S%)D*35*=ll9'!6eVG?e(;OW=Rr'Fs!kUX110g+KG1&[SRZS9[\H)F^Q3<Xd2rs*7gOSX<tOk0.o;63&gYV?RH&s,ic=?]R3gpVcU9%rXG5NmsUc(CK=,sgLS'GdbGisB52Nd?I]5gbh6_u`bk&RB-E7>Rc+A29`-S9qiLm]F*[ea0=r9GhR-JM*;ANEJSFp!nhW(0cEoWh%D/Kb!R%"mXCb*\Z3HJElS`P3l!HY,eX,4\&&&H':/cBk\]uQY"FD"oti?9&*LDLJ;n(RkaB%."VR5n[#7'c**O*V5YdsaH_W0Hh2%ORl6%c88]o^lkd*<[]+Rfji=W$l6fH4m'te!TolP!<_r%halu@0jr9h%sqg_$8Z)4gas=3'VTaWk02ZU1ZkDQ!`.*ZB.I&hiu&pm%B3JRl/"Z8BbaDN(.TtG7?nTMR;gRmeB-+,((");9&&H%dOZ_CaR62_T4J^[%E]+HES9\E:_F-,;B8"(TU_"7.KGN!\#j+f2#\^&f%*eJsR>P`1iipdT(R8K_Qleaf-F!dWf]I)2s0JMCRKcQ/<+*e.Sb]?"P3qaTsoCVTuWV7HTk5,-ropS&+bknni41$9W6SL3t?a*`p%4?_L#3DY.UkBl&Oi8#TH3pKu=0kVQN;-hj@b*-<&l\%:.BZD.QXDP@QchBBcD7k`ddn3S2[SD'e^qcJRr7(,;q]9e7Z0<T#$CKfN%3+-,H/OK3YF?frh4KJA/HL;p=?2'$al#!_'pDB9uV;%:YfB)Mo3Yc]_P4!S:d>)+;8i!@P4Y7H95%)[kBDl,-mS8g'oBsli+Rn7>%jKTh@G<[c53llU0@I_[006+qG4Kq*_#E(S;)'S2-97N-Wh7P:.XI(dU<%4;)C]f"i]FtgOJ<kh-`13f<^pK_^3K7/r0OORTnm[g\%PV]15O#^/)QZ(U].G.!A0Voc6Kq;<o2u=01R@>N;g.]<W&BpP=ElfY.FPRJDP^-$=a=>r-=]E0sL[Jc_'q#:JJq5qOb%$VrEQJ%+%6-e44,g>aO#sI@^>:VOK;PtHAl%"=6M=9QqAWn3FWg`,pk@r5k9fA-cCqKh#pPrSglm<5QQo!W>m>>cpmdu#io9MaL\Z>;Sj;B-1%[eEcF3l+P?gicnJbaFnm1d)40"Q'#.QfN+Rf0R^:D1F[qB7ufL)Bni_MqL7$?li@[CU6_$&&Fc]anb15.:Sn]!q3Jt!1V&'NS%ad%e-rPG1F0+C0eb7kSX(SD^JPK.1H1l&lQ*`,#L&Sq&=+F$9/%k#jt/##YHj0!Qo!&[J!7?#dsrlG$`]_A@pBu$h@,c-oeFku*]YuG%baJ3A0?\FmS67R#A_FXK$1Ahjp'/a/&.35Ms#hS0SfF]"HJ<gjoT8\<;gt!Mnq.*]jFB8^5.@:LAHN.6,S-)GjdT7_GR3G*aA=ej%kdWXZ@UMge7t"rCW.t*ZbaCO"`4eJ%f%HH+F67o>2A7^eNWB6'\,>f2*Y"Jm0/(\`gJ>H_"7rbXs61C>0P;I(N5R4X\9/'Zn'A+A%J!/^Z'kb=PW=Q"&KF:Fq%ls)aTJ-nRqsl7<%*Wq%53]9A420M]QnpUDXtHIgT(2mao6o]-_W\G8]@198Hrib\_X"F=\&Y#<H"D,j%YhRss0kEtN>qKo\Sr3Vjk)!9fmrh,U1Ck%An).$B;[t[hSK9ItU7C$hFVZSS(<Cd1V^>#;X;I=&?iE%.r#IJ(U7X?2MLZufiV0bR%ggeXb;6j)[?18IK0JGHL"k/C(LRa-?%@c^sbWS,O9Kd]fp9u?W)DEl,]CpF"C\F,O&#=K6iaQ#p"q8`9Qg%VVceVVaNs"Ogm5V>L%R1='%#0`L%VYZ7:TL6MXio>AE07(j1-`Vs!]@17t?4^f2$.M8d6hS*(@7?]/Y7oK`h2X#j%*TYjp1+8EfW=9ZkFK2ZC&M(#=RXhh%Zn1bUqp8^+,Nd2jBBO9,8'IC1QH,,5Z:p02.gDmKi7W)DZ#LU'kFM?ijmE&'JLS/,AM:CWSr/!8S9a=)As44cqR.7r0]*B4m!P.1%e.>XiQnqT&I@&DQr>dk,c:#LRIE.c@6SL2Q/+asVCC\nfooSe;n^t6Oc=OWiJ[`DC?1p%J93cE1ZH&KG@4u]e53Wq.kM:H+^7?Yl%n.6#PGMfQ9kF9tg>;>CaF!cdka`mE!Eb<;+4KY!)Hno&)o\O*'<*>/./N#9Y6SN00\s(g62E,pjbfe/Tn++lGmUM;<'5:r]$ht8A%9ZcuY^W9X=`t<A>$3a%B^u]NI`KWAYlF(3R+&M&pq`iT?l!F+Go.I.',^8RiZS5cp^<c7!"lA;]Lj\G1Qno84a4]Pk:m\O$"*9T#%m77/)0k/Er_=RG%0L3oN0lu"_/\>Ap@UQ@R/5i?2mf0gL@.osD;$:f%I_c9d!<V`'l'M;lhaJE9<GfOA\P!Nl9g2o:QSU/Sb^7a%%WjgJBR>k?(0Q@RT0oSZsfH\[nk3ZEXN'.:G;eqKL`tHWJ2F,PT?8=OjS8R@%aEd4qH-pn"?^L9i"PtRLc1!;m>A)`X*ciY@ii$Dc%]SouJ0J?CU.C6\-S9[g%KgF6p&&H&Gr)N<74PSP!c:!5+3OYAoB3*6E.%S(f%1sg#89p,1fJ\T?=2!&_3U\pcbeE2YN#XN*B2]#K%Q<W=9&T]:`JXa_U2J6(7R48[$el_Ki#e\-@JaI74LcH-k_"J4T`5#XJ3@0)l(bo[k;Q`C6j'4b+I)VT^ARPCH2e$0@+C"_Z2Iasb%2R*-Z*AK6ldfs^ZiA3gGK/.E#:ug^^Qo"28^M%DJaP3's"7qV8QIn]A38R"VB0mL2c>.dqoFQ6pKRk$WJrN,.3=i\dM<C:Y=>;K_%'*`>P.t,:EHd%n>#4>AJCHme]0kXg=DSBm,+X7a.]QXI\Vrm6'2djpa1/QQ"g[7gt.9!$aH>G4k3_fT<@*XE\:d38[Gfg98R8=*F%YiFC7RM>pG2JM)]'B11&1JcCZbDah%f+5^5'\CLrn[(Y*0P@CJ:c@>Q*m#ID*n5c#iu<Fh0JHR,#B!T.o-'JWTajb7J,oan1NfA'%k-,EjORohMPdI#`X9Jb2k)R]ZIL!Wm[2Uf4662H,hIFia3q+.91.r,hG_]u8e%U1ES-a%?qL(&*@%O5)9Y]EgbaF:E9fq55F/ER"%Hbjj9rK7<cc\m@16taIXD8;YJM-sNC"q8]p.R=LO1F#!&Gu+g]W22Tu0kWg!pti@5l:lA^njH?a*]=*rXORF8bYnmDVqEt9@*1!8%_]!N/&t/iA*Ya4jXZKq9KL0XaR`l;Y^g'PVR'51Qc@eNgS]-U+R'PK%dF5eeR2@Vj+t,BEU&bAfh7quDiLN"kf'<?XVTK%rMm#L<%"c_HC98_+("Q"#'5nT\^eo-U0'+.#;<ueP&.gG/+^-,LBpKaH5(boZ<8Zm89p\pO=1OI?6f-PA&o7W4g+W-TE.0QK-iFKXrQnq_c%-p_.n@b9s$0J=gW22.n*'HSr@66UTe*guPY*&)$"k[s[F1gj_JQ;%!+-U%ZSVC$`JZs`@O"3M3=SXuGq,%Saj4(-?e6L`>WUIHer%o:QUV,^/s)@`?-Q9cnW4_tjqgR?ntg*ugB.4p1sd8k`CulfH";5@Dc!oFtS0mGNCJ?sp.7&DSol+$3rWKL/LF'"?P]'lt]9Jl62h%>.m1#`PC8&+h5^%7!TMe(8AFj0Ph+$$qud30)uNq,^ROWS"?DDHi/=40P<]n-nE5J`NFLqbes((m42]X3=kDj?!c:OD8_<_H($cj%U0_8<7@XNmT\Nq%f++0(D`pI;I;u@`YV9Hm?BPG+rsA@bn69hHS-`cbCXIOi%5D6uhPL_:7I>c;k^YZ,b!:sH5+Gb1B0mKG:IsF@%&58M\UfV9'`P"J<iiEONkGN$:"phlpdT19V]Ti`GR48V]T5lsqXMo:4kq,,-c@dsWkq,BKR8=*re*dkNF)B>j4%:/DB-,[=-[";H%JLB@=m\7oD0kYZU_#\SJB`f[OfP.u"J[[RLTH-(QQnt3eE5a:a?sk%Y$r"kdF6:3?cnV"J@DnZb:Bi`2VsuMDf'1&e;^@,HFOjsI%$tZ*Sg)bisH+>b.;A\?;1gnU^2R!Kn8'IA4#<"=)Lk0h=k_u,m]&`UIo.I!f<I"aGSk/*F)<`!n*cVrpJYKJ7nB5CY^mn+6-pO^A%lk0QIR8='iOtdL5mXR;2Wk_FR%hO!Vq=(;Xb3opT*B5hcSaqSf\XG'G3mjCs"6;R8X5rZ"a1mD"#?>1"\];M@9GT$jR]Mn5J2n:[%^o!_G0ei?&5fo8L,Nd5K=@sjWLcH-s^c\>4"7n3`@.(_KS-a1CH56\nbgYX(/QQH$S>cS+(031Ui*DY`Y6A-iQnu4j2"_WD0Oi=,%JRCCAK>>)n+"2I7%D1'iF!gO1/`(0ZPkk<;0R]UcPG!;5O#b\]JaEac0P>,$o6ejh%*TS2&+e-QbaG==N/3H*"*8I1?s?P7baG==%9I&gWB:;"<U+8\Abgl?:K%_l6!H[CK/El=Z:+r,?0ehKZhJq+>G*)<g&5;EEJ2n8M_)+@\%*[NAJh7=L`12+!&?P>?"q8_n'S7pf%CrDjC>NQWB5@S#lQJA@Vc&J)H9d(>cm3Cae;[=^'oba'_.g.(M_MC5$1kLEa0edNI$#Z3-obeq9D3ct#L=8H6H[cfsaP[Y/VC:`,%UI;,CQntEJClt/2#3K_?5mc_gB"aB1k"KFkF729S9P=QuLO'4gcZ#6%liD1iH-Uc)_ZL,*l5ILjp'opA#L&S_&r]rH&Td+%eHpXd%*<b6])Sn8%*ci[>M;[.i!q2\)HC>nkjTFSVA+b&D]d<smbeli#ai"[0*]/K5#p1j6RRStTYt#5HdklZ%<q_n:9d:JeWZq`1,o&Wu%$QpQ5+QpEB?,`!JjLj6JZ8Q$?^q3kqf]GR,3R@>Kl)Eo%@EKre:Ki@W,<b$;dg&@Yj;r?5VZ*Q].hHss05Fka#KV0<1@?.]RsN#g%>[/Ehql:<MVC;Z0)qnlA!]^ef_"^>T5iAak%rC^Q&Td*B>$4OG$q:ZLc#S3>#j;kAk-82<%X>q-geAlXYM!F2KK_)%pAd2alG3,!%))3fUP6\Oeh2")_SDXn#Znao)^&)uFVH0Y+LRbi#Z5k#[#<<=[^j*-h#e\?fJba3XQntEFCb,I?JU*_CYcVI]k03cdQKk%_F68He%4,$flA^9bV*4^5:o>cYIoCQQTM-2PeB@@'^q`S?4gcaJRQX]D+n1[+#W`/o(s1`IYH_4Qpje^ibk0.VIipZSA+#.2io%BVlMW>jh%RDqcq0pY"^,mn-2_-$7]QKF*9oO>AC=I(S*O,IT+@QCl!2D((OMl"K=fs"$,/!f1P-*q&pX&ss'QAUPGSKdm+==,J[1lC@L@[Wlk%c6nq6M</_$.@XF[-C0CC-!XoYPunYFQ7e#)7O%)V81()dCD"`c`%hq0S3nj>&Bc<:1'Y#=5V*9SbP*gTp0h*O=M>i>RYN3J@Hhr;%@NCb$LF(,PBlR5V*1#lE-+.1GCKR;LP*9M%5Jo8$YadI"HOS(2__T*5gb0qt$VT^#;R`kU/M%nM9>!T3XKZLj,]O/aOi!9TYd>c/%_$NbG_NL4hoHYt"#tm:qP)GDa+s^_*9+F;ZJ;cKQ=EY4@a+L2S@*(E"*Y+?RK-f,WBf&r/%$hfa-,C`"/kB^bQGeC9X'h>E8.l8q%DLs1#?n!@'Z3Za3JgGqTW?-f,%P3578_-/t19_/q,hW7@X2$J=YZqJ[/HSRq5]Rm,Zj%e.!R"KYZ4`6%">&('9.Ia*#I$Ss/0t9(%rb#[=/>/Vhm^"$a(6207mn&U($`@Wgo.3;$"iI[NG8B,^6J5Mg3X\_rJ`pUj3=@JfOlS'*S4/4>3,fZ'c!n:f'K:s%-DB*D#b/b:%ZcHks6TrF^ZcHeq"&6Y'=^X#n@:m?u/1d1m+L=o)0s$`G&@52A&f!Mu!4,d7'%T.!n?QG-(7*,FE(R,_MlL@YZRf"?`Pf(G<u0sk%6<ZtQ.Z74O+fR$fP_GO2J5R.Db(<#a3%,14A0INqR$35@G#=\R+HqLcZ62dU:<<Pb8W4pQL1G:b,fGfK1U=5R(8*Vk,I4O@&n+=_%#t`npM\'F(J1TuH`V6W.4r1Ip_Xg;D*fIR=d<."#NeGW]i&DJV`rb+"BH%=gA)V/R0TF#DZ"Pp/=2lH*8?`qf$Y'cV/Co_JFccYV%(95?*Z<6l:$aa@d<@iBPKh8P"-kcEqU7>=J'8p*>5tW[J$"&U*i/rJ]kX(6t?(aS!Z+(qm+iIi@=O[ifn6r"Q/80gWkHIJs&p2%.%CKM\gM4%f"0e<fh7D,kW()Fm+i`0)kar#h!!_uj2#n%qci?Bg,KS=r\?k4%(_#cSuW!3XP@,VnhX9FN^+9<0-<.Y9BYj_l5keKM'%=RZA";d]V4A+0L,1E[85/9ZP4$'9Z;-N,#tr_1\bV#*i]cfFjpGg@Z/9M@YXkD;["WSpA/44C\q2*99h1PIk%UGLR`;4&"O3KoFY%JN/jF1XYqFn7GR9-JE)&CaR)4P&$ep-:6up1sP+/9F/lgcU?SO.[c]:RE1SK&t*HoRC\dMLm__>BnMf\R-B$eZBo9MM-QARF.!/t%W,7s*Q76L8<gK^oRJrI#?(%RTWE5K_PpoV!p6;OMM4g))8!uo4a[)?aP=[m)R$5WMR6Zs-0q%6gaX`42P)(HQ4H^!oRH0Ke)juYI%-l/4/Of8n[hN0/oM2788"c5!rL]EjuO!smmL6&>,QnFFKn;,_Wkj!tWNi;',/oK1S&\/iX[Lj)jPH-EH)UY2i\JZ'H0aS^2M_S?O%'7^[s(K5H2r>(N1&QKSY?kKLU;cPRN'N7UY9b^Mj0qAtV1bnA1OXYFQ,c3e88gD<X6%("o^\W/?cR^!:X%*Wq5'V"%#N<fc"nY-G%./2F/7)%t@?<MdPOtp?hjt^q]GEu`H^97^rmUbO3cQ/9!04]?r^UICC,07TX902cH0g-EUG3lNpRm[F1j2u_SMR+sZ9fUk<jGZp4%K$9&TB0G]%TTcoOZ_$FDQ=8SQeI"#/7$t)lR(Ou:[C-NOV`o;(OHE4V:ZI]#hD<[$eQOl'jLa*X;EPkhno54:I7D7"a7#l5>'8&k%X*Jh]]p5-%P%1S1EK'S\SRX4!XaV?e'.^;I\EY`(8d&1NMq&/H`%kDHC!Dd((.GaV'i4^YdsS)!26r-55.j<bYuDgfMc5'jQ`2'/%o3lFhI+\9d;^>%N1[2:@6@ph:"lu!<hKG356gipAd`C+)^ll[a2N99a80/%8i[O5BLN-b_PZtk;aW_\*l9"T/nQko=/<70XGLjfY%^AElG6h]8OZKW0B0@P#CmtF8qpC'\Q8)*#dlf1(qIIo&t-\C4M_3("3")D[biebAPqq]BfG*N7[9M&:n;rjTF$bSDsjP9.VjHj8*%I*IJ%Z[H<+*R+3lX8+#LiOdStI,);h>EK?agSeb5F%'P7WM,A9XffRG*h5:VkJ''\F.(=&>\7ml=,\;^bM&8%=WcN1m%Yq^fR:3Y%%&\mOWEAjJgZk\q`gcl;lnrRhAX?,*Bd%;+E^E%E(r'P>"]UK$B/%?KP<4$gn;2YbN@nRVSfjRs5&a'$Vfkfm:SU_IQng>b?[<p,%kmunX@F(<F^3=7i:])U5;,+<EM_0^a;89O#USk<j2VMEd$r!gm=5,__T)?YjQd/Uci;1YZ;=+1TB9(0HCu8SrTP9aprZkZ)I/eK(%GSbgC\],H<AtBu-j)cluALiKGWO6U4c5WBjoCZ9>R+==QC^+KaWPl))e9]&ZFRr;Ss0RBh*$$45D:pHY5YeKLoC'!<a1h0k/UE-Q%>E4!_$p/'*3II**Qj>&/EOrQ;44<tehes;HfWZZI->[R+r=H$%C:,W"0/T<qfc+eJ'Vc+17Rp[#oPI*5`9<7'KUt6Ndt8<9T"oA-%\mIrR3gPW'C-B_6eTgU0Ie8.)+91%!=q3B/i*<k-m9<R;7PC0Si,FV.=B=#IOuQ0R7_W.Mo=B*$dBD2'69Y>8+7FBdi3hl^kH$j?%>/()<*_)Z65T$Qh5upiMc"6dM5Q/(h.,o<q[MMIuEn!g9I,WR"i\U`VQL3lgp\_fcj1:Z&?)5XEb#do@I;l'A\WSRhg"4_1#SC3^%6hP\dh"&-_HKLAB#qVRo?11YIHIu7M>qc%Ff/"sbc\$eiI8.&NdFrE"eYdos2SV3-W@,!$0T)O&FJj>qT"3!&gpHFJ-tDXF2,u)6%3S!R!&'d'*OJR6:6#E7K\,=ZQdSn[Kae<ajWeVnfC3%gQe1%G2]!\4Q>OQe#TOH**B\IXkXb4'!PXF:&XP:`3JkY!7Xs;3W>IMN6%EU#JV8c?4PXl$S4VgagYdI1aAHQ>N'[cqKh`1B;U^@a:(JmQbU;r-WW&DHg38D?n?@JOYDbE!]Zit+CK\m5f^p:J!'74i`+N(rbe%3NgrZhs%NtZ9hoCr)mi<EbDaRIe#\N]0:%&n+s9!4r(c]:USp5oe3\Pi2[c5`Y>0W.n3`IDR@1EM:%q;s754Lko]opVgnTq+(,'I%a3XeR5OSRETE"iH^4-$1^]".-s7G@7TE"MdJ,8QIr;Q$^pn,>"ro6e(rUp3gp=$3prpsLrp?UUbqd8fAIeqO^^]!hDJ,0&PTDn]E%s71XCH(-elkF_eM5Q-?ZruW[b@!_~>%AI9_PrivateDataEnd